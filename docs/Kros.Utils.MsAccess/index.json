{
  "api/Kros.Data.MsAccess.MsAccessIdGenerator.html": {
    "href": "api/Kros.Data.MsAccess.MsAccessIdGenerator.html",
    "title": "Class MsAccessIdGenerator | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessIdGenerator The unique ID generator for Microsoft Access. Inheritance System.Object Kros.Data.IdGeneratorBase MsAccessIdGenerator Implements Kros.Data.IIdGenerator Inherited Members Kros.Data.IdGeneratorBase.GetNext() Kros.Data.IdGeneratorBase.Dispose(System.Boolean) Kros.Data.IdGeneratorBase.Dispose() Kros.Data.IdGeneratorBase.TableName Kros.Data.IdGeneratorBase.BatchSize Kros.Data.IdGeneratorBase.Connection Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessIdGenerator : IdGeneratorBase, IIdGenerator, IDisposable Remarks In general, the generator should be created using MsAccessIdGeneratorFactory . Examples public class PeopleService { private IIdGeneratorFactory _idGeneratorFactory; public PeopleService(IIdGeneratorFactory idGeneratorFactory) { _idGeneratorFactory = Check.NotNull(idGeneratorFactory, nameof(idGeneratorFactory)); } public void GenerateData() { using (var idGenerator = _idGeneratorFactory.GetGenerator(\"people\", 1000)) { for (int i = 0; i < 1800; i++) { var person = new Person() { Id = idGenerator.GetNext() }; } } } } Constructors MsAccessIdGenerator(OleDbConnection, String, Int32) Creates a generator for table tableName in database connection with batch size batchSize . Declaration public MsAccessIdGenerator(OleDbConnection connection, string tableName, int batchSize) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connection or tableName is null . System.ArgumentException Value of batchSize is less or equal than 0. MsAccessIdGenerator(String, String, Int32) Creates a generator for table tableName in database connectionString with batch size batchSize . Declaration public MsAccessIdGenerator(string connectionString, string tableName, int batchSize) Parameters Type Name Description System.String connectionString Connection string to the database. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connectionString or tableName is null . System.ArgumentException Methods CreateConnection(String) Declaration protected override DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Data.Common.DbConnection Overrides Kros.Data.IdGeneratorBase.CreateConnection(System.String) GetIdStoreTableCreationScript() Returns SQL script for creating IdStore table. Declaration public static string GetIdStoreTableCreationScript() Returns Type Description System.String GetNewIdFromDbCore() Declaration protected override int GetNewIdFromDbCore() Returns Type Description System.Int32 Overrides Kros.Data.IdGeneratorBase.GetNewIdFromDbCore() InitDatabaseForIdGenerator() Declaration public override void InitDatabaseForIdGenerator() Overrides Kros.Data.IdGeneratorBase.InitDatabaseForIdGenerator() Implements Kros.Data.IIdGenerator See Also Kros.Data.IdGeneratorFactories MsAccessIdGeneratorFactory"
  },
  "api/Kros.Data.BulkActions.MsAccess.html": {
    "href": "api/Kros.Data.BulkActions.MsAccess.html",
    "title": "Namespace Kros.Data.BulkActions.MsAccess | Kros.Utils.MsAccess",
    "keywords": "Namespace Kros.Data.BulkActions.MsAccess Classes MsAccessBulkActionFactory Creates instances of Kros.Data.BulkActions.IBulkInsert for bulk inserting. MsAccessBulkInsert The calss for fast bulk insert big amount of data into Microsoft Access database. MsAccessBulkUpdate Class for fast bulk data update for Microsoft Access. Enums BulkInsertColumnType Column type for bulk insert into Microsoft Access database from file."
  },
  "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ProceduresSchemaNames.html": {
    "href": "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ProceduresSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.ProceduresSchemaNames | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessSchemaLoader.ProceduresSchemaNames Inheritance System.Object MsAccessSchemaLoader.ProceduresSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class ProceduresSchemaNames Fields DateCreated Declaration public const string DateCreated = \"DATE_CREATED\" Field Value Type Description System.String DateModified Declaration public const string DateModified = \"DATE_MODIFIED\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String ProcedureCatalog Declaration public const string ProcedureCatalog = \"PROCEDURE_CATALOG\" Field Value Type Description System.String ProcedureDefinition Declaration public const string ProcedureDefinition = \"PROCEDURE_DEFINITION\" Field Value Type Description System.String ProcedureName Declaration public const string ProcedureName = \"PROCEDURE_NAME\" Field Value Type Description System.String ProcedureSchema Declaration public const string ProcedureSchema = \"PROCEDURE_SCHEMA\" Field Value Type Description System.String ProcedureType Declaration public const string ProcedureType = \"PROCEDURE_TYPE\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.MsAccess.MsAccessColumnSchema.html": {
    "href": "api/Kros.Data.Schema.MsAccess.MsAccessColumnSchema.html",
    "title": "Class MsAccessColumnSchema | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessColumnSchema Table's column schema for Microsoft Access. Inheritance System.Object Kros.Data.Schema.ColumnSchema MsAccessColumnSchema Inherited Members Kros.Data.Schema.ColumnSchema.DefaultDefaultValue Kros.Data.Schema.ColumnSchema.DefaultAllowNull Kros.Data.Schema.ColumnSchema.DefaultSize Kros.Data.Schema.ColumnSchema.DefaultPrecision Kros.Data.Schema.ColumnSchema.DefaultScale Kros.Data.Schema.ColumnSchema.ToStringDefaultValue() Kros.Data.Schema.ColumnSchema.Table Kros.Data.Schema.ColumnSchema.Name Kros.Data.Schema.ColumnSchema.FullName Kros.Data.Schema.ColumnSchema.AllowNull Kros.Data.Schema.ColumnSchema.DefaultValue Kros.Data.Schema.ColumnSchema.Size Kros.Data.Schema.ColumnSchema.Precision Kros.Data.Schema.ColumnSchema.Scale Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessColumnSchema : ColumnSchema Constructors MsAccessColumnSchema(String) Declaration public MsAccessColumnSchema(string name) Parameters Type Name Description System.String name MsAccessColumnSchema(String, Boolean) Declaration public MsAccessColumnSchema(string name, bool allowNull) Parameters Type Name Description System.String name System.Boolean allowNull MsAccessColumnSchema(String, Boolean, Object) Declaration public MsAccessColumnSchema(string name, bool allowNull, object defaultValue) Parameters Type Name Description System.String name System.Boolean allowNull System.Object defaultValue MsAccessColumnSchema(String, Boolean, Object, Int32) Declaration public MsAccessColumnSchema(string name, bool allowNull, object defaultValue, int size) Parameters Type Name Description System.String name System.Boolean allowNull System.Object defaultValue System.Int32 size Properties OleDbType Data type of the column. Declaration public OleDbType OleDbType { get; set; } Property Value Type Description System.Data.OleDb.OleDbType Methods SetupParameter(IDataParameter) Declaration public override void SetupParameter(IDataParameter param) Parameters Type Name Description System.Data.IDataParameter param Overrides Kros.Data.Schema.ColumnSchema.SetupParameter(System.Data.IDataParameter) Exceptions Type Condition System.ArgumentException Hodnota param nie je typu System.Data.OleDb.OleDbParameter . ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.UnitTests.MsAccessTestHelper.html": {
    "href": "api/Kros.UnitTests.MsAccessTestHelper.html",
    "title": "Class MsAccessTestHelper | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessTestHelper Helper class for unit tests, if there is a need for real database in tests. It creates temporary empty database for testing. This database is automatically deleted after finishing the work. Inheritance System.Object MsAccessTestHelper Namespace : Kros.UnitTests Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessTestHelper : IDisposable Constructors MsAccessTestHelper(ProviderType) Creates an instance of helper with specified parameters. New database file is created as an empty database with random name in temporary folder. Declaration public MsAccessTestHelper(ProviderType provider) Parameters Type Name Description ProviderType provider Microsoft Access provider type. MsAccessTestHelper(ProviderType, IEnumerable<String>) Creates an instance of helper with specified parameters. New database file is created as an empty database with random name in temporary folder and is initialized with scripts in initDatabaseScripts . Declaration public MsAccessTestHelper(ProviderType provider, IEnumerable<string> initDatabaseScripts) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.Collections.Generic.IEnumerable < System.String > initDatabaseScripts List of scripts, which are used for database initialization. For example, they can be scripts for creating and filling necessary tables. MsAccessTestHelper(ProviderType, Stream) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabaseStream . Declaration public MsAccessTestHelper(ProviderType provider, Stream sourceDatabaseStream) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.IO.Stream sourceDatabaseStream Source database. New temporary database is created as a copy of this. MsAccessTestHelper(ProviderType, Stream, IEnumerable<String>) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabaseStream and initialized with scripts in initDatabaseScripts . Declaration public MsAccessTestHelper(ProviderType provider, Stream sourceDatabaseStream, IEnumerable<string> initDatabaseScripts) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.IO.Stream sourceDatabaseStream Source database. New temporary database is created as a copy of this. System.Collections.Generic.IEnumerable < System.String > initDatabaseScripts List of scripts, which are used for database initialization. For example, they can be scripts for creating and filling necessary tables. MsAccessTestHelper(ProviderType, Stream, String) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabaseStream and initialized with script initDatabaseScript . Declaration public MsAccessTestHelper(ProviderType provider, Stream sourceDatabaseStream, string initDatabaseScript) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.IO.Stream sourceDatabaseStream Source database. New temporary database is created as a copy of this. System.String initDatabaseScript A script, which is used for database initialization. For example, it can be script for creating some table. MsAccessTestHelper(ProviderType, String) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabasePath . Declaration public MsAccessTestHelper(ProviderType provider, string sourceDatabasePath) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.String sourceDatabasePath Source database. New temporary database is created as a copy of this. MsAccessTestHelper(ProviderType, String, IEnumerable<String>) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabasePath and initialized with scripts in initDatabaseScripts . Declaration public MsAccessTestHelper(ProviderType provider, string sourceDatabasePath, IEnumerable<string> initDatabaseScripts) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.String sourceDatabasePath Source database. New temporary database is created as a copy of this. System.Collections.Generic.IEnumerable < System.String > initDatabaseScripts List of scripts, which are used for database initialization. For example, they can be scripts for creating and filling necessary tables. MsAccessTestHelper(ProviderType, String, String) Creates an instance of helper with specified parameters. New database file is created as a copy of sourceDatabasePath and initialized with script initDatabaseScript . Declaration public MsAccessTestHelper(ProviderType provider, string sourceDatabasePath, string initDatabaseScript) Parameters Type Name Description ProviderType provider Microsoft Access provider type. System.String sourceDatabasePath Source database. New temporary database is created as a copy of this. System.String initDatabaseScript A script, which is used for database initialization. For example, it can be script for creating some table. Properties Connection Connection to created temporary database. Declaration public OleDbConnection Connection { get; } Property Value Type Description System.Data.OleDb.OleDbConnection DatabasePath Path to created temporary database. Declaration public string DatabasePath { get; } Property Value Type Description System.String Methods Dispose() Declaration public void Dispose() GenerateDatabaseName() Generates path to the file where database will be created. Default is random filename in system's temp folder. Declaration protected virtual string GenerateDatabaseName() Returns Type Description System.String Path to the database file. InitDatabase() Initializes new empty database. Method is called after empty temporary database is created and it executes initialization scripts (specified in constructor). method is called only once. Declaration protected virtual void InitDatabase()"
  },
  "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ViewsSchemaNames.html": {
    "href": "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ViewsSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.ViewsSchemaNames | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessSchemaLoader.ViewsSchemaNames Inheritance System.Object MsAccessSchemaLoader.ViewsSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class ViewsSchemaNames Fields DateCreated Declaration public const string DateCreated = \"DATE_CREATED\" Field Value Type Description System.String DateModified Declaration public const string DateModified = \"DATE_MODIFIED\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String CheckOption Declaration public const string CheckOption = \"CHECK_OPTION\" Field Value Type Description System.String IsUpdatable Declaration public const string IsUpdatable = \"IS_UPDATABLE\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String ViewDefinition Declaration public const string ViewDefinition = \"VIEW_DEFINITION\" Field Value Type Description System.String"
  },
  "api/Kros.Data.MsAccess.MsAccessIdGeneratorFactory.html": {
    "href": "api/Kros.Data.MsAccess.MsAccessIdGeneratorFactory.html",
    "title": "Class MsAccessIdGeneratorFactory | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessIdGeneratorFactory Creates an instances of MsAccessIdGenerator for specified database. Inheritance System.Object MsAccessIdGeneratorFactory Implements Kros.Data.IIdGeneratorFactory Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessIdGeneratorFactory : IIdGeneratorFactory Examples public class PeopleService { private IIdGeneratorFactory _idGeneratorFactory; public PeopleService(IIdGeneratorFactory idGeneratorFactory) { _idGeneratorFactory = Check.NotNull(idGeneratorFactory, nameof(idGeneratorFactory)); } public void GenerateData() { using (var idGenerator = _idGeneratorFactory.GetGenerator(\"people\", 1000)) { for (int i = 0; i < 1800; i++) { var person = new Person() { Id = idGenerator.GetNext() }; } } } } Constructors MsAccessIdGeneratorFactory(OleDbConnection) Initializes a new instance of the MsAccessIdGeneratorFactory class. Declaration public MsAccessIdGeneratorFactory(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Connection, ktorá sa použije pre získavanie unikátnych identifikátorov. MsAccessIdGeneratorFactory(String) Initializes a new instance of the MsAccessIdGeneratorFactory class. Declaration public MsAccessIdGeneratorFactory(string connectionString) Parameters Type Name Description System.String connectionString Connection string, ktorý sa použije na vytvorenie conenction pre získavanie unikátnych identifikátorov. Methods GetGenerator(String) Declaration public IIdGenerator GetGenerator(string tableName) Parameters Type Name Description System.String tableName Returns Type Description Kros.Data.IIdGenerator GetGenerator(String, Int32) Declaration public IIdGenerator GetGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName System.Int32 batchSize Returns Type Description Kros.Data.IIdGenerator Register() Registers factory methods for creating an instance of factory into Kros.Data.IdGeneratorFactories . Declaration public static void Register() Implements Kros.Data.IIdGeneratorFactory See Also MsAccessIdGenerator Kros.Data.IdGeneratorFactories"
  },
  "api/Kros.Utils.MsAccess.html": {
    "href": "api/Kros.Utils.MsAccess.html",
    "title": "Namespace Kros.Utils.MsAccess | Kros.Utils.MsAccess",
    "keywords": "Namespace Kros.Utils.MsAccess Classes LibraryInitializer Initialization of the library."
  },
  "api/Kros.Data.MsAccess.html": {
    "href": "api/Kros.Data.MsAccess.html",
    "title": "Namespace Kros.Data.MsAccess | Kros.Utils.MsAccess",
    "keywords": "Namespace Kros.Data.MsAccess Classes Extensions General extensions for Microsoft Access. MsAccessDataHelper General helpers for work Microsoft Access. MsAccessIdGenerator The unique ID generator for Microsoft Access. MsAccessIdGeneratorFactory Creates an instances of MsAccessIdGenerator for specified database. Enums MsAccessErrorCode Error codes for Microsoft Access database provider. ProviderType Type of Microsoft Access provider."
  },
  "api/Kros.Data.MsAccess.Extensions.html": {
    "href": "api/Kros.Data.MsAccess.Extensions.html",
    "title": "Class Extensions | Kros.Utils.MsAccess",
    "keywords": "Class Extensions General extensions for Microsoft Access. Inheritance System.Object Extensions Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class Extensions Methods MsAccessErrorCode(OleDbException) Returns Microsoft Access error code. Declaration public static MsAccessErrorCode MsAccessErrorCode(this OleDbException ex) Parameters Type Name Description System.Data.OleDb.OleDbException ex Exception, whose error code is checked. Returns Type Description MsAccessErrorCode Returns error code as an enumeration MsAccessErrorCode . If the error code is unknown, or not defined, value MsAccessErrorCode is returned. Remarks Method checks the value of System.Data.OleDb.OleDbError.SQLState of the first error in the list System.Data.OleDb.OleDbException.Errors . MsAccessErrorCode(OleDbException, out String) Returns Microsoft Access error code. Declaration public static MsAccessErrorCode MsAccessErrorCode(this OleDbException ex, out string sqlState) Parameters Type Name Description System.Data.OleDb.OleDbException ex Exception, whose error code is checked. System.String sqlState Real value of System.Data.OleDb.OleDbError.SQLState . Returns Type Description MsAccessErrorCode Returns error code as an enumeration MsAccessErrorCode . If the error code is unknown, or not defined, value MsAccessErrorCode is returned. Remarks Method checks the value of System.Data.OleDb.OleDbError.SQLState of the first error in the list System.Data.OleDb.OleDbException.Errors ."
  },
  "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.html": {
    "href": "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.html",
    "title": "Class MsAccessSchemaLoader | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessSchemaLoader The implementation of Kros.Data.Schema.IDatabaseSchemaLoader<T> for Microsoft Access. Inheritance System.Object MsAccessSchemaLoader Implements Kros.Data.Schema.IDatabaseSchemaLoader < System.Data.OleDb.OleDbConnection > Kros.Data.Schema.IDatabaseSchemaLoader Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessSchemaLoader : IDatabaseSchemaLoader<OleDbConnection>, IDatabaseSchemaLoader Methods GetDefaultValueString(String) Adjusts the string rawDefaultValueString so column's default value can be obtained from it. Declaration protected virtual string GetDefaultValueString(string rawDefaultValueString) Parameters Type Name Description System.String rawDefaultValueString Default value string as it is stored in database. Returns Type Description System.String Adjusted string - trimmed of unneeded characters. LoadSchema(OleDbConnection) Loads database schema for connection . Declaration public DatabaseSchema LoadSchema(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection. Returns Type Description Kros.Data.Schema.DatabaseSchema Database schema. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException Value of connection id null . System.ArgumentException The connection connection is not a connection to Microsoft Access database. LoadTableSchema(OleDbConnection, String) Loads table schema for table tableName in database connection . Declaration public TableSchema LoadTableSchema(OleDbConnection connection, string tableName) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection. System.String tableName Table name. Returns Type Description Kros.Data.Schema.TableSchema Table schema, or value null if specified table does not exist. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException System.ArgumentException Value of tableName is an empty string, or string containing whitespace characters only. OnParseDefaultValue(MsAccessParseDefaultValueEventArgs) Raises the ParseDefaultValue event with arguments e . Declaration protected virtual void OnParseDefaultValue(MsAccessParseDefaultValueEventArgs e) Parameters Type Name Description MsAccessParseDefaultValueEventArgs e Arguments for the event. SupportsConnectionType(OleDbConnection) Checks if it is poosible to load database schema for connection . Declaration public bool SupportsConnectionType(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection. Returns Type Description System.Boolean false if value of connection is null , or it is not a connection to Microsoft Access database. Otherwise true . Events ParseDefaultValue Event raised while parsing default value of a column. It is possible to use custom parsing logic in the event handler. Declaration public event EventHandler<MsAccessParseDefaultValueEventArgs> ParseDefaultValue Event Type Type Description System.EventHandler < MsAccessParseDefaultValueEventArgs > Remarks When custom logic for parsing column's default value is used, the parsed value is set in DefaultValue property and Handled flag must be set to true . Explicit Interface Implementations IDatabaseSchemaLoader.LoadSchema(Object) Loads database schema for connection . Declaration DatabaseSchema IDatabaseSchemaLoader.LoadSchema(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description Kros.Data.Schema.DatabaseSchema Database schema. Remarks By default, schema is loaded using new connection to the database, based on connection . But if connection is an exclusive connection, it is used directly. Exceptions Type Condition System.ArgumentNullException The value of connection is null . System.ArgumentException The connection connection is not a connection to Microsoft Access database. IDatabaseSchemaLoader.LoadTableSchema(Object, String) Loads table schema for table tableName in database connection . Declaration TableSchema IDatabaseSchemaLoader.LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection Database connection. System.String tableName Table name. Returns Type Description Kros.Data.Schema.TableSchema Table schema, or value null if specified table does not exist. Remarks By default, schema is loaded using new connection to the database, based on connection . But if connection is an exclusive connection, it is used directly. Exceptions Type Condition System.ArgumentNullException The value of connection or tableName is null . System.ArgumentException IDatabaseSchemaLoader.SupportsConnectionType(Object) Declaration bool IDatabaseSchemaLoader.SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Returns Type Description System.Boolean Implements Kros.Data.Schema.IDatabaseSchemaLoader<T> Kros.Data.Schema.IDatabaseSchemaLoader"
  },
  "api/Kros.Data.BulkActions.MsAccess.BulkInsertColumnType.html": {
    "href": "api/Kros.Data.BulkActions.MsAccess.BulkInsertColumnType.html",
    "title": "Enum BulkInsertColumnType | Kros.Utils.MsAccess",
    "keywords": "Enum BulkInsertColumnType Column type for bulk insert into Microsoft Access database from file. Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public enum BulkInsertColumnType Fields Name Description Text Text column type. Undefined Undefined (default) column type."
  },
  "api/Kros.Data.Schema.MsAccess.html": {
    "href": "api/Kros.Data.Schema.MsAccess.html",
    "title": "Namespace Kros.Data.Schema.MsAccess | Kros.Utils.MsAccess",
    "keywords": "Namespace Kros.Data.Schema.MsAccess Classes MsAccessCacheKeyGenerator Cache key generator for Microsoft Access used by Kros.Data.Schema.DatabaseSchemaCache . MsAccessColumnSchema Table's column schema for Microsoft Access. MsAccessParseDefaultValueEventArgs Arguments for the event ParseDefaultValue . MsAccessSchemaLoader The implementation of Kros.Data.Schema.IDatabaseSchemaLoader<T> for Microsoft Access. MsAccessSchemaLoader.ColumnsSchemaNames MsAccessSchemaLoader.IndexesSchemaNames MsAccessSchemaLoader.ProceduresSchemaNames MsAccessSchemaLoader.SchemaNames MsAccessSchemaLoader.TablesSchemaNames MsAccessSchemaLoader.TableTypes MsAccessSchemaLoader.ViewsSchemaNames"
  },
  "api/Kros.Data.MsAccess.ProviderType.html": {
    "href": "api/Kros.Data.MsAccess.ProviderType.html",
    "title": "Enum ProviderType | Kros.Utils.MsAccess",
    "keywords": "Enum ProviderType Type of Microsoft Access provider. Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public enum ProviderType Fields Name Description Ace ACE provider. Jet JET provider."
  },
  "api/Kros.Data.BulkActions.MsAccess.MsAccessBulkActionFactory.html": {
    "href": "api/Kros.Data.BulkActions.MsAccess.MsAccessBulkActionFactory.html",
    "title": "Class MsAccessBulkActionFactory | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessBulkActionFactory Creates instances of Kros.Data.BulkActions.IBulkInsert for bulk inserting. Inheritance System.Object MsAccessBulkActionFactory Implements Kros.Data.BulkActions.IBulkActionFactory Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkActionFactory : IBulkActionFactory Constructors MsAccessBulkActionFactory(OleDbConnection) Initializes a new instance of the MsAccessBulkActionFactory class. Declaration public MsAccessBulkActionFactory(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection The connection. MsAccessBulkActionFactory(String) Initializes a new instance of the MsAccessBulkActionFactory class. Declaration public MsAccessBulkActionFactory(string connectionString) Parameters Type Name Description System.String connectionString The connection string. Methods GetBulkInsert() Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert() Returns Type Description Kros.Data.BulkActions.IBulkInsert The bulk insert. GetBulkInsert(DbTransaction) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description Kros.Data.BulkActions.IBulkInsert The bulk insert. GetBulkInsert(DbTransaction, Int32) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(DbTransaction externalTransaction, int csvFileCodePage) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. System.Int32 csvFileCodePage The CSV file code page. Returns Type Description Kros.Data.BulkActions.IBulkInsert The bulk insert. GetBulkInsert(DbTransaction, Int32, Char) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(DbTransaction externalTransaction, int csvFileCodePage, char valueDelimiter) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. System.Int32 csvFileCodePage The CSV file code page. System.Char valueDelimiter The value delimiter. Returns Type Description Kros.Data.BulkActions.IBulkInsert The bulk insert. GetBulkUpdate() Gets the bulk update. Declaration public IBulkUpdate GetBulkUpdate() Returns Type Description Kros.Data.BulkActions.IBulkUpdate The bulk update. GetBulkUpdate(DbTransaction) Gets the bulk update. Declaration public IBulkUpdate GetBulkUpdate(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description Kros.Data.BulkActions.IBulkUpdate The bulk update. Register() Registers factory methods for creation instances to Kros.Data.BulkActions.BulkActionFactories . Declaration public static void Register() Implements Kros.Data.BulkActions.IBulkActionFactory See Also Kros.Data.BulkActions.IBulkActionFactory"
  },
  "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.IndexesSchemaNames.html": {
    "href": "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.IndexesSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.IndexesSchemaNames | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessSchemaLoader.IndexesSchemaNames Inheritance System.Object MsAccessSchemaLoader.IndexesSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class IndexesSchemaNames Fields AutoUpdate Declaration public const string AutoUpdate = \"AUTO_UPDATE\" Field Value Type Description System.String Cardinality Declaration public const string Cardinality = \"CARDINALITY\" Field Value Type Description System.String Clustered Declaration public const string Clustered = \"CLUSTERED\" Field Value Type Description System.String Collation Declaration public const string Collation = \"COLLATION\" Field Value Type Description System.String ColumnGuid Declaration public const string ColumnGuid = \"COLUMN_GUID\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String ColumnPropid Declaration public const string ColumnPropid = \"COLUMN_PROPID\" Field Value Type Description System.String FillFactor Declaration public const string FillFactor = \"FILL_FACTOR\" Field Value Type Description System.String FilterCondition Declaration public const string FilterCondition = \"FILTER_CONDITION\" Field Value Type Description System.String IndexCatalog Declaration public const string IndexCatalog = \"INDEX_CATALOG\" Field Value Type Description System.String IndexName Declaration public const string IndexName = \"INDEX_NAME\" Field Value Type Description System.String IndexSchema Declaration public const string IndexSchema = \"INDEX_SCHEMA\" Field Value Type Description System.String InitialSize Declaration public const string InitialSize = \"INITIAL_SIZE\" Field Value Type Description System.String Integrated Declaration public const string Integrated = \"INTEGRATED\" Field Value Type Description System.String NullCollation Declaration public const string NullCollation = \"NULL_COLLATION\" Field Value Type Description System.String Nulls Declaration public const string Nulls = \"NULLS\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String Pages Declaration public const string Pages = \"PAGES\" Field Value Type Description System.String PrimaryKey Declaration public const string PrimaryKey = \"PRIMARY_KEY\" Field Value Type Description System.String SortBookmarks Declaration public const string SortBookmarks = \"SORT_BOOKMARKS\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String Type Declaration public const string Type = \"TYPE\" Field Value Type Description System.String Unique Declaration public const string Unique = \"UNIQUE\" Field Value Type Description System.String"
  },
  "api/Kros.Data.MsAccess.MsAccessDataHelper.html": {
    "href": "api/Kros.Data.MsAccess.MsAccessDataHelper.html",
    "title": "Class MsAccessDataHelper | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessDataHelper General helpers for work Microsoft Access. Inheritance System.Object MsAccessDataHelper Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class MsAccessDataHelper Fields AceProviderBase Identification of Microsoft Access ACE provider: Microsoft.ACE.OLEDB . Declaration public const string AceProviderBase = \"Microsoft.ACE.OLEDB\" Field Value Type Description System.String ClientId Identification of Microsoft Access classes (used for example in MsAccessIdGeneratorFactory , MsAccessBulkActionFactory ). Declaration public const string ClientId = \"System.Data.OleDb\" Field Value Type Description System.String JetProviderBase Identification of Microsoft Access JET provider: Microsoft.Jet.OLEDB . Declaration public const string JetProviderBase = \"Microsoft.Jet.OLEDB\" Field Value Type Description System.String Properties MsAccessAceProvider Returns string for installed Microsoft Access ACE provider (for example Microsoft.ACE.OLEDB.12.0 ). If ACE provider is not installed, empty string is returned. Declaration public static string MsAccessAceProvider { get; } Property Value Type Description System.String Remarks Provider is loaded from the system only once and the value is cached. So when no provider is found, this state is returned for any subsequent reads of the property. MsAccessJetProvider Returns string for installed Microsoft Access ACE provider (for example Microsoft.Jet.OLEDB.4.0 ). If JET provider is not installed, empty string is returned. Declaration public static string MsAccessJetProvider { get; } Property Value Type Description System.String Remarks Provider is loaded from the system only once and the value is cached. So when no provider is found, this state is returned for any subsequent reads of the property. MsAccessProvider Returns installed provider for Microsoft Access. ACE provider is preferred over JET provider (if both are available). If none provider is installed, empty string is returned. Declaration public static string MsAccessProvider { get; } Property Value Type Description System.String Methods CreateConnectionString(String, ProviderType) Creates a connection string to the database databasePath with provider type provider . Declaration public static string CreateConnectionString(string databasePath, ProviderType provider) Parameters Type Name Description System.String databasePath Path to the database. ProviderType provider Provider type, which will be usedProvider string is used for the current, installed provider, so there is no need to care about provider version. Returns Type Description System.String Returns connection string to specified database. For example Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\\data\\database.accdb; . CreateEmptyDatabase(String, ProviderType) Creates an empty Microsoft Access database at location path . Database type ( .accdb , .mdb ) is specified with provider . Declaration public static void CreateEmptyDatabase(string path, ProviderType provider) Parameters Type Name Description System.String path Path, where the database will be created. The path must be full, must contain also file name. ProviderType provider Microsoft Access database type. Remarks If the file path already exists, it will be overwritten. Based on the value of provider is created specified database type ( .accdb , or older .mdb ). But nothing is done with the file extension, so the file name will be created as path . So it is possible to create a file with .mdb extension, which actually will be database type .accdb . So the caller must provide correct file name. GetProviderString(ProviderType) For specified provider type provider returns string of the provider for use in connection string. If there is no provider available, empty string is returned. Declaration public static string GetProviderString(ProviderType provider) Parameters Type Name Description ProviderType provider Provider type. Returns Type Description System.String Method just returns the values of other properties: Ace MsAccessAceProvider Jet MsAccessJetProvider GetProviderType(IDbConnection) Returns Microsoft Access provider type used in connection connection . Declaration public static ProviderType GetProviderType(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Database connection. Returns Type Description ProviderType Provider type. GetProviderType(String) Returns Microsoft Access provider type used in connection string connectionString . Declaration public static ProviderType GetProviderType(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description ProviderType Provider type. HasProvider(ProviderType) Returns is specified Microsoft Access provider provider is available. Declaration public static bool HasProvider(ProviderType provider) Parameters Type Name Description ProviderType provider Checked provider type. Returns Type Description System.Boolean true if provider is available, otherwise false . IsExclusiveMsAccessConnection(IDbConnection) Checks if connection connection is an exclusive connection to the database. Declaration public static bool IsExclusiveMsAccessConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection The connection. Returns Type Description System.Boolean true if connection is exclusive, otherwise false . IsExclusiveMsAccessConnection(String) Checks if connection connectionString is an exclusive connection to the database. Declaration public static bool IsExclusiveMsAccessConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection string. Returns Type Description System.Boolean true if connection is exclusive, otherwise false . IsMsAccessAceProvider(String) Checks if ACE provider is used in connectionString . Declaration public static bool IsMsAccessAceProvider(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description System.Boolean true if ACE provider is used, otherwise false . IsMsAccessConnection(IDbConnection) Checks if database connection connection is Microsoft Access. Declaration public static bool IsMsAccessConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Tested connection. Returns Type Description System.Boolean true if connection is to Microsoft Access database, otherwise false . IsMsAccessConnection(String) Checks if database connection connectionString is Microsoft Access. Declaration public static bool IsMsAccessConnection(string connectionString) Parameters Type Name Description System.String connectionString Tested connection string. Returns Type Description System.Boolean true if connection is to Microsoft Access database, otherwise false . IsMsAccessJetProvider(String) Checks if JET provider is used in connectionString . Declaration public static bool IsMsAccessJetProvider(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description System.Boolean true if JET provider is used, otherwise false ."
  },
  "api/Kros.Data.Schema.MsAccess.MsAccessCacheKeyGenerator.html": {
    "href": "api/Kros.Data.Schema.MsAccess.MsAccessCacheKeyGenerator.html",
    "title": "Class MsAccessCacheKeyGenerator | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessCacheKeyGenerator Cache key generator for Microsoft Access used by Kros.Data.Schema.DatabaseSchemaCache . Inheritance System.Object MsAccessCacheKeyGenerator Implements Kros.Data.Schema.ISchemaCacheKeyGenerator < System.Data.OleDb.OleDbConnection > Kros.Data.Schema.ISchemaCacheKeyGenerator Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessCacheKeyGenerator : ISchemaCacheKeyGenerator<OleDbConnection>, ISchemaCacheKeyGenerator Methods GenerateKey(OleDbConnection) Generates a cache key for connection . The generated key is a string \" MsAccess:database path \". Declaration public string GenerateKey(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection. Returns Type Description System.String String. Exceptions Type Condition System.ArgumentNullException Value of connection is null . Explicit Interface Implementations ISchemaCacheKeyGenerator.GenerateKey(Object) Declaration string ISchemaCacheKeyGenerator.GenerateKey(object connection) Parameters Type Name Description System.Object connection Returns Type Description System.String Implements Kros.Data.Schema.ISchemaCacheKeyGenerator<T> Kros.Data.Schema.ISchemaCacheKeyGenerator"
  },
  "api/Kros.Data.Schema.MsAccess.MsAccessParseDefaultValueEventArgs.html": {
    "href": "api/Kros.Data.Schema.MsAccess.MsAccessParseDefaultValueEventArgs.html",
    "title": "Class MsAccessParseDefaultValueEventArgs | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessParseDefaultValueEventArgs Arguments for the event ParseDefaultValue . Inheritance System.Object System.EventArgs MsAccessParseDefaultValueEventArgs Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessParseDefaultValueEventArgs : EventArgs Constructors MsAccessParseDefaultValueEventArgs(String, String, OleDbType, String, Object) Creates and initializes instance of arguments. Declaration public MsAccessParseDefaultValueEventArgs(string tableName, string columnName, OleDbType oleDbType, string defaultValueString, object defaultValue) Parameters Type Name Description System.String tableName System.String columnName System.Data.OleDb.OleDbType oleDbType System.String defaultValueString System.Object defaultValue Value, which was obtained by default parser. Properties ColumnName Column name which default value is being parsed. Declaration public string ColumnName { get; } Property Value Type Description System.String DefaultValue Value, which was obtained by default parser. Set this value, when using custom logic for parsing default value in event handler. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object DefaultValueString Default value of a column. It is the string which is being parsed. Declaration public string DefaultValueString { get; } Property Value Type Description System.String Handled Flag indicating if default value was parsed using custom logic in event handler. Set this to true if you set your own default value in DefaultValue . Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean OleDbType Data type of column which default value is being parsed. Declaration public OleDbType OleDbType { get; } Property Value Type Description System.Data.OleDb.OleDbType TableName Table which schema is being loaded. Declaration public string TableName { get; } Property Value Type Description System.String"
  },
  "api/Kros.Data.MsAccess.MsAccessErrorCode.html": {
    "href": "api/Kros.Data.MsAccess.MsAccessErrorCode.html",
    "title": "Enum MsAccessErrorCode | Kros.Utils.MsAccess",
    "keywords": "Enum MsAccessErrorCode Error codes for Microsoft Access database provider. Namespace : Kros.Data.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public enum MsAccessErrorCode Remarks The error code is in the exception System.Data.OleDb.OleDbException in the System.Data.OleDb.OleDbError.SQLState property. The list of all error codes is at https://msdn.microsoft.com/en-us/library/bb221208(v=office.12).aspx . Fields Name Description CannotFindTableOrQuery The Microsoft Jet database engine cannot find the input table or query 'name'. Make sure it exists and that its name is spelled correctly. CannotOpenDatabaseFileIsInvalid Cannot open database 'name'. It may not be a database that your application recognizes, or the file may be corrupt. CannotOpenDatabaseIsLocked The Microsoft Jet database engine cannot open the file 'name'. It is already opened exclusively by another user, or you need permission to view its data. CouldNotReadRecordIsLocked Could not read the record; currently locked by another user. CouldNotUpdateCurrentlyLocked Could not update; currently locked. CouldNotUseFileAlreadyInUse Could not use <name>; file already in use. DatabaseAlreadyOpenedExclusively You attempted to open a database that is already opened exclusively by user 'userName' on machine 'machineName'. Try again when the database is available. KeyDuplicity The changes you requested to the table were not successful because they would create duplicate values in the index, primary key, or relationship. Change the data in the field or fields that contain duplicate data, remove the index, or redefine the index to permit duplicate entries and try again. RelationshipViolation You cannot add or change a record because a related record is required in table 'name'. Unknown Unknown error."
  },
  "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ColumnsSchemaNames.html": {
    "href": "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.ColumnsSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.ColumnsSchemaNames | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessSchemaLoader.ColumnsSchemaNames Inheritance System.Object MsAccessSchemaLoader.ColumnsSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class ColumnsSchemaNames Fields CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String CollationName Declaration public const string CollationName = \"COLLATION_NAME\" Field Value Type Description System.String CollationSchema Declaration public const string CollationSchema = \"COLLATION_SCHEMA\" Field Value Type Description System.String ColumnDefault Declaration public const string ColumnDefault = \"COLUMN_DEFAULT\" Field Value Type Description System.String ColumnFlags Declaration public const string ColumnFlags = \"COLUMN_FLAGS\" Field Value Type Description System.String ColumnGuid Declaration public const string ColumnGuid = \"COLUMN_GUID\" Field Value Type Description System.String ColumnHasdefault Declaration public const string ColumnHasdefault = \"COLUMN_HASDEFAULT\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String ColumnPropid Declaration public const string ColumnPropid = \"COLUMN_PROPID\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String DomainCatalog Declaration public const string DomainCatalog = \"DOMAIN_CATALOG\" Field Value Type Description System.String DomainName Declaration public const string DomainName = \"DOMAIN_NAME\" Field Value Type Description System.String DomainSchema Declaration public const string DomainSchema = \"DOMAIN_SCHEMA\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSet_catalog Declaration public const string CharacterSet_catalog = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSet_name Declaration public const string CharacterSet_name = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSet_schema Declaration public const string CharacterSet_schema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IsNullable Declaration public const string IsNullable = \"IS_NULLABLE\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TypeGuid Declaration public const string TypeGuid = \"TYPE_GUID\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TableTypes.html": {
    "href": "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TableTypes.html",
    "title": "Class MsAccessSchemaLoader.TableTypes | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessSchemaLoader.TableTypes Inheritance System.Object MsAccessSchemaLoader.TableTypes Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class TableTypes Fields AccessTable Declaration public const string AccessTable = \"ACCESS TABLE\" Field Value Type Description System.String SystemTable Declaration public const string SystemTable = \"SYSTEM TABLE\" Field Value Type Description System.String Table Declaration public const string Table = \"TABLE\" Field Value Type Description System.String"
  },
  "api/Kros.UnitTests.html": {
    "href": "api/Kros.UnitTests.html",
    "title": "Namespace Kros.UnitTests | Kros.Utils.MsAccess",
    "keywords": "Namespace Kros.UnitTests Classes MsAccessTestHelper Helper class for unit tests, if there is a need for real database in tests. It creates temporary empty database for testing. This database is automatically deleted after finishing the work."
  },
  "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.SchemaNames.html": {
    "href": "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.SchemaNames.html",
    "title": "Class MsAccessSchemaLoader.SchemaNames | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessSchemaLoader.SchemaNames Inheritance System.Object MsAccessSchemaLoader.SchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class SchemaNames Fields Columns Declaration public const string Columns = \"Columns\" Field Value Type Description System.String DataSourceInformation Declaration public const string DataSourceInformation = \"DataSourceInformation\" Field Value Type Description System.String DataTypes Declaration public const string DataTypes = \"DataTypes\" Field Value Type Description System.String Indexes Declaration public const string Indexes = \"Indexes\" Field Value Type Description System.String MetaDataCollections Declaration public const string MetaDataCollections = \"MetaDataCollections\" Field Value Type Description System.String Procedures Declaration public const string Procedures = \"Procedures\" Field Value Type Description System.String ReservedWords Declaration public const string ReservedWords = \"ReservedWords\" Field Value Type Description System.String Restrictions Declaration public const string Restrictions = \"Restrictions\" Field Value Type Description System.String Tables Declaration public const string Tables = \"Tables\" Field Value Type Description System.String Views Declaration public const string Views = \"Views\" Field Value Type Description System.String"
  },
  "api/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsert.html": {
    "href": "api/Kros.Data.BulkActions.MsAccess.MsAccessBulkInsert.html",
    "title": "Class MsAccessBulkInsert | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessBulkInsert The calss for fast bulk insert big amount of data into Microsoft Access database. Inheritance System.Object MsAccessBulkInsert Implements Kros.Data.BulkActions.IBulkInsert Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkInsert : IBulkInsert, IDisposable Remarks In the background, it creates a text CSV file with data which are inserted. Constructors MsAccessBulkInsert(OleDbConnection) Creates a new instance with database connection connection and default settings for CSV file. Declaration public MsAccessBulkInsert(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. Exceptions Type Condition System.ArgumentNullException Value of connection is null . MsAccessBulkInsert(OleDbConnection, OleDbTransaction) Creates a new instance with database connection connection , transaction externalTransaction and default settings for CSV file. Declaration public MsAccessBulkInsert(OleDbConnection connection, OleDbTransaction externalTransaction) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. If there already is running transaction in this connection, it must be specified in externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Transaction in which the bulk insert will be performed. Exceptions Type Condition System.ArgumentNullException Value of connection is null . MsAccessBulkInsert(OleDbConnection, OleDbTransaction, Int32) Creates a new instance with database connection connection , transaction externalTransaction and CSV file code page csvFileCodePage . Declaration public MsAccessBulkInsert(OleDbConnection connection, OleDbTransaction externalTransaction, int csvFileCodePage) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. If there already is running transaction in this connection, it must be specified in externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Transaction in which the bulk insert will be performed. System.Int32 csvFileCodePage Code page for generated CSV file. Exceptions Type Condition System.ArgumentNullException Value of connection is null . MsAccessBulkInsert(OleDbConnection, OleDbTransaction, Int32, Char) Creates a new instance with database connection connection , transaction externalTransaction and CSV file settings csvFileCodePage and valueDelimiter . Declaration public MsAccessBulkInsert(OleDbConnection connection, OleDbTransaction externalTransaction, int csvFileCodePage, char valueDelimiter) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. If there already is running transaction in this connection, it must be specified in externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Transaction in which the bulk insert will be performed. System.Int32 csvFileCodePage Code page for generated CSV file. System.Char valueDelimiter Value delimiter for generated CSV file. Exceptions Type Condition System.ArgumentNullException Value of connection is null . MsAccessBulkInsert(String) Creates a new instance with database connection specifiend in connectionString and default settings for CSV file. Declaration public MsAccessBulkInsert(string connectionString) Parameters Type Name Description System.String connectionString Connection string for the database connection where the data will be inserted. Fields AnsiCodePage ANSI code page. Declaration public const int AnsiCodePage = 2147483647 Field Value Type Description System.Int32 DefaultCodePage Default code page: Utf8CodePage . Declaration public const int DefaultCodePage = 65001 Field Value Type Description System.Int32 DefaultValueDelimiter Default value separator for CSV file: comma ( , ). Declaration public const char DefaultValueDelimiter = ',' Field Value Type Description System.Char OemCodePage OEM code page. Declaration public const int OemCodePage = 2147483646 Field Value Type Description System.Int32 Utf8CodePage UTF-8 code page: 65001. Declaration public const int Utf8CodePage = 65001 Field Value Type Description System.Int32 WindowsCentralEuropeCodePage Windows Central Europe code page: 1250 . Declaration public const int WindowsCentralEuropeCodePage = 1250 Field Value Type Description System.Int32 Properties BatchSize This setting is not used. Declaration public int BatchSize { get; set; } Property Value Type Description System.Int32 BulkInsertTimeout This setting is not used. Declaration public int BulkInsertTimeout { get; set; } Property Value Type Description System.Int32 CodePage Code page used for CSV file and bulk insert. Default value is 65001 Utf8CodePage . Declaration public int CodePage { get; } Property Value Type Description System.Int32 Number of code page. ColumnMappings Declaration public BulkInsertColumnMappingCollection ColumnMappings { get; } Property Value Type Description Kros.Data.BulkActions.BulkInsertColumnMappingCollection DestinationTableName Destination table name in database. Declaration public string DestinationTableName { get; set; } Property Value Type Description System.String ExternalTransaction External transaction, in which bulk insert is executed. Declaration public OleDbTransaction ExternalTransaction { get; } Property Value Type Description System.Data.OleDb.OleDbTransaction ValueDelimiter Value separator in generated CSV file. Declaration public char ValueDelimiter { get; } Property Value Type Description System.Char Methods Dispose() Declaration public void Dispose() Insert(IBulkActionDataReader) Declaration public void Insert(IBulkActionDataReader reader) Parameters Type Name Description Kros.Data.BulkActions.IBulkActionDataReader reader Insert(DataTable) Declaration public void Insert(DataTable table) Parameters Type Name Description System.Data.DataTable table Insert(IDataReader) Declaration public void Insert(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader InsertAsync(IBulkActionDataReader) Declaration public Task InsertAsync(IBulkActionDataReader reader) Parameters Type Name Description Kros.Data.BulkActions.IBulkActionDataReader reader Returns Type Description System.Threading.Tasks.Task InsertAsync(DataTable) Declaration public Task InsertAsync(DataTable table) Parameters Type Name Description System.Data.DataTable table Returns Type Description System.Threading.Tasks.Task InsertAsync(IDataReader) Declaration public Task InsertAsync(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Returns Type Description System.Threading.Tasks.Task Implements Kros.Data.BulkActions.IBulkInsert"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Kros.Utils.MsAccess | Kros.Utils.MsAccess",
    "keywords": "Welcome to Kros.Utils.MsAccess Kros.Utils is universal library of various tools to simplify the work of the programmer. View in GitHub | Download Latest"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Welcome to Kros.Libs | Kros.Utils.MsAccess",
    "keywords": "Welcome to Kros.Libs This is Kros.Utils, Kros.Utils.MsAccess, Kros.KORM and Kros.KORM.MsAccess libraries documentation. Kros.Utils Universal library of various tools to simplify the work of the programmer. It is platform-independent (also applicable to desktop applications and server services) and is independent of third-party libraries. Kros.Utils.MsAccess Kros.Utils library extension for MS Access support. Only applicable in the full .NET framework. Kros.KORM Simple and fast micro-ORM framework for .NET. Kros.KORM.MsAccess Kros.KORM library extension for MS Access support. Only applicable in the full .NET framework."
  },
  "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TablesSchemaNames.html": {
    "href": "api/Kros.Data.Schema.MsAccess.MsAccessSchemaLoader.TablesSchemaNames.html",
    "title": "Class MsAccessSchemaLoader.TablesSchemaNames | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessSchemaLoader.TablesSchemaNames Inheritance System.Object MsAccessSchemaLoader.TablesSchemaNames Namespace : Kros.Data.Schema.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class TablesSchemaNames Fields DateCreated Declaration public const string DateCreated = \"DATE_CREATED\" Field Value Type Description System.String DateModified Declaration public const string DateModified = \"DATE_MODIFIED\" Field Value Type Description System.String Description Declaration public const string Description = \"DESCRIPTION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableGuid Declaration public const string TableGuid = \"TABLE_GUID\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TablePropid Declaration public const string TablePropid = \"TABLE_PROPID\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TableType Declaration public const string TableType = \"TABLE_TYPE\" Field Value Type Description System.String"
  },
  "api/Kros.Data.BulkActions.MsAccess.MsAccessBulkUpdate.html": {
    "href": "api/Kros.Data.BulkActions.MsAccess.MsAccessBulkUpdate.html",
    "title": "Class MsAccessBulkUpdate | Kros.Utils.MsAccess",
    "keywords": "Class MsAccessBulkUpdate Class for fast bulk data update for Microsoft Access. Inheritance System.Object Kros.Data.BulkActions.BulkUpdateBase MsAccessBulkUpdate Implements Kros.Data.BulkActions.IBulkUpdate Inherited Members Kros.Data.BulkActions.BulkUpdateBase.PrefixTempTable Kros.Data.BulkActions.BulkUpdateBase._connection Kros.Data.BulkActions.BulkUpdateBase._disposeOfConnection Kros.Data.BulkActions.BulkUpdateBase.Update(Kros.Data.BulkActions.IBulkActionDataReader) Kros.Data.BulkActions.BulkUpdateBase.UpdateAsync(Kros.Data.BulkActions.IBulkActionDataReader) Kros.Data.BulkActions.BulkUpdateBase.Update(System.Data.IDataReader) Kros.Data.BulkActions.BulkUpdateBase.UpdateAsync(System.Data.IDataReader) Kros.Data.BulkActions.BulkUpdateBase.Update(System.Data.DataTable) Kros.Data.BulkActions.BulkUpdateBase.UpdateAsync(System.Data.DataTable) Kros.Data.BulkActions.BulkUpdateBase.DoneTempTableAsync(System.String, System.Boolean) Kros.Data.BulkActions.BulkUpdateBase.GetColumnNamesForTempTable(System.Data.IDataReader) Kros.Data.BulkActions.BulkUpdateBase.GetUpdateColumnNames(System.Data.IDataReader, System.String) Kros.Data.BulkActions.BulkUpdateBase.Dispose() Kros.Data.BulkActions.BulkUpdateBase.ExternalTransaction Kros.Data.BulkActions.BulkUpdateBase.DestinationTableName Kros.Data.BulkActions.BulkUpdateBase.TempTableAction Kros.Data.BulkActions.BulkUpdateBase.PrimaryKeyColumn Namespace : Kros.Data.BulkActions.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public class MsAccessBulkUpdate : BulkUpdateBase, IBulkUpdate, IDisposable Remarks The bulk update uses a temporary database. Examples private class BulkUpdateItem { public int Id { get; set; } public string Name { get; set; } } public void UpdateManyItems() { IEnumerable<BulkUpdateItem> data = GetItems(); using (var reader = new EnumerableDataReader<BulkUpdateItem>(data, new string[] { \"Id\", \"Name\" })) { using (var bulkUpdate = new MsAccessBulkUpdate(\"connection string\")) { bulkUpdate.Update(reader); } } } Constructors MsAccessBulkUpdate(OleDbConnection) Creates new instance of MsAccessBulkUpdate for database connection . Declaration public MsAccessBulkUpdate(OleDbConnection connection) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. MsAccessBulkUpdate(OleDbConnection, OleDbTransaction) Creates new instance of MsAccessBulkUpdate for database connection and with transaction externalTransaction . Declaration public MsAccessBulkUpdate(OleDbConnection connection, OleDbTransaction externalTransaction) Parameters Type Name Description System.Data.OleDb.OleDbConnection connection Database connection where the data will be inserted. The connection mus be opened. If there already is running transaction in this connection, it must be specified in externalTransaction . System.Data.OleDb.OleDbTransaction externalTransaction Transaction in which the bulk insert will be performed. MsAccessBulkUpdate(String) Creates new instance of MsAccessBulkUpdate for database connectionString . Declaration public MsAccessBulkUpdate(string connectionString) Parameters Type Name Description System.String connectionString Connection string to the database where the data will be inserted. Methods CreateBulkInsert() Declaration protected override IBulkInsert CreateBulkInsert() Returns Type Description Kros.Data.BulkActions.IBulkInsert Overrides Kros.Data.BulkActions.BulkUpdateBase.CreateBulkInsert() CreateCommandForPrimaryKey() Declaration protected override IDbCommand CreateCommandForPrimaryKey() Returns Type Description System.Data.IDbCommand Overrides Kros.Data.BulkActions.BulkUpdateBase.CreateCommandForPrimaryKey() CreateTempTable(IDataReader, String) Declaration protected override void CreateTempTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader System.String tempTableName Overrides Kros.Data.BulkActions.BulkUpdateBase.CreateTempTable(System.Data.IDataReader, System.String) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Kros.Data.BulkActions.BulkUpdateBase.Dispose(System.Boolean) GetTempTableName() Declaration protected override string GetTempTableName() Returns Type Description System.String Overrides Kros.Data.BulkActions.BulkUpdateBase.GetTempTableName() GetTempTableNameForBulkInsert(String) Declaration protected override string GetTempTableNameForBulkInsert(string name) Parameters Type Name Description System.String name Returns Type Description System.String Overrides Kros.Data.BulkActions.BulkUpdateBase.GetTempTableNameForBulkInsert(System.String) InvokeAction(String) Declaration protected override void InvokeAction(string tempTableName) Parameters Type Name Description System.String tempTableName Overrides Kros.Data.BulkActions.BulkUpdateBase.InvokeAction(System.String) UpdateDestinationTableAsync(IDataReader, String, Boolean) Declaration protected override Task UpdateDestinationTableAsync(IDataReader reader, string tempTableName, bool useAsync) Parameters Type Name Description System.Data.IDataReader reader System.String tempTableName System.Boolean useAsync Returns Type Description System.Threading.Tasks.Task Overrides Kros.Data.BulkActions.BulkUpdateBase.UpdateDestinationTableAsync(System.Data.IDataReader, System.String, System.Boolean) Implements Kros.Data.BulkActions.IBulkUpdate"
  },
  "api/Kros.Utils.MsAccess.LibraryInitializer.html": {
    "href": "api/Kros.Utils.MsAccess.LibraryInitializer.html",
    "title": "Class LibraryInitializer | Kros.Utils.MsAccess",
    "keywords": "Class LibraryInitializer Initialization of the library. Inheritance System.Object LibraryInitializer Namespace : Kros.Utils.MsAccess Assembly : Kros.Utils.MsAccess.dll Syntax public static class LibraryInitializer Methods InitLibrary() Initializes the library. Method should be called once at a start of a program. Declaration public static void InitLibrary() Remarks The initialization will do:"
  }
}