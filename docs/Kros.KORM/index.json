{
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Kros.KORM | Kros.KORM",
    "keywords": "Welcome to Kros.KORM This is Kros.KORM library documentation. Simple and fast micro-ORM framework for .NET. View in GitHub | Download Latest"
  },
  "api/Kros.KORM.Query.Expressions.TableExpression.html": {
    "href": "api/Kros.KORM.Query.Expressions.TableExpression.html",
    "title": "Class TableExpression | Kros.KORM",
    "keywords": "Class TableExpression Expression, which represent FROM statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression TableExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class TableExpression : QueryExpression Constructors TableExpression(String) Initializes a new instance of the TableExpression class. Declaration public TableExpression(string table) Parameters Type Name Description System.String table The table (or join). Fields FromStatement From statement Declaration public const string FromStatement = \"FROM\" Field Value Type Description System.String Properties TablePart Gets the table part. Declaration public string TablePart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM.Exceptions.MissingPrimaryKeyException.html": {
    "href": "api/Kros.KORM.Exceptions.MissingPrimaryKeyException.html",
    "title": "Class MissingPrimaryKeyException | Kros.KORM",
    "keywords": "Class MissingPrimaryKeyException Exception class for missing primary key. Inheritance System.Object System.Exception MissingPrimaryKeyException Namespace : Kros.KORM.Exceptions Assembly : Kros.KORM.dll Syntax public class MissingPrimaryKeyException : Exception, ISerializable, _Exception Constructors MissingPrimaryKeyException(String, String) Initializes a new instance of the MissingPrimaryKeyException class. Declaration public MissingPrimaryKeyException(string message, string tableName) Parameters Type Name Description System.String message Exception message. System.String tableName Table name which doesn't have primary key. Properties TableName Table name which doesn't have primary key. Declaration public string TableName { get; } Property Value Type Description System.String"
  },
  "api/Kros.KORM.Exceptions.AlreadyInCollectionException.html": {
    "href": "api/Kros.KORM.Exceptions.AlreadyInCollectionException.html",
    "title": "Class AlreadyInCollectionException | Kros.KORM",
    "keywords": "Class AlreadyInCollectionException Exception class for item already exists in the collection. Inheritance System.Object System.Exception AlreadyInCollectionException Namespace : Kros.KORM.Exceptions Assembly : Kros.KORM.dll Syntax public class AlreadyInCollectionException : Exception, ISerializable, _Exception Constructors AlreadyInCollectionException() Initializes a new instance of the AlreadyInCollectionException class. Declaration public AlreadyInCollectionException() AlreadyInCollectionException(String) Initializes a new instance of the AlreadyInCollectionException class. Declaration public AlreadyInCollectionException(string message) Parameters Type Name Description System.String message Exception message."
  },
  "api/Kros.KORM.Query.Sql.SqlServer2012SqlGenerator.html": {
    "href": "api/Kros.KORM.Query.Sql.SqlServer2012SqlGenerator.html",
    "title": "Class SqlServer2012SqlGenerator | Kros.KORM",
    "keywords": "Class SqlServer2012SqlGenerator SQL query generator for SQL Server 2012 and newer. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor DefaultQuerySqlGenerator SqlServer2012SqlGenerator Implements ISqlExpressionVisitor Inherited Members DefaultQuerySqlGenerator.DatabaseMapper DefaultQuerySqlGenerator.GenerateSql(Expression) DefaultQuerySqlGenerator.Orders DefaultQuerySqlGenerator.SqlBuilder DefaultQuerySqlGenerator.Skip DefaultQuerySqlGenerator.Top DefaultQuerySqlGenerator.TopPosition DefaultQuerySqlGenerator.ColumnsPosition DefaultQuerySqlGenerator.AddOrderBy() DefaultQuerySqlGenerator.CreateOrderByString() DefaultQuerySqlGenerator.BindAnyCondition(String) DefaultQuerySqlGenerator.VisitSql(SqlExpression) DefaultQuerySqlGenerator.VisitSelect(SelectExpression) DefaultQuerySqlGenerator.VisitColumns(ColumnsExpression) DefaultQuerySqlGenerator.VisitTable(TableExpression) DefaultQuerySqlGenerator.VisitWhere(WhereExpression) DefaultQuerySqlGenerator.VisitGroupBy(GroupByExpression) DefaultQuerySqlGenerator.VisitOrderBy(OrderByExpression) DefaultQuerySqlGenerator.SelectExpression DefaultQuerySqlGenerator.LinqStringBuilder DefaultQuerySqlGenerator.LinqParameters DefaultQuerySqlGenerator.Visit(Expression) DefaultQuerySqlGenerator.VisitMethodCall(MethodCallExpression) DefaultQuerySqlGenerator.VisitVbOperatorsMethods(MethodCallExpression, ExpressionType) DefaultQuerySqlGenerator.VisitCompare(MethodCallExpression, ExpressionType) DefaultQuerySqlGenerator.VisitLinqExpression(MethodCallExpression) DefaultQuerySqlGenerator.VisitAny(MethodCallExpression) DefaultQuerySqlGenerator.VisitSkip(MethodCallExpression) DefaultQuerySqlGenerator.VisitTake(MethodCallExpression) DefaultQuerySqlGenerator.VisitAggregate(MethodCallExpression, String) DefaultQuerySqlGenerator.VisitCount(MethodCallExpression) DefaultQuerySqlGenerator.VisitWhere(MethodCallExpression) DefaultQuerySqlGenerator.VisitFirst(MethodCallExpression) DefaultQuerySqlGenerator.VisitUnary(UnaryExpression) DefaultQuerySqlGenerator.VisitBinary(BinaryExpression) DefaultQuerySqlGenerator.GetOperator(BinaryExpression) DefaultQuerySqlGenerator.VisitConstant(ConstantExpression) DefaultQuerySqlGenerator.VisitMember(MemberExpression) DefaultQuerySqlGenerator.VisitStringMethods(MethodCallExpression) DefaultQuerySqlGenerator.BindTrim(MethodCallExpression) DefaultQuerySqlGenerator.BindSubstring(MethodCallExpression) DefaultQuerySqlGenerator.BindReplace(MethodCallExpression) DefaultQuerySqlGenerator.BindToLower(MethodCallExpression) DefaultQuerySqlGenerator.BindToUpper(MethodCallExpression) DefaultQuerySqlGenerator.BindIsNullOrEmpty(MethodCallExpression) DefaultQuerySqlGenerator.BindContains(MethodCallExpression) DefaultQuerySqlGenerator.BindEndWith(MethodCallExpression) DefaultQuerySqlGenerator.BindStartWith(MethodCallExpression) Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public class SqlServer2012SqlGenerator : DefaultQuerySqlGenerator, ISqlExpressionVisitor Remarks Offset ( Skip ) and limit ( Top ) are translated to SQL server 2012 syntax: OFFSET n ROWS FETCH NEXT m ROWS ONLY . Constructors SqlServer2012SqlGenerator(IDatabaseMapper) Creates an instance of the generator with specified database mapper databaseMapper . Declaration public SqlServer2012SqlGenerator(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper Database mapper Methods AddLimitAndOffset() Declaration protected override void AddLimitAndOffset() Overrides DefaultQuerySqlGenerator.AddLimitAndOffset() CreateQueryReader() Returns null . Declaration protected override IDataReaderEnvelope CreateQueryReader() Returns Type Description IDataReaderEnvelope Returns null . Overrides DefaultQuerySqlGenerator.CreateQueryReader() Implements ISqlExpressionVisitor"
  },
  "api/Kros.KORM.Query.SqlServerQueryProviderFactory.html": {
    "href": "api/Kros.KORM.Query.SqlServerQueryProviderFactory.html",
    "title": "Class SqlServerQueryProviderFactory | Kros.KORM",
    "keywords": "Class SqlServerQueryProviderFactory Factory which create sql server provider. Inheritance System.Object SqlServerQueryProviderFactory Implements IQueryProviderFactory Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class SqlServerQueryProviderFactory : IQueryProviderFactory Methods Create(ConnectionStringSettings, IModelBuilder, IDatabaseMapper) Creates the SqlServer query provider. Declaration public IQueryProvider Create(ConnectionStringSettings connectionString, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of SqlServerQueryProvider . Create(DbConnection, IModelBuilder, IDatabaseMapper) Creates the SqlServer query provider. Declaration public IQueryProvider Create(DbConnection connection, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of SqlServerQueryProvider . Implements IQueryProviderFactory"
  },
  "api/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.Parameters.html": {
    "href": "api/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.Parameters.html",
    "title": "Class DefaultQuerySqlGenerator.Parameters | Kros.KORM",
    "keywords": "Class DefaultQuerySqlGenerator.Parameters Class which help with Linq query parameters. Inheritance System.Object DefaultQuerySqlGenerator.Parameters Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax protected class Parameters Methods AddParameter(Object) Adds the parameter. Declaration public void AddParameter(object param) Parameters Type Name Description System.Object param The parameter. Clear() Clears this instance. Declaration public void Clear() GetNextParamName() Gets the name of the next parameter. Declaration public string GetNextParamName() Returns Type Description System.String GetParams() Gets the parameters. Declaration public object[] GetParams() Returns Type Description System.Object []"
  },
  "api/Kros.KORM.Query.Sql.SqlServer2008SqlGenerator.html": {
    "href": "api/Kros.KORM.Query.Sql.SqlServer2008SqlGenerator.html",
    "title": "Class SqlServer2008SqlGenerator | Kros.KORM",
    "keywords": "Class SqlServer2008SqlGenerator SQL query generator for SQL Server 2008 and newer. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor DefaultQuerySqlGenerator SqlServer2008SqlGenerator Implements ISqlExpressionVisitor Inherited Members DefaultQuerySqlGenerator.DatabaseMapper DefaultQuerySqlGenerator.GenerateSql(Expression) DefaultQuerySqlGenerator.Orders DefaultQuerySqlGenerator.SqlBuilder DefaultQuerySqlGenerator.Skip DefaultQuerySqlGenerator.Top DefaultQuerySqlGenerator.TopPosition DefaultQuerySqlGenerator.ColumnsPosition DefaultQuerySqlGenerator.CreateOrderByString() DefaultQuerySqlGenerator.BindAnyCondition(String) DefaultQuerySqlGenerator.VisitSql(SqlExpression) DefaultQuerySqlGenerator.VisitSelect(SelectExpression) DefaultQuerySqlGenerator.VisitColumns(ColumnsExpression) DefaultQuerySqlGenerator.VisitTable(TableExpression) DefaultQuerySqlGenerator.VisitWhere(WhereExpression) DefaultQuerySqlGenerator.VisitGroupBy(GroupByExpression) DefaultQuerySqlGenerator.VisitOrderBy(OrderByExpression) DefaultQuerySqlGenerator.SelectExpression DefaultQuerySqlGenerator.LinqStringBuilder DefaultQuerySqlGenerator.LinqParameters DefaultQuerySqlGenerator.Visit(Expression) DefaultQuerySqlGenerator.VisitMethodCall(MethodCallExpression) DefaultQuerySqlGenerator.VisitVbOperatorsMethods(MethodCallExpression, ExpressionType) DefaultQuerySqlGenerator.VisitCompare(MethodCallExpression, ExpressionType) DefaultQuerySqlGenerator.VisitLinqExpression(MethodCallExpression) DefaultQuerySqlGenerator.VisitAny(MethodCallExpression) DefaultQuerySqlGenerator.VisitSkip(MethodCallExpression) DefaultQuerySqlGenerator.VisitTake(MethodCallExpression) DefaultQuerySqlGenerator.VisitAggregate(MethodCallExpression, String) DefaultQuerySqlGenerator.VisitCount(MethodCallExpression) DefaultQuerySqlGenerator.VisitWhere(MethodCallExpression) DefaultQuerySqlGenerator.VisitFirst(MethodCallExpression) DefaultQuerySqlGenerator.VisitUnary(UnaryExpression) DefaultQuerySqlGenerator.VisitBinary(BinaryExpression) DefaultQuerySqlGenerator.GetOperator(BinaryExpression) DefaultQuerySqlGenerator.VisitConstant(ConstantExpression) DefaultQuerySqlGenerator.VisitMember(MemberExpression) DefaultQuerySqlGenerator.VisitStringMethods(MethodCallExpression) DefaultQuerySqlGenerator.BindTrim(MethodCallExpression) DefaultQuerySqlGenerator.BindSubstring(MethodCallExpression) DefaultQuerySqlGenerator.BindReplace(MethodCallExpression) DefaultQuerySqlGenerator.BindToLower(MethodCallExpression) DefaultQuerySqlGenerator.BindToUpper(MethodCallExpression) DefaultQuerySqlGenerator.BindIsNullOrEmpty(MethodCallExpression) DefaultQuerySqlGenerator.BindContains(MethodCallExpression) DefaultQuerySqlGenerator.BindEndWith(MethodCallExpression) DefaultQuerySqlGenerator.BindStartWith(MethodCallExpression) Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public class SqlServer2008SqlGenerator : DefaultQuerySqlGenerator, ISqlExpressionVisitor Remarks Offset ( Skip ) and limit ( Top ) are translated to CTE (Common Table Expression). Constructors SqlServer2008SqlGenerator(IDatabaseMapper) Creates an instance of the generator with specified database mapper databaseMapper . Declaration public SqlServer2008SqlGenerator(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper Database mapper Methods AddLimitAndOffset() Declaration protected override void AddLimitAndOffset() Overrides DefaultQuerySqlGenerator.AddLimitAndOffset() AddOrderBy() Declaration protected override void AddOrderBy() Overrides DefaultQuerySqlGenerator.AddOrderBy() CreateQueryReader() Returns null . Declaration protected override IDataReaderEnvelope CreateQueryReader() Returns Type Description IDataReaderEnvelope Returns null . Overrides DefaultQuerySqlGenerator.CreateQueryReader() Implements ISqlExpressionVisitor"
  },
  "api/Kros.KORM.Query.Sql.RawSqlString.html": {
    "href": "api/Kros.KORM.Query.Sql.RawSqlString.html",
    "title": "Struct RawSqlString | Kros.KORM",
    "keywords": "Struct RawSqlString A string representing a raw SQL query. This type enables overload resolution between the regular and interpolated SQL string query. Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public struct RawSqlString Constructors RawSqlString(String) Constructs a RawSqlString from a see System.String Declaration public RawSqlString(string s) Parameters Type Name Description System.String s The string. Properties Format The string format. Declaration public string Format { get; } Property Value Type Description System.String Operators Implicit(FormattableString to RawSqlString) Implicitly converts a System.FormattableString to a RawSqlString Declaration public static implicit operator RawSqlString(FormattableString fs) Parameters Type Name Description System.FormattableString fs The string format. Returns Type Description RawSqlString Implicit(String to RawSqlString) Implicitly converts a System.String to a RawSqlString Declaration public static implicit operator RawSqlString(string s) Parameters Type Name Description System.String s The string. Returns Type Description RawSqlString"
  },
  "api/Kros.KORM.Metadata.Attribute.ConverterAttribute.html": {
    "href": "api/Kros.KORM.Metadata.Attribute.ConverterAttribute.html",
    "title": "Class ConverterAttribute | Kros.KORM",
    "keywords": "Class ConverterAttribute Attribute for getting data converter. Inheritance System.Object System.Attribute ConverterAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class ConverterAttribute : Attribute, _Attribute Constructors ConverterAttribute(Type) Initializes a new instance of the ConverterAttribute class. Declaration public ConverterAttribute(Type converterType) Parameters Type Name Description System.Type converterType Type of the converter. Exceptions Type Condition System.ArgumentNullException The value of converterType is null . Properties Converter Gets the converter for property. Declaration public IConverter Converter { get; } Property Value Type Description IConverter"
  },
  "api/Kros.KORM.Injection.html": {
    "href": "api/Kros.KORM.Injection.html",
    "title": "Namespace Kros.KORM.Injection | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Injection Interfaces IInjectionConfigurator<TModel> Interface, which describe configurator, for configurate model property injection. IInjector Interface, which describe service injector, which know get injected values."
  },
  "api/Kros.KORM.Query.html": {
    "href": "api/Kros.KORM.Query.html",
    "title": "Namespace Kros.KORM.Query | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Query Classes CommandParameter Parameter pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). CommandParameterCollection Zoznam parametrov pre pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). DbSet<T> Represents the collection of all items that can be saved to the database, of a given type. QueryProvider Provider, which know execute query. QueryProviderFactories Represent set of registered Query provider factories. SqlServerQueryProvider Provider, which know execute query for Sql Server. SqlServerQueryProviderFactory Factory which create sql server provider. Interfaces IDbSet<T> An IDbSet represents the collection of all entities in the context, or that can be queried from the database, of a given type. DbSet is a concrete implementation of IDbSet. IFilteredQuery<T> Represent result of filter (where) operation. IGroupedQuery<T> Represents result of grouping operation. IOrderedQuery<T> Represents result of a sorting operation. IProjectionQuery<T> Represent result of projection operation. IQuery<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. IQueryBase<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. IQueryProvider Interface for provider, which know execute query. IQueryProviderFactory Interface, which describe factory for creating provider."
  },
  "api/Kros.KORM.Query.Expressions.html": {
    "href": "api/Kros.KORM.Query.Expressions.html",
    "title": "Namespace Kros.KORM.Query.Expressions | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Query.Expressions Classes ArgsExpression Base class for args expression. ColumnsExpression Expression which represent projection part of sql select. GroupByExpression Expression, which represent GROUP BY statement from sql select query. OrderByExpression Expression, which represent ORDER BY statement from sql select query. QueryExpression Base expression. SelectExpression Expression, which represent SELECT query. SqlExpression Expression, which represent sql query. TableExpression Expression, which represent FROM statement from sql select query. WhereExpression Expression, which represent WHERE statement from sql select query."
  },
  "api/Kros.KORM.Metadata.AutoIncrementMethodType.html": {
    "href": "api/Kros.KORM.Metadata.AutoIncrementMethodType.html",
    "title": "Enum AutoIncrementMethodType | Kros.KORM",
    "keywords": "Enum AutoIncrementMethodType Type of primary key auto increment method. Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public enum AutoIncrementMethodType Fields Name Description Custom KORM generate primary key for entity. None The primary key is not auto incremented."
  },
  "api/Kros.KORM.Migrations.MigrationOptions.html": {
    "href": "api/Kros.KORM.Migrations.MigrationOptions.html",
    "title": "Class MigrationOptions | Kros.KORM",
    "keywords": "Class MigrationOptions Migration options. Inheritance System.Object MigrationOptions Namespace : Kros.KORM.Migrations Assembly : Kros.KORM.dll Syntax public class MigrationOptions Properties Providers List of IMigrationScriptsProvider . Declaration public IEnumerable<IMigrationScriptsProvider> Providers { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IMigrationScriptsProvider > Methods AddAssemblyScriptsProvider(Assembly, String) Register new AssemblyMigrationScriptsProvider . Declaration public void AddAssemblyScriptsProvider(Assembly assembly, string resourceNamespace) Parameters Type Name Description System.Reflection.Assembly assembly Assembly, which contains embedded script resources. System.String resourceNamespace Full namespace, where are placed embedded scripts. AddFileScriptsProvider(String) Register new FileMigrationScriptsProvider . Declaration public void AddFileScriptsProvider(string folderPath) Parameters Type Name Description System.String folderPath Path to folder where migration scripts are stored. AddScriptsProvider(IMigrationScriptsProvider) Register new IMigrationScriptsProvider . Declaration public void AddScriptsProvider(IMigrationScriptsProvider provider) Parameters Type Name Description IMigrationScriptsProvider provider Migration scripts provider."
  },
  "api/Kros.KORM.Metadata.ConventionModelMapper.html": {
    "href": "api/Kros.KORM.Metadata.ConventionModelMapper.html",
    "title": "Class ConventionModelMapper | Kros.KORM",
    "keywords": "Class ConventionModelMapper Model mapper, which know define convention for name mapping. Inheritance System.Object ConventionModelMapper Implements IModelMapper Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class ConventionModelMapper : IModelMapper Constructors ConventionModelMapper() Initializes a new instance of the ConventionModelMapper class. Declaration public ConventionModelMapper() Properties MapColumnName Gets or sets the column name mapping logic. Declaration public Func<ColumnInfo, Type, string> MapColumnName { get; set; } Property Value Type Description System.Func < ColumnInfo , System.Type , System.String > Remarks Params: ColumnInfo - info about column. Type - Type of model. string - return column name. MapPrimaryKey Gets or sets the primary key mapping logic. Declaration public Func<TableInfo, IEnumerable<ColumnInfo>> MapPrimaryKey { get; set; } Property Value Type Description System.Func < TableInfo , System.Collections.Generic.IEnumerable < ColumnInfo >> MapTableName Gets or sets the table name mapping logic. Declaration public Func<TableInfo, Type, string> MapTableName { get; set; } Property Value Type Description System.Func < TableInfo , System.Type , System.String > Methods GetInjector<T>() Get property service injector. Declaration public IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information. Declaration public TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Table info. GetTableInfo<T>() Gets the table information. Declaration public TableInfo GetTableInfo<T>() Returns Type Description TableInfo Table info. Type Parameters Name Description T Type of model. InjectionConfigurator<T>() Get property injection configuration for model T. Declaration public IInjectionConfigurator<T> InjectionConfigurator<T>() Returns Type Description IInjectionConfigurator <T> Type Parameters Name Description T Examples Database.DefaultModelMapper .InjectionConfigurator<Person>() .FillProperty(p => p.CalculationService, () => new CalculationService()) .FillProperty(p => p.Logger, () => ServiceContainer.Instance.Resolve<ILogger>()); SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>>, String) Set column name for specific property. Declaration public void SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>> modelProperty, string columnName) where TModel : class Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TModel, TValue>> modelProperty Expression for defined property to. System.String columnName Database column name. Type Parameters Name Description TModel TValue Examples Database.DefaultModelMapper.SetColumnName<Person, string>(p => p.Name, \"FirstName\"); Implements IModelMapper See Also IModelMapper"
  },
  "api/Kros.KORM.Helper.PropertyName-1.html": {
    "href": "api/Kros.KORM.Helper.PropertyName-1.html",
    "title": "Class PropertyName<P> | Kros.KORM",
    "keywords": "Class PropertyName<P> Helper for getting property name from class. Inheritance System.Object PropertyName<P> Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public static class PropertyName<P> where P : class Type Parameters Name Description P Class type, from want get property name Examples var propName = PropertyName<Person>.GetPropertyName((p) => p.FirstName); Methods GetPropertyName<T>(Expression<Func<P, T>>) Gets the name of the property. Declaration public static string GetPropertyName<T>(Expression<Func<P, T>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <P, T>> expression The expression with property. Returns Type Description System.String Property name. Type Parameters Name Description T Examples var propName = PropertyName<Person>.GetPropertyName((p) => p.FirstName);"
  },
  "api/Kros.KORM.Converter.IConverter.html": {
    "href": "api/Kros.KORM.Converter.IConverter.html",
    "title": "Interface IConverter | Kros.KORM",
    "keywords": "Interface IConverter Interface, which describe converter, which know convert data from db to object and reverse. Namespace : Kros.KORM.Converter Assembly : Kros.KORM.dll Syntax public interface IConverter Methods Convert(Object) Converts the specified value from Db to Clr. Declaration object Convert(object value) Parameters Type Name Description System.Object value The value. Returns Type Description System.Object ConvertBack(Object) Converts the value from Clr to Db. Declaration object ConvertBack(object value) Parameters Type Name Description System.Object value The value. Returns Type Description System.Object Converted value for Db."
  },
  "api/Kros.KORM.Query.IQuery-1.html": {
    "href": "api/Kros.KORM.Query.IQuery-1.html",
    "title": "Interface IQuery<T> | Kros.KORM",
    "keywords": "Interface IQuery<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. Inherited Members IProjectionQuery<T>.Where(RawSqlString, Object[]) IProjectionQuery<T>.Where(FormattableString) IProjectionQuery<T>.FirstOrDefault(RawSqlString, Object[]) IProjectionQuery<T>.FirstOrDefault(FormattableString) IProjectionQuery<T>.Any(RawSqlString, Object[]) IProjectionQuery<T>.Any(FormattableString) IProjectionQuery<T>.OrderBy(String) IProjectionQuery<T>.GroupBy(String) IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQuery<T> : IProjectionQuery<T>, IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Remarks When you don't use Select or From function, than default values are taken from model. Examples You can use standard string sql query for querying data. var people = database.Query<Person>().Sql( \"SELECT p.Id, FirstName, LastName, PostCode \" + \"FROM Person \" + \"JOIN Address ON (Person.AddressId = Address.Id) \" + \"WHERE Age > @1\", 18); foreach (var person in people) { Console.WriteLine(person.FirstName); }</code></pre> You can use sql query builder. var people = database.Query<Person>() .Select(\"p.Id\", \"FirstName\", \"LastName\", \"PostCode\") .From(\"Person JOIN Address ON (Person.AddressId = Address.Id)\") .Where(\"Age > @1\", 18); foreach (var person in people) { Console.WriteLine(person.FirstName); }</code></pre> Methods From(String) Add FROM part to sql query. Declaration IProjectionQuery<T> From(string table) Parameters Type Name Description System.String table Table name or join. Returns Type Description IProjectionQuery <T> Query for enumerable models. Remarks When From method is not call, query take table by T model type. Examples var people = database.Query<Person>().From(\"Person LEFT JOIN Avatar ON (Person.Id = Avatar.PersonId)\"); Exceptions Type Condition System.ArgumentNullException if table is null or white string. Select(String) Add select part to sql. Declaration IQuery<T> Select(string selectPart) Parameters Type Name Description System.String selectPart The columns for select clausule. (Separate by ,) Returns Type Description IQuery <T> Query for enumerable models. Remarks When Select method is not call, query take columns by T model. Examples var people = database.Query<Person>().Select(\"Id, FirstName\"); Exceptions Type Condition System.ArgumentNullException if sqlPart is null or white string. Select(String[]) Add columns to sql. Declaration IQuery<T> Select(params string[] columns) Parameters Type Name Description System.String [] columns The columns for select clausule. Returns Type Description IQuery <T> Query for enumerable models. Remarks When Select method is not call, query take columns by T model. Examples var people = database.Query<Person>().Select(\"Id\", \"FirstName\"); Select<TResult>(Func<T, TResult>) Add columns to sql Declaration IQuery<T> Select<TResult>(Func<T, TResult> selector) Parameters Type Name Description System.Func <T, TResult> selector The selector. Returns Type Description IQuery <T> Query for enumerable models. Type Parameters Name Description TResult The type of the result. Remarks When Select method is not call, query take columns by T model. Examples var people = database.Query<Person>().Select(p => new { p.Id, p.FirstName }); Exceptions Type Condition System.ArgumentNullException if selector is null. Sql(RawSqlString, Object[]) Create query from sql statement. Declaration IQueryBase<T> Sql(RawSqlString sql, params object[] args) Parameters Type Name Description RawSqlString sql The SQL for executing in server. System.Object [] args The arguments. Returns Type Description IQueryBase <T> Query from sql. Remarks Sql must be server specific. Because no translation is provide. Exceptions Type Condition System.ArgumentNullException if sql is null or white string. Sql(FormattableString) Create query from sql statement. Declaration IQueryBase<T> Sql(FormattableString sql) Parameters Type Name Description System.FormattableString sql The SQL for executing in server. Returns Type Description IQueryBase <T> Query from sql. Remarks Sql must be server specific. Because no translation is provide. Examples var id = 15; var name = \"Name\"; var items = query.Sql($\"SELECT * FROM Table WHERE Id = {id} AND Name = {name}\"); Exceptions Type Condition System.ArgumentNullException if sql is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.KORM.Query.IDbSet-1.html": {
    "href": "api/Kros.KORM.Query.IDbSet-1.html",
    "title": "Interface IDbSet<T> | Kros.KORM",
    "keywords": "Interface IDbSet<T> An IDbSet represents the collection of all entities in the context, or that can be queried from the database, of a given type. DbSet is a concrete implementation of IDbSet. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IDbSet<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T The type that defines the set. Properties AddedItems List of items in Added state. Declaration IEnumerable<T> AddedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> DeletedItems List of items in Deleted state. Declaration IEnumerable<T> DeletedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> EditedItems List of items in Edited state. Declaration IEnumerable<T> EditedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> Methods Add(T) Adds the item to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration void Add(T entity) Parameters Type Name Description T entity The item to add. Add(IEnumerable<T>) Adds the items to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration void Add(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to add. BulkInsert() Bulk inserts pending added items. Declaration void BulkInsert() Examples var people = database.Query<Person>().AsDbSet(); foreach (var person in dataForImport) { people.Add(person); } people.BulkInsert(); BulkInsert(IEnumerable<T>) Bulk inserts items . Declaration void BulkInsert(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to insert. BulkInsertAsync() Asynchronously bulk inserts pending added items. Declaration Task BulkInsertAsync() Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk insert operation. BulkInsertAsync(IEnumerable<T>) Asynchronously bulk inserts items . Declaration Task BulkInsertAsync(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to insert. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk insert operation. BulkUpdate() Bulk updates pending edited items. Declaration void BulkUpdate() Examples var people = database.Query<Person>().AsDbSet(); foreach (var person in dataForUpdate) { people.Edit(person); } people.BulkUpdate(); BulkUpdate(Action<IDbConnection, IDbTransaction, String>) Bulk updates pending edited items with specific action. Declaration void BulkUpdate(Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). BulkUpdate(IEnumerable<T>) Bulk updates items . Declaration void BulkUpdate(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. BulkUpdate(IEnumerable<T>, Action<IDbConnection, IDbTransaction, String>) Bulk updates items with specific action. Declaration void BulkUpdate(IEnumerable<T> items, Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). BulkUpdateAsync() Asynchronously bulk updates pending edited items. Declaration Task BulkUpdateAsync() Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk update operation. BulkUpdateAsync(Action<IDbConnection, IDbTransaction, String>) Asyncronousky bulk updates pending edited items with specific action. Declaration Task BulkUpdateAsync(Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk update operation. BulkUpdateAsync(IEnumerable<T>) Asyncronously bulk updates items . Declaration Task BulkUpdateAsync(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk update operation. BulkUpdateAsync(IEnumerable<T>, Action<IDbConnection, IDbTransaction, String>) Asynchronously bulk updates items with specific action. Declaration Task BulkUpdateAsync(IEnumerable<T> items, Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items The items to update. System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction The action execute on temp table (modify data in temp table). Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous bulk update operation. Clear() Rolls back all pending changes. Declaration void Clear() CommitChanges() Commits all pending changes to the database. Declaration void CommitChanges() CommitChangesAsync() Asynchronously commits all pending changes to the database. Declaration Task CommitChangesAsync() Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous save operation. Delete(T) Marks the item as Deleted such that it will be deleted from the database when CommitChanges is called. Declaration void Delete(T entity) Parameters Type Name Description T entity The item to delete. Delete(IEnumerable<T>) Marks the items as Deleted such that it will be deleted from the database when CommitChanges is called. Declaration void Delete(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to delete. Edit(T) Marks the item as Edited such that it will be updated in the database when CommitChanges is called. Declaration void Edit(T entity) Parameters Type Name Description T entity The item to edit. Edit(IEnumerable<T>) Marks the items as Edited such that it will be updated in the database when CommitChanges is called. Declaration void Edit(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to edit."
  },
  "api/Kros.KORM.Migrations.IMigrationsRunner.html": {
    "href": "api/Kros.KORM.Migrations.IMigrationsRunner.html",
    "title": "Interface IMigrationsRunner | Kros.KORM",
    "keywords": "Interface IMigrationsRunner Interface which describe class for execution database migrations. Namespace : Kros.KORM.Migrations Assembly : Kros.KORM.dll Syntax public interface IMigrationsRunner Methods MigrateAsync() Executes database migrations. Declaration Task MigrateAsync() Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Kros.KORM.Query.Sql.ISqlExpressionVisitorFactory.html": {
    "href": "api/Kros.KORM.Query.Sql.ISqlExpressionVisitorFactory.html",
    "title": "Interface ISqlExpressionVisitorFactory | Kros.KORM",
    "keywords": "Interface ISqlExpressionVisitorFactory Factory for creating ISqlExpressionVisitor implementations for database connection. Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public interface ISqlExpressionVisitorFactory Methods CreateVisitor(IDbConnection) Creates an ISqlExpressionVisitor for specified connection . Declaration ISqlExpressionVisitor CreateVisitor(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Database connection. Returns Type Description ISqlExpressionVisitor Different implementations of ISqlExpressionVisitor can be returned for different connections. For example different ISqlExpressionVisitor is returned for various SQL server versions."
  },
  "api/Kros.KORM.Query.Sql.ISqlExpressionVisitor.html": {
    "href": "api/Kros.KORM.Query.Sql.ISqlExpressionVisitor.html",
    "title": "Interface ISqlExpressionVisitor | Kros.KORM",
    "keywords": "Interface ISqlExpressionVisitor Interface, which describe visitor for genereting sql select command. Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public interface ISqlExpressionVisitor Methods GenerateSql(Expression) Generates the SQL from expression. Declaration QueryInfo GenerateSql(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression The expression. Returns Type Description QueryInfo SQL select command text. VisitColumns(ColumnsExpression) Visits the columns. Declaration Expression VisitColumns(ColumnsExpression columnExpression) Parameters Type Name Description ColumnsExpression columnExpression The column expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitGroupBy(GroupByExpression) Visits the group by. Declaration Expression VisitGroupBy(GroupByExpression groupByExpression) Parameters Type Name Description GroupByExpression groupByExpression The group by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitOrderBy(OrderByExpression) Visits the order by. Declaration Expression VisitOrderBy(OrderByExpression orderByExpression) Parameters Type Name Description OrderByExpression orderByExpression The order by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSelect(SelectExpression) Visits the select. Declaration Expression VisitSelect(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression The select expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSql(SqlExpression) Visits the SQL. Declaration Expression VisitSql(SqlExpression sqlExpression) Parameters Type Name Description SqlExpression sqlExpression The SQL expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitTable(TableExpression) Visits the table. Declaration Expression VisitTable(TableExpression tableExpression) Parameters Type Name Description TableExpression tableExpression The table expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitWhere(WhereExpression) Visits the where. Declaration Expression VisitWhere(WhereExpression whereExpression) Parameters Type Name Description WhereExpression whereExpression The where expression. Returns Type Description System.Linq.Expressions.Expression Expression"
  },
  "api/Kros.KORM.Metadata.Attribute.AliasAttribute.html": {
    "href": "api/Kros.KORM.Metadata.Attribute.AliasAttribute.html",
    "title": "Class AliasAttribute | Kros.KORM",
    "keywords": "Class AliasAttribute Attribute which describe database name of property/class. Inheritance System.Object System.Attribute AliasAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property, AllowMultiple = false)] public class AliasAttribute : Attribute, _Attribute Constructors AliasAttribute(String) Initializes a new instance of the AliasAttribute class. Declaration public AliasAttribute(string alias) Parameters Type Name Description System.String alias The database alias. Exceptions Type Condition System.ArgumentNullException The value of alias is null . System.ArgumentException The value of alias is empty string, or stirng containing whitespace characters only. Properties Alias Database alias Declaration public string Alias { get; } Property Value Type Description System.String"
  },
  "api/Kros.KORM.Injection.IInjector.html": {
    "href": "api/Kros.KORM.Injection.IInjector.html",
    "title": "Interface IInjector | Kros.KORM",
    "keywords": "Interface IInjector Interface, which describe service injector, which know get injected values. Namespace : Kros.KORM.Injection Assembly : Kros.KORM.dll Syntax public interface IInjector Methods GetValue(String) Get injected value for property. Declaration object GetValue(string propertyName) Parameters Type Name Description System.String propertyName Property, which want resolve. Returns Type Description System.Object Value for injection. IsInjectable(String) Can by property injected? Declaration bool IsInjectable(string propertyName) Parameters Type Name Description System.String propertyName Property name. Returns Type Description System.Boolean true if can by injected, otherwise false ."
  },
  "api/Kros.KORM.Exceptions.CompositePrimaryKeyException.html": {
    "href": "api/Kros.KORM.Exceptions.CompositePrimaryKeyException.html",
    "title": "Class CompositePrimaryKeyException | Kros.KORM",
    "keywords": "Class CompositePrimaryKeyException Exception class for composite primary key. Inheritance System.Object System.Exception CompositePrimaryKeyException Namespace : Kros.KORM.Exceptions Assembly : Kros.KORM.dll Syntax public class CompositePrimaryKeyException : Exception, ISerializable, _Exception Constructors CompositePrimaryKeyException(String, String) Initializes a new instance of the CompositePrimaryKeyException class. Declaration public CompositePrimaryKeyException(string message, string tableName) Parameters Type Name Description System.String message Exception message. System.String tableName Table name which has composite primary key. Properties TableName Table name which has composite primary key. Declaration public string TableName { get; } Property Value Type Description System.String"
  },
  "api/Kros.KORM.Data.html": {
    "href": "api/Kros.KORM.Data.html",
    "title": "Namespace Kros.KORM.Data | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Data Interfaces ITransaction Represent database transaction. Instances of this class are obtained from BeginTransaction() and it is not designed to be directly constructed in your application code."
  },
  "api/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerator-1.html": {
    "href": "api/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerator-1.html",
    "title": "Class ModelBuilder.ModelBuilderEnumerator<T> | Kros.KORM",
    "keywords": "Class ModelBuilder.ModelBuilderEnumerator<T> Enumerator that iterates through the materialized models. Inheritance System.Object ModelBuilder.ModelBuilderEnumerator<T> Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class ModelBuilderEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator Type Parameters Name Description T Model Type Properties Current Gets the element in the collection at the current position of the enumerator. Declaration public T Current { get; } Property Value Type Description T Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() MoveNext() Advances the enumerator to the next element of the collection. Declaration public bool MoveNext() Returns Type Description System.Boolean true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection. Reset() Sets the enumerator to its initial position, which is before the first element in the collection. Declaration public void Reset() Exceptions Type Condition System.NotImplementedException See Also System.Collections.Generic.IEnumerator <T>"
  },
  "api/Kros.KORM.Injection.IInjectionConfigurator-1.html": {
    "href": "api/Kros.KORM.Injection.IInjectionConfigurator-1.html",
    "title": "Interface IInjectionConfigurator<TModel> | Kros.KORM",
    "keywords": "Interface IInjectionConfigurator<TModel> Interface, which describe configurator, for configurate model property injection. Namespace : Kros.KORM.Injection Assembly : Kros.KORM.dll Syntax public interface IInjectionConfigurator<TModel> Type Parameters Name Description TModel Model type. Methods FillProperty<TValue>(Expression<Func<TModel, TValue>>, Func<TValue>) Fill model property with injector. Declaration IInjectionConfigurator<TModel> FillProperty<TValue>(Expression<Func<TModel, TValue>> modelProperty, Func<TValue> injector) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TModel, TValue>> modelProperty Expression for defined property for injection. System.Func <TValue> injector Function which is used for injection value to property. Returns Type Description IInjectionConfigurator <TModel> Configurator, for next configurations. Type Parameters Name Description TValue Property type."
  },
  "api/Kros.KORM.Query.Expressions.WhereExpression.html": {
    "href": "api/Kros.KORM.Query.Expressions.WhereExpression.html",
    "title": "Class WhereExpression | Kros.KORM",
    "keywords": "Class WhereExpression Expression, which represent WHERE statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression WhereExpression Inherited Members ArgsExpression.Sql ArgsExpression.Parameters QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class WhereExpression : ArgsExpression Constructors WhereExpression(RawSqlString, Object[]) Initializes a new instance of the TableExpression class. Declaration public WhereExpression(RawSqlString whereCondition, params object[] args) Parameters Type Name Description RawSqlString whereCondition The where condition. System.Object [] args Where args. Fields WhereStatement Where statement Declaration public const string WhereStatement = \"WHERE\" Field Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM.Materializer.html": {
    "href": "api/Kros.KORM.Materializer.html",
    "title": "Namespace Kros.KORM.Materializer | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Materializer Classes DynamicMethodModelFactory Modelfactory, which materialize model by dynamic method delegates. ModelBuilder ModelBuilder, which know materialize data from Db to objects. ModelBuilder.ModelBuilderEnumerable<T> Enumerable which support iteration over the materialized models. ModelBuilder.ModelBuilderEnumerator<T> Enumerator that iterates through the materialized models. Interfaces IMaterialize Specifies that this object supports notification about materializing. IModelBuilder Interface for ModelBuilder, which know materialize data from Ado to objects. IModelFactory Interface for factory, which know materialize model from database."
  },
  "api/Kros.KORM.Query.IQueryProvider.html": {
    "href": "api/Kros.KORM.Query.IQueryProvider.html",
    "title": "Interface IQueryProvider | Kros.KORM",
    "keywords": "Interface IQueryProvider Interface for provider, which know execute query. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQueryProvider : IQueryProvider, IDisposable Properties DbProviderFactory Returns DbProviderFactory for current provider. Declaration DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory Methods BeginTransaction(IsolationLevel) Begins the transaction using the specified isolation level. Declaration ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The database isolation level with which the underlying store transaction will be created. Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. CreateBulkInsert() Creates instance of Kros.Data.BulkActions.IBulkInsert . Declaration IBulkInsert CreateBulkInsert() Returns Type Description Kros.Data.BulkActions.IBulkInsert Instance of Kros.Data.BulkActions.IBulkInsert . CreateBulkUpdate() Creates instance of Kros.Data.BulkActions.IBulkUpdate . Declaration IBulkUpdate CreateBulkUpdate() Returns Type Description Kros.Data.BulkActions.IBulkUpdate Instance of Kros.Data.BulkActions.IBulkUpdate . CreateIdGenerator(String, Int32) Creates the identifier generator. Declaration IIdGenerator CreateIdGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName Name of the database table. System.Int32 batchSize Size of inserting the batch. Returns Type Description Kros.Data.IIdGenerator The identifier generator. Execute<T>(IQuery<T>) Executes the specified query. Declaration IEnumerable<T> Execute<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models, which was materialized by query. Type Parameters Name Description T Type of model result. Exceptions Type Condition System.ArgumentNullException If query is null. ExecuteInTransactionAsync(Func<Task>) Asynchronously executes action in transaction. Declaration Task ExecuteInTransactionAsync(Func<Task> action) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > action Action which will be executed. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous operation. ExecuteNonQuery(String) Executes arbitrary query. Declaration int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQuery(String, CommandParameterCollection) Executes arbitrary query with parameters. Declaration int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQueryAsync(String) Asynchronously executes arbitrary query. Declaration Task<int> ExecuteNonQueryAsync(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A task that represents the asynchronous operation. The task result contains the numbers of affected rows. ExecuteNonQueryAsync(String, CommandParameterCollection) Asynchronously executes arbitrary query with parameters. Declaration Task<int> ExecuteNonQueryAsync(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A task that represents the asynchronous operation. The task result contains the numbers of affected rows. ExecuteNonQueryCommand(IDbCommand) Executes the command. Declaration int ExecuteNonQueryCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQueryCommandAsync(DbCommand) Asynchronously executes the command. Declaration Task<int> ExecuteNonQueryCommandAsync(DbCommand command) Parameters Type Name Description System.Data.Common.DbCommand command The command. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A task that represents the asynchronous save operation. The task result contains the numbers of affected rows. ExecuteScalar<T>(IQuery<T>) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration object ExecuteScalar<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Object The first column of the first row in the result set, or a null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description T Type of model. ExecuteStoredProcedure<TResult>(String) Executes the stored procedure with parameters and returns its result. The result can be scalar value (primitive or complex – class type), or a list of values ( System.Collections.Generic.IEnumerable<T> ). Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. Returns Type Description TResult Result of the stored procedure. Type Parameters Name Description TResult The type of the result. It can be scalar primitive or complex (class) value, or System.Collections.Generic.IEnumerable<T> of some value. If the TResult is primitive scalar value, the result is converted to that. If TResult is a classs, the result of stored procedure is converted (materialized) to that class type. If TResult is System.Collections.Generic.IEnumerable<T> , the result of procedure is converted (materialized) to that. Examples For the examples, we expect to have a Database initialized and a Person class defined. public class Person { public int Id { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public DateTime BDay { get; set; } } private Database _database = new Database(new SqlConnection(&quot;connection string&quot;));</code></pre> // Stored procedure returns a scalar value. int intResult = _database.ExecuteStoredProcedure<int>(\"ProcedureName\"); DateTime dateResult = _database.ExecuteStoredProcedure<DateTime>(\"ProcedureName\"); // Stored procedure sets the value of output parameter. var parameters = new CommandParameterCollection(); parameters.Add(\"@param1\", 10); parameters.Add(\"@param2\", DateTime.Now); parameters.Add(\"@outputParam\", null, DbType.String, ParameterDirection.Output); _database.ExecuteStoredProcedure<string>(\"ProcedureName\", parameters); Console.WriteLine(parameters[\"@outputParam\"].Value); // Stored procedure returns complex object. Person person = _database.ExecuteStoredProcedure<Person>(\"ProcedureName\"); // Stored procedure returns list of complex objects. IEnumerable<Person> persons = _database.ExecuteStoredProcedure<IEnumerable<Person>>(\"ProcedureName\"); Exceptions Type Condition System.InvalidOperationException ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. CommandParameterCollection parameters The stored procedure parameters. Values of output parameters ( System.Data.ParameterDirection.Output System.Data.ParameterDirection.InputOutput ) are set back to corresponding parameter in collection Returns Type Description TResult Type Parameters Name Description TResult Exceptions Type Condition System.ArgumentException Value of any of the parameters in parameters is null or System.DBNull and its data type ( DataType ) is not set. GetCommandForCurrentTransaction() Vytvorí inicializovaný príkaz System.Data.Common.DbCommand , pre aktuálnu transakciu. Používa sa iba v rámci volania ExecuteInTransactionAsync(Func<Task>) . Declaration DbCommand GetCommandForCurrentTransaction() Returns Type Description System.Data.Common.DbCommand Inicializovaný príkaz. SetParameterDbType(DbParameter, String, String) Sets correct data type to parameter , according to column columnName in table tableName . The method does not set general System.Data.Common.DbParameter.DbType , but specific for given database ( SqlParameter.SqlDbType , OleDbParameter.OleDbType ). Declaration void SetParameterDbType(DbParameter parameter, string tableName, string columnName) Parameters Type Name Description System.Data.Common.DbParameter parameter The parameter to which the data type is set. System.String tableName Table name. System.String columnName Column name which data type is obtained. SupportsPrepareCommand() Returns, if provider supports peparing of command ( System.Data.Common.DbCommand.Prepare ). Declaration bool SupportsPrepareCommand() Returns Type Description System.Boolean true is provider supports preparing command, otherwise false ."
  },
  "api/Kros.KORM.Query.Expressions.SelectExpression.html": {
    "href": "api/Kros.KORM.Query.Expressions.SelectExpression.html",
    "title": "Class SelectExpression | Kros.KORM",
    "keywords": "Class SelectExpression Expression, which represent SELECT query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression SelectExpression Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class SelectExpression : QueryExpression Constructors SelectExpression(TableInfo) Initializes a new instance of the SelectExpression class. Declaration public SelectExpression(TableInfo tableInfo) Parameters Type Name Description TableInfo tableInfo The table info. Fields SelectStatement The select statement Declaration public const string SelectStatement = \"SELECT\" Field Value Type Description System.String Properties ColumnsExpression Gets the columns expression. Declaration public ColumnsExpression ColumnsExpression { get; } Property Value Type Description ColumnsExpression GroupByExpression Gets or sets the group by expression. Declaration public GroupByExpression GroupByExpression { get; } Property Value Type Description GroupByExpression NodeType Gets the node type of this System.Linq.Expressions.Expression . Declaration public override sealed ExpressionType NodeType { get; } Property Value Type Description System.Linq.Expressions.ExpressionType Overrides QueryExpression.NodeType OrderByExpression Gets or sets the order by expression. Declaration public OrderByExpression OrderByExpression { get; } Property Value Type Description OrderByExpression TableExpression Gets the table expression. Declaration public TableExpression TableExpression { get; } Property Value Type Description TableExpression Type Gets the static type of the expression that this System.Linq.Expressions.Expression represents. Declaration public override Type Type { get; } Property Value Type Description System.Type Overrides QueryExpression.Type Value Gets the value. Declaration public object Value { get; } Property Value Type Description System.Object WhereExpression Gets or sets the where expression. Declaration public WhereExpression WhereExpression { get; } Property Value Type Description WhereExpression Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) SetColumnsExpression(ColumnsExpression) Sets the columns expression. Declaration public void SetColumnsExpression(ColumnsExpression columnExpression) Parameters Type Name Description ColumnsExpression columnExpression The column expression. Exceptions Type Condition System.ArgumentException 'columnExpression' can be applied only once.;columnsExpression SetGroupByExpression(GroupByExpression) Sets the group by expression. Declaration public void SetGroupByExpression(GroupByExpression groupByExpression) Parameters Type Name Description GroupByExpression groupByExpression The group by expression. Exceptions Type Condition System.ArgumentException 'groupByExpression' can be applied only once.;groupByExpression SetOrderByExpression(OrderByExpression) Sets the order by expression. Declaration public void SetOrderByExpression(OrderByExpression orderByExpression) Parameters Type Name Description OrderByExpression orderByExpression The order by expression. Exceptions Type Condition System.ArgumentException 'orderByExpression' can be applied only once.;orderByExpression SetTableExpression(TableExpression) Sets the table expression. Declaration public void SetTableExpression(TableExpression tableExpression) Parameters Type Name Description TableExpression tableExpression The table expression. Exceptions Type Condition System.ArgumentException 'tableExpression' can be applied only once.;tableExpression SetWhereExpression(WhereExpression) Sets the where expression. Declaration public void SetWhereExpression(WhereExpression whereExpression) Parameters Type Name Description WhereExpression whereExpression The where expression. Exceptions Type Condition System.ArgumentException 'whereExpression' can be applied only once.;whereExpression VisitChildren(ExpressionVisitor) Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible. Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor An instance of System.Func<T, TResult> . Returns Type Description System.Linq.Expressions.Expression The expression being visited, or an expression which should replace it in the tree. Overrides System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM.Query.CommandParameterCollection.html": {
    "href": "api/Kros.KORM.Query.CommandParameterCollection.html",
    "title": "Class CommandParameterCollection | Kros.KORM",
    "keywords": "Class CommandParameterCollection Zoznam parametrov pre pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). Inheritance System.Object System.Collections.ObjectModel.Collection < CommandParameter > System.Collections.ObjectModel.KeyedCollection < System.String , CommandParameter > CommandParameterCollection Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class CommandParameterCollection : KeyedCollection<string, CommandParameter>, IList<CommandParameter>, ICollection<CommandParameter>, IList, ICollection, IReadOnlyList<CommandParameter>, IReadOnlyCollection<CommandParameter>, IEnumerable<CommandParameter>, IEnumerable Constructors CommandParameterCollection() Vytvorí inštanciu triedy. V názvoch parametrov, ktoré predstavujú kľúč do slovníka, nezáleží na veľkosti písmen. Declaration public CommandParameterCollection() Methods Add(String, Object) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. Returns Type Description CommandParameter Pridaný parameter. Add(String, Object, DbType) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value, DbType dataType) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.DbType dataType Dátový typ parametra. Returns Type Description CommandParameter Pridaný parameter. Add(String, Object, ParameterDirection) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. Returns Type Description CommandParameter Pridaný parameter. Add(String, Object, Nullable<DbType>, ParameterDirection) Pridá do zoznamu nový parameter so zadanými hodnotami. Declaration public CommandParameter Add(string parameterName, object value, DbType? dataType, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Nullable < System.Data.DbType > dataType Dátový typ parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. Returns Type Description CommandParameter Pridaný parameter. GetKeyForItem(CommandParameter) Vráti kľuč do slovníka, čo je meno parametra ParameterName . Declaration protected override string GetKeyForItem(CommandParameter item) Parameters Type Name Description CommandParameter item Parameter, pre ktorý sa zíkava kľúč. Returns Type Description System.String Reťazec - meno parametra. Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.KORM.Query.CommandParameter>.GetKeyForItem(Kros.KORM.Query.CommandParameter)"
  },
  "api/Kros.KORM.Metadata.TableInfo.html": {
    "href": "api/Kros.KORM.Metadata.TableInfo.html",
    "title": "Class TableInfo | Kros.KORM",
    "keywords": "Class TableInfo Class, which represent information about table from database Inheritance System.Object TableInfo Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class TableInfo Constructors TableInfo(IEnumerable<ColumnInfo>, IEnumerable<PropertyInfo>, MethodInfo) Initializes a new instance of the TableInfo class. Declaration public TableInfo(IEnumerable<ColumnInfo> columns, IEnumerable<PropertyInfo> allModelProperties, MethodInfo onAfterMaterialize) Parameters Type Name Description System.Collections.Generic.IEnumerable < ColumnInfo > columns The columns. System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > allModelProperties All model properties System.Reflection.MethodInfo onAfterMaterialize Method info accessor for calling OnAfterMaterialize over IMaterialize IMaterialize If Model doesn't implement IMaterialize then null. Exceptions Type Condition System.ArgumentNullException When columns is null. Properties AllModelProperties All model properties. Declaration public IEnumerable<PropertyInfo> AllModelProperties { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Reflection.PropertyInfo > Columns Gets the columns. Declaration public IEnumerable<ColumnInfo> Columns { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ColumnInfo > The columns. Name Gets or sets the table name. Declaration public string Name { get; set; } Property Value Type Description System.String OnAfterMaterialize Method info accessor for calling OnAfterMaterialize over IMaterialize IMaterialize If Model doesn't implement IMaterialize then null. Declaration public MethodInfo OnAfterMaterialize { get; } Property Value Type Description System.Reflection.MethodInfo PrimaryKey Gets the columns, which are part of primary key. Declaration public IEnumerable<ColumnInfo> PrimaryKey { get; } Property Value Type Description System.Collections.Generic.IEnumerable < ColumnInfo > Methods GetColumnInfo(PropertyInfo) Gets the column information. Declaration public ColumnInfo GetColumnInfo(PropertyInfo property) Parameters Type Name Description System.Reflection.PropertyInfo property Property Info. Returns Type Description ColumnInfo Column information. Exceptions Type Condition System.ArgumentNullException When property is null. GetColumnInfo(String) Gets the column information. Declaration public ColumnInfo GetColumnInfo(string columnName) Parameters Type Name Description System.String columnName Name of the column. Returns Type Description ColumnInfo Column information. Exceptions Type Condition System.ArgumentNullException When columnName is null. GetColumnInfoByPropertyName(String) Gets the name of the column information by property. Declaration public ColumnInfo GetColumnInfoByPropertyName(string propertyName) Parameters Type Name Description System.String propertyName Name of the property. Returns Type Description ColumnInfo"
  },
  "api/Kros.KORM.Query.Expressions.QueryExpression.html": {
    "href": "api/Kros.KORM.Query.Expressions.QueryExpression.html",
    "title": "Class QueryExpression | Kros.KORM",
    "keywords": "Class QueryExpression Base expression. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression ColumnsExpression GroupByExpression OrderByExpression SelectExpression TableExpression Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public abstract class QueryExpression : Expression Properties NodeType Gets the node type of this System.Linq.Expressions.Expression . Declaration public override ExpressionType NodeType { get; } Property Value Type Description System.Linq.Expressions.ExpressionType Overrides System.Linq.Expressions.Expression.NodeType Type Gets the static type of the expression that this System.Linq.Expressions.Expression represents. Declaration public override Type Type { get; } Property Value Type Description System.Type Overrides System.Linq.Expressions.Expression.Type See Also System.Linq.Expressions.Expression"
  },
  "api/Kros.KORM.Query.CommandParameter.html": {
    "href": "api/Kros.KORM.Query.CommandParameter.html",
    "title": "Class CommandParameter | Kros.KORM",
    "keywords": "Class CommandParameter Parameter pre SQL príkaz ( ExecuteNonQuery(String) ), alebo stored procedúru ( ExecuteStoredProcedure<TResult>(String) ). Inheritance System.Object CommandParameter Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class CommandParameter Constructors CommandParameter(String, Object) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. CommandParameter(String, Object, DbType) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value, DbType dataType) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.DbType dataType Dátový typ parametra. CommandParameter(String, Object, ParameterDirection) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. CommandParameter(String, Object, Nullable<DbType>, ParameterDirection) Vytvorí nový parameter so zadanými hodnotami. Declaration public CommandParameter(string parameterName, object value, DbType? dataType, ParameterDirection direction) Parameters Type Name Description System.String parameterName Meno parametra. System.Object value Hodnota parametra. System.Nullable < System.Data.DbType > dataType Dátový typ parametra. System.Data.ParameterDirection direction Druh parametra. Zmysel má len pri parametroch pre stored procedúry. Properties DataType Dátový typ parametra. Ak nie je nastavený, reálnemu databázovému parametru sa nastaví automaticky podľa typu hodnoty Value . Musí byť nastavený, ak Value je NULL. Declaration public DbType? DataType { get; set; } Property Value Type Description System.Nullable < System.Data.DbType > Direction Druh parametra: vstupný, výstupný, vstupno-výstupný, alebo návratová hodnota. Zmysel má len pri parametroch pre stored procedúry. Declaration public ParameterDirection Direction { get; set; } Property Value Type Description System.Data.ParameterDirection ParameterName Meno parametra. Declaration public string ParameterName { get; } Property Value Type Description System.String Value Hodnota parametra. Ak je NULL ( null , alebo System.DBNull ), mal by byť nastavený presný dátový typ DataType . Declaration public object Value { get; set; } Property Value Type Description System.Object"
  },
  "api/Kros.KORM.Query.IProjectionQuery-1.html": {
    "href": "api/Kros.KORM.Query.IProjectionQuery-1.html",
    "title": "Interface IProjectionQuery<T> | Kros.KORM",
    "keywords": "Interface IProjectionQuery<T> Represent result of projection operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IProjectionQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods Any(RawSqlString, Object[]) Check if exist elements in the table which match condition. Declaration bool Any(RawSqlString whereCondition, params object[] args) Parameters Type Name Description RawSqlString whereCondition The where condition. System.Object [] args The arguments for where. Returns Type Description System.Boolean true if exist elements in the table which match condition; otherwise, false. Examples var exist = database.Query<Person>().Any(\"Age > @1\", 18); Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. Any(FormattableString) Check if exist elements in the table which match condition. Declaration bool Any(FormattableString whereCondition) Parameters Type Name Description System.FormattableString whereCondition The where condition. Returns Type Description System.Boolean true if exist elements in the table which match condition; otherwise, false. Examples var exist = database.Query<Person>().Any($\"Age > {18}\"); Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. FirstOrDefault(RawSqlString, Object[]) Returns the first item of which match where condition, or a default value if item doesn't exist. Declaration T FirstOrDefault(RawSqlString whereCondition, params object[] args) Parameters Type Name Description RawSqlString whereCondition The where condition. System.Object [] args The arguments for where. Returns Type Description T null if item doesn't exist; otherwise, the first item which match the condition. Examples var item = query.FirstOrDefault(\"Id = @1\", 22); Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. FirstOrDefault(FormattableString) Returns the first item of which match where condition, or a default value if item doesn't exist. Declaration T FirstOrDefault(FormattableString whereCondition) Parameters Type Name Description System.FormattableString whereCondition The where condition. Returns Type Description T null if item doesn't exist; otherwise, the first item which match the condition. Examples var item = query.FirstOrDefault($\"Id = {22}\"); Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. GroupBy(String) Add group by statement to sql query. Declaration IGroupedQuery<T> GroupBy(string groupBy) Parameters Type Name Description System.String groupBy The group by statement. Returns Type Description IGroupedQuery <T> Query for enumerable models. Remarks You can also add HAVING statement. Examples var people = database.Query<Person>().GroupBy(\"FirstName, LastName\"); Exceptions Type Condition System.ArgumentNullException if groupBy is null or white string. OrderBy(String) Add order by statement to sql. Declaration IOrderedQuery<T> OrderBy(string orderBy) Parameters Type Name Description System.String orderBy The order by statement. Returns Type Description IOrderedQuery <T> Query for enumerable models. Examples var people = database.Query<Person>().OrderBy(\"FirstName DESC, LastName\"); Exceptions Type Condition System.ArgumentNullException if orderBy is null or white string. Where(RawSqlString, Object[]) Add where condition to sql. Declaration IFilteredQuery<T> Where(RawSqlString whereCondition, params object[] args) Parameters Type Name Description RawSqlString whereCondition The where condition. System.Object [] args The arguments for where. Returns Type Description IFilteredQuery <T> Query for enumerable models. Examples var people = database.Query<Person>().Where(\"Id < @1 AND Age > @2\", 1000, 18); Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. Where(FormattableString) Add where condition to sql. Declaration IFilteredQuery<T> Where(FormattableString whereCondition) Parameters Type Name Description System.FormattableString whereCondition The where condition. Returns Type Description IFilteredQuery <T> Query for enumerable models. Examples var item = query.Where($\"Id = {1}\") Exceptions Type Condition System.ArgumentNullException if whereCondition is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.KORM.Query.IOrderedQuery-1.html": {
    "href": "api/Kros.KORM.Query.IOrderedQuery-1.html",
    "title": "Interface IOrderedQuery<T> | Kros.KORM",
    "keywords": "Interface IOrderedQuery<T> Represents result of a sorting operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IOrderedQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. See Also IQueryBase <T>"
  },
  "api/Kros.KORM.Query.IGroupedQuery-1.html": {
    "href": "api/Kros.KORM.Query.IGroupedQuery-1.html",
    "title": "Interface IGroupedQuery<T> | Kros.KORM",
    "keywords": "Interface IGroupedQuery<T> Represents result of grouping operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IGroupedQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods OrderBy(String) Add order by statement to sql. Declaration IOrderedQuery<T> OrderBy(string orderBy) Parameters Type Name Description System.String orderBy The order by statement. Returns Type Description IOrderedQuery <T> Query for enumerable models. Examples var people = database.Query<Person>().OrderBy(\"FirstName DESC, LastName\"); Exceptions Type Condition System.ArgumentNullException if orderBy is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.KORM.Query.IFilteredQuery-1.html": {
    "href": "api/Kros.KORM.Query.IFilteredQuery-1.html",
    "title": "Interface IFilteredQuery<T> | Kros.KORM",
    "keywords": "Interface IFilteredQuery<T> Represent result of filter (where) operation. Inherited Members IQueryBase<T>.AsDbSet() IQueryBase<T>.ExecuteScalar() IQueryBase<T>.ExecuteStringScalar() IQueryBase<T>.ExecuteScalar<TRet>() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IFilteredQuery<T> : IQueryBase<T>, IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods GroupBy(String) Add group by statement to sql query. Declaration IGroupedQuery<T> GroupBy(string groupBy) Parameters Type Name Description System.String groupBy The group by statement. Returns Type Description IGroupedQuery <T> Query for enumerable models. Examples var people = database.Query<Person>().GroupBy(\"FirstName, LastName\"); Exceptions Type Condition System.ArgumentNullException if groupBy is null or white string. OrderBy(String) Add order by statement to sql. Declaration IOrderedQuery<T> OrderBy(string orderBy) Parameters Type Name Description System.String orderBy The order by statement. Returns Type Description IOrderedQuery <T> Query for enumerable models. Examples var people = database.Query<Person>().OrderBy(\"FirstName DESC, LastName\"); Exceptions Type Condition System.ArgumentNullException if orderBy is null or white string. See Also IQueryBase <T>"
  },
  "api/Kros.KORM.Helper.MethodName-1.html": {
    "href": "api/Kros.KORM.Helper.MethodName-1.html",
    "title": "Class MethodName<T> | Kros.KORM",
    "keywords": "Class MethodName<T> Helper for getting method name. Inheritance System.Object MethodName<T> Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public static class MethodName<T> Type Parameters Name Description T Type of class or interface, which method we want. Methods GetName(Expression<Action<T>>) Gets the name of method. Declaration public static string GetName(Expression<Action<T>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T>> expression The expression. Returns Type Description System.String Method name."
  },
  "api/Kros.KORM.CommandGenerator.html": {
    "href": "api/Kros.KORM.CommandGenerator.html",
    "title": "Namespace Kros.KORM.CommandGenerator | Kros.KORM",
    "keywords": "Namespace Kros.KORM.CommandGenerator Interfaces ICommandGenerator<T> Iterface, which describes generating single-table commands that are used to commit changes made to a DbSet with the associated database."
  },
  "api/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.OrderType.html": {
    "href": "api/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.OrderType.html",
    "title": "Enum DefaultQuerySqlGenerator.OrderType | Kros.KORM",
    "keywords": "Enum DefaultQuerySqlGenerator.OrderType Order type. Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax protected enum OrderType Fields Name Description Ascending The ascending. Descending The descending."
  },
  "api/Kros.KORM.Query.QueryProviderFactories.html": {
    "href": "api/Kros.KORM.Query.QueryProviderFactories.html",
    "title": "Class QueryProviderFactories | Kros.KORM",
    "keywords": "Class QueryProviderFactories Represent set of registered Query provider factories. Inheritance System.Object QueryProviderFactories Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public static class QueryProviderFactories Methods GetFactory(DbConnection) Gets the factory by connection. Declaration public static IQueryProviderFactory GetFactory(DbConnection connection) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. Returns Type Description IQueryProviderFactory Instance of IQueryProviderFactory . Exceptions Type Condition System.InvalidOperationException When factory for specific connection is not registered. GetFactory(String) Gets the factory by provider name. Declaration public static IQueryProviderFactory GetFactory(string providerName) Parameters Type Name Description System.String providerName Db provider name. Returns Type Description IQueryProviderFactory Instance of IQueryProviderFactory . Exceptions Type Condition System.InvalidOperationException When factory for specific providerName is not registered. Register<TConnection>(String, IQueryProviderFactory) Registers the specified query provider factory. Declaration public static void Register<TConnection>(string providerName, IQueryProviderFactory queryProviderFactory) where TConnection : DbConnection Parameters Type Name Description System.String providerName Name of the provider. IQueryProviderFactory queryProviderFactory The query provider factory. Type Parameters Name Description TConnection The type of the connection. See Also IQueryProviderFactory"
  },
  "api/Kros.KORM.Query.QueryProvider.html": {
    "href": "api/Kros.KORM.Query.QueryProvider.html",
    "title": "Class QueryProvider | Kros.KORM",
    "keywords": "Class QueryProvider Provider, which know execute query. Inheritance System.Object QueryProvider SqlServerQueryProvider Implements IQueryProvider Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public abstract class QueryProvider : IQueryProvider, IQueryProvider, IDisposable Constructors QueryProvider(ConnectionStringSettings, ISqlExpressionVisitorFactory, IModelBuilder, ILogger) Initializes a new instance of the QueryProvider class. Declaration public QueryProvider(ConnectionStringSettings connectionSettings, ISqlExpressionVisitorFactory sqlGeneratorFactory, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionSettings The connection string settings. ISqlExpressionVisitorFactory sqlGeneratorFactory The SQL generator factory. IModelBuilder modelBuilder The model builder. ILogger logger The logger. QueryProvider(DbConnection, ISqlExpressionVisitorFactory, IModelBuilder, ILogger) Initializes a new instance of the QueryProvider class. Declaration public QueryProvider(DbConnection externalConnection, ISqlExpressionVisitorFactory sqlGeneratorFactory, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Data.Common.DbConnection externalConnection The connection. ISqlExpressionVisitorFactory sqlGeneratorFactory The SQL generator factory. IModelBuilder modelBuilder The model builder. ILogger logger The logger. Properties Connection Vráti spojenie na databázu s ktorou trieda pracuje. Ak trieda bola vytvorená iba so zadaným connection string-om, je vytvorené nové spojenie. Declaration protected DbConnection Connection { get; } Property Value Type Description System.Data.Common.DbConnection ConnectionString Connection string na databázu, ktorý bol zadaný pri vytvorení inštancie triedy ( QueryProvider(ConnectionStringSettings, ISqlExpressionVisitorFactory, IModelBuilder, ILogger) ). Ak bola trieda vytvorená konkrétnou inštanciou spojenia, vráti null . Declaration protected string ConnectionString { get; } Property Value Type Description System.String DbProviderFactory Returns DbProviderFactory for current provider. Declaration public abstract DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory IsExternalConnection Vráti, či spojenie na databázu je externé, tzn. či bolo explicitne zadané zvonka v konštruktore. Ak bolo spojenie zadané explicitne, vráti true , ak bol v konštruktore zadaný iba connection string a spojenie je vytvorené interne, vráti false . Declaration protected bool IsExternalConnection { get; } Property Value Type Description System.Boolean Methods BeginTransaction(IsolationLevel) Declaration public ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Returns Type Description ITransaction CreateBulkInsert() Creates instance of Kros.Data.BulkActions.IBulkInsert . Declaration public abstract IBulkInsert CreateBulkInsert() Returns Type Description Kros.Data.BulkActions.IBulkInsert Instance of Kros.Data.BulkActions.IBulkInsert . CreateBulkUpdate() Creates instance of Kros.Data.BulkActions.IBulkUpdate . Declaration public abstract IBulkUpdate CreateBulkUpdate() Returns Type Description Kros.Data.BulkActions.IBulkUpdate Instance of Kros.Data.BulkActions.IBulkUpdate . CreateIdGenerator(String, Int32) Declaration public IIdGenerator CreateIdGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName System.Int32 batchSize Returns Type Description Kros.Data.IIdGenerator CreateQuery(Expression) Not implemented. Declaration public IQueryable CreateQuery(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description System.Linq.IQueryable Exceptions Type Condition System.NotImplementedException CreateQuery<TElement>(Expression) Constructs an System.Linq.IQueryable<T> object that can evaluate the query represented by a specified expression tree. Declaration public IQueryable<TElement> CreateQuery<TElement>(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description System.Linq.IQueryable <TElement> An System.Linq.IQueryable<T> that can evaluate the query represented by the specified expression tree. Type Parameters Name Description TElement The type of the elements of the System.Linq.IQueryable<T> that is returned. Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Execute(Expression) Executing non generic result is not actualy supported. Declaration public object Execute(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description System.Object Exceptions Type Condition System.NotImplementedException Execute<T>(IQuery<T>) Executes the specified query. Declaration public IEnumerable<T> Execute<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models, which was materialized by query Type Parameters Name Description T Type of model result. Exceptions Type Condition System.ArgumentNullException If query is null. Execute<TResult>(Expression) Executes the strongly-typed query represented by a specified expression tree. Declaration public TResult Execute<TResult>(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression An expression tree that represents a LINQ query. Returns Type Description TResult The value that results from executing the specified query. Type Parameters Name Description TResult The type of the value that results from executing the query. ExecuteInTransactionAsync(Func<Task>) Declaration public Task ExecuteInTransactionAsync(Func<Task> action) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > action Returns Type Description System.Threading.Tasks.Task ExecuteNonQuery(String) Declaration public int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Returns Type Description System.Int32 ExecuteNonQuery(String, CommandParameterCollection) Declaration public int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query CommandParameterCollection parameters Returns Type Description System.Int32 ExecuteNonQueryAsync(String) Declaration public Task<int> ExecuteNonQueryAsync(string query) Parameters Type Name Description System.String query Returns Type Description System.Threading.Tasks.Task < System.Int32 > ExecuteNonQueryAsync(String, CommandParameterCollection) Declaration public Task<int> ExecuteNonQueryAsync(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query CommandParameterCollection parameters Returns Type Description System.Threading.Tasks.Task < System.Int32 > ExecuteNonQueryCommand(IDbCommand) Executes the command. Declaration public int ExecuteNonQueryCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command. Returns Type Description System.Int32 Exceptions Type Condition System.NotImplementedException ExecuteNonQueryCommandAsync(DbCommand) Declaration public Task<int> ExecuteNonQueryCommandAsync(DbCommand command) Parameters Type Name Description System.Data.Common.DbCommand command Returns Type Description System.Threading.Tasks.Task < System.Int32 > ExecuteScalar<T>(IQuery<T>) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public object ExecuteScalar<T>(IQuery<T> query) Parameters Type Name Description IQuery <T> query The query. Returns Type Description System.Object The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description T Type of model. Exceptions Type Condition System.ArgumentNullException If query is null. ExecuteStoredProcedure<TResult>(String) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Returns Type Description TResult Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName CommandParameterCollection parameters Returns Type Description TResult Type Parameters Name Description TResult GetCommandForCurrentTransaction() Vytvorí inicializovaný príkaz System.Data.Common.DbCommand , pre aktuálnu transakciu. Používa sa iba v rámci volania ExecuteInTransactionAsync(Func<Task>) . Declaration public DbCommand GetCommandForCurrentTransaction() Returns Type Description System.Data.Common.DbCommand Inicializovaný príkaz. GetCurrentTransaction() Gets current the transaction. Declaration protected DbTransaction GetCurrentTransaction() Returns Type Description System.Data.Common.DbTransaction Current transaction if is opened; otherwise null; GetSchemaLoader() Creates Kros.Data.Schema.IDatabaseSchemaLoader for specific database. Declaration protected abstract IDatabaseSchemaLoader GetSchemaLoader() Returns Type Description Kros.Data.Schema.IDatabaseSchemaLoader SetParameterDbType(DbParameter, String, String) Declaration public void SetParameterDbType(DbParameter parameter, string tableName, string columnName) Parameters Type Name Description System.Data.Common.DbParameter parameter System.String tableName System.String columnName SupportsPrepareCommand() Returns, if provider supports preparing of command ( System.Data.Common.DbCommand.Prepare ). Declaration public virtual bool SupportsPrepareCommand() Returns Type Description System.Boolean Returns true . Implements IQueryProvider See Also IQueryProvider"
  },
  "api/Kros.KORM.Query.Providers.html": {
    "href": "api/Kros.KORM.Query.Providers.html",
    "title": "Namespace Kros.KORM.Query.Providers | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Query.Providers Classes LimitOffsetDataReader Data reader over some other System.Data.IDataReader . It can iterate just specified number of rows ( Limit ) and skip some rows at the begining ( Offset ). SqlServerSqlExpressionVisitorFactory Interfaces IDataReaderEnvelope Envelope over some other inner System.Data.IDataReader . Implementation can introduce own logic how to iterate over inner reader."
  },
  "api/Kros.KORM.Helper.ILogger.html": {
    "href": "api/Kros.KORM.Helper.ILogger.html",
    "title": "Interface ILogger | Kros.KORM",
    "keywords": "Interface ILogger Interface, which describe logger. Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public interface ILogger Methods LogCommand(IDbCommand) Logs the command. Declaration void LogCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command."
  },
  "api/Kros.KORM.html": {
    "href": "api/Kros.KORM.html",
    "title": "Namespace Kros.KORM | Kros.KORM",
    "keywords": "Namespace Kros.KORM Classes Database Represent access to ORM features. For executing query and materializing models see: IDatabase IQuery<T> Interfaces IDatabase Interface, which describe class for access to ORM features. For executing query and materializing models see: IDatabase IQuery<T>"
  },
  "api/Kros.KORM.Query.Sql.QueryInfo.html": {
    "href": "api/Kros.KORM.Query.Sql.QueryInfo.html",
    "title": "Class QueryInfo | Kros.KORM",
    "keywords": "Class QueryInfo Information about SQL query generated by ISqlExpressionVisitor . Inheritance System.Object QueryInfo Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public class QueryInfo Remarks QueryInfo contains SQL query itself ( Query ) and may also contain reader for that query. Reader is uset in situations where database engine cannot handle query correctly. For example when offset is used ( Skip method in Linq), SQL Server older than 2008 is not able to ally it. In this case, query itself does not know about limit, but special reader is created ( LimitOffsetDataReader , which will skip first N rows manually. Constructors QueryInfo(String) Creates an instance with specified query . Declaration public QueryInfo(string query) Parameters Type Name Description System.String query SQL query. QueryInfo(String, IDataReaderEnvelope) Creates an instance with specified query and reader . Declaration public QueryInfo(string query, IDataReaderEnvelope reader) Parameters Type Name Description System.String query SQL query. IDataReaderEnvelope reader Reader used for query, if database engine itself cannot handle query itself. Properties Query SQL query. Declaration public string Query { get; } Property Value Type Description System.String Reader Reader used for query, if database engine itself cannot handle query itself. Declaration public IDataReaderEnvelope Reader { get; } Property Value Type Description IDataReaderEnvelope"
  },
  "api/Kros.KORM.IDatabase.html": {
    "href": "api/Kros.KORM.IDatabase.html",
    "title": "Interface IDatabase | Kros.KORM",
    "keywords": "Interface IDatabase Interface, which describe class for access to ORM features. For executing query and materializing models see: IDatabase IQuery<T> Namespace : Kros.KORM Assembly : Kros.KORM.dll Syntax public interface IDatabase : IDisposable Examples var people = database.ModelBuilder.Materialize<Person>(dataTable); foreach (var person in people) { Console.WriteLine(person.FirstName); } Properties DbProviderFactory Returns DbProviderFactory for current provider. Declaration DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory ModelBuilder Gets the model builder for materializing data from ado to models. Declaration IModelBuilder ModelBuilder { get; } Property Value Type Description IModelBuilder Examples var people = database.ModelBuilder.Materialize<Person>(dataTable); foreach (var person in people) { Console.WriteLine(person.FirstName); } var people = database.Query<Person>() .Select(\"p.Id\", \"FirstName\", \"LastName\", \"PostCode\") .From(\"Person JOIN Address ON (Person.AddressId = Address.Id)\") .Where(\"Age > @1\", 18); foreach (var person in people) { Console.WriteLine(person.FirstName); } Methods BeginTransaction() Begins the transaction. Declaration ITransaction BeginTransaction() Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. Examples using (var transaction = database.BeginTransaction()) { var invoicesDbSet = database.Query<Invoice>().AsDbSet(); var itemsDbSet = database.Query<Item>().AsDbSet(); try { invoicesDbSet.Add(invoices); invoicesDbSet.CommitChanges(); itemsDbSet.Add(items); itemsDbSet.CommitChanges(); transaction.Commit(); } catch { transaction.Rollback(); } } BeginTransaction(IsolationLevel) Begins the transaction using the specified isolation level. Declaration ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The database isolation level with which the underlying store transaction will be created. Returns Type Description ITransaction ITransaction wrapping access to the underlying store's transaction object. Examples using (var transaction = database.BeginTransaction(IsolationLevel.Chaos)) { var invoicesDbSet = database.Query<Invoice>().AsDbSet(); var itemsDbSet = database.Query<Item>().AsDbSet(); try { invoicesDbSet.Add(invoices); invoicesDbSet.CommitChanges(); itemsDbSet.Add(items); itemsDbSet.CommitChanges(); transaction.Commit(); } catch { transaction.Rollback(); } } CreateBulkInsert() Creates instance of Kros.Data.BulkActions.IBulkInsert . Declaration IBulkInsert CreateBulkInsert() Returns Type Description Kros.Data.BulkActions.IBulkInsert Instance of Kros.Data.BulkActions.IBulkInsert . CreateBulkUpdate() Creates instance of Kros.Data.BulkActions.IBulkUpdate . Declaration IBulkUpdate CreateBulkUpdate() Returns Type Description Kros.Data.BulkActions.IBulkUpdate Instance of Kros.Data.BulkActions.IBulkUpdate . ExecuteNonQuery(String) Executes arbitrary query. Declaration int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQuery(String, CommandParameterCollection) Executes arbitrary query with parameters. Declaration int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Int32 Number of affected rows. ExecuteNonQueryAsync(String) Asynchronously executes arbitrary query. Declaration Task<int> ExecuteNonQueryAsync(string query) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A task that represents the asynchronous operation. The task result contains the numbers of affected rows. ExecuteNonQueryAsync(String, CommandParameterCollection) Asynchronously executes arbitrary query with parameters. Declaration Task<int> ExecuteNonQueryAsync(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query Arbitrary SQL query. It should not be SELECT query. CommandParameterCollection parameters The query parameters. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A task that represents the asynchronous operation. The task result contains the numbers of affected rows. ExecuteScalar(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration string ExecuteScalar(string query) Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration string ExecuteScalar(string query, params object[] args) Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar<TResult>(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration TResult? ExecuteScalar<TResult>(string query) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteScalar<TResult>(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration TResult? ExecuteScalar<TResult>(string query, params object[] args) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String) Executes the stored procedure. Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. Returns Type Description TResult Result of the stored procedure. Type Parameters Name Description TResult The type of the result. ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Executes the stored procedure with parameters. Declaration TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName Name of the stored procedure. CommandParameterCollection parameters The stored procedure parameters. Returns Type Description TResult Result of the stored procedure. Type Parameters Name Description TResult The type of the result. InitDatabaseForIdGenerator() Initializes database for using ID generator. Initialization can mean creating necessary table and stored procedure. Declaration void InitDatabaseForIdGenerator() Query<T>() Gets the query builder for T creating and executing query for obtains models. Declaration IQuery<T> Query<T>() Returns Type Description IQuery <T> Query builder. Type Parameters Name Description T Type of model, for which querying."
  },
  "api/Kros.KORM.Migrations.Providers.ScriptInfo.html": {
    "href": "api/Kros.KORM.Migrations.Providers.ScriptInfo.html",
    "title": "Class ScriptInfo | Kros.KORM",
    "keywords": "Class ScriptInfo Information about migration script. Inheritance System.Object ScriptInfo Namespace : Kros.KORM.Migrations.Providers Assembly : Kros.KORM.dll Syntax public class ScriptInfo Constructors ScriptInfo(IMigrationScriptsProvider) Ctor. Declaration public ScriptInfo(IMigrationScriptsProvider provider) Parameters Type Name Description IMigrationScriptsProvider provider Migration scripts provider. Properties Id Migration Id. Declaration public long Id { get; set; } Property Value Type Description System.Int64 Name Name of migration script. Declaration public string Name { get; set; } Property Value Type Description System.String Path Path to migration script. Declaration public string Path { get; set; } Property Value Type Description System.String Methods GetScriptAsync() Get script content. Declaration public Task<string> GetScriptAsync() Returns Type Description System.Threading.Tasks.Task < System.String > Script content. ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.KORM.Query.SqlServerQueryProvider.html": {
    "href": "api/Kros.KORM.Query.SqlServerQueryProvider.html",
    "title": "Class SqlServerQueryProvider | Kros.KORM",
    "keywords": "Class SqlServerQueryProvider Provider, which know execute query for Sql Server. Inheritance System.Object QueryProvider SqlServerQueryProvider Implements IQueryProvider Inherited Members QueryProvider.SupportsPrepareCommand() QueryProvider.SetParameterDbType(DbParameter, String, String) QueryProvider.Execute<T>(IQuery<T>) QueryProvider.ExecuteScalar<T>(IQuery<T>) QueryProvider.ExecuteInTransactionAsync(Func<Task>) QueryProvider.ExecuteNonQueryCommand(IDbCommand) QueryProvider.ExecuteNonQueryCommandAsync(DbCommand) QueryProvider.ExecuteNonQuery(String) QueryProvider.ExecuteNonQuery(String, CommandParameterCollection) QueryProvider.ExecuteNonQueryAsync(String) QueryProvider.ExecuteNonQueryAsync(String, CommandParameterCollection) QueryProvider.ExecuteStoredProcedure<TResult>(String) QueryProvider.ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) QueryProvider.GetCommandForCurrentTransaction() QueryProvider.BeginTransaction(IsolationLevel) QueryProvider.CreateIdGenerator(String, Int32) QueryProvider.CreateQuery(Expression) QueryProvider.CreateQuery<TElement>(Expression) QueryProvider.Execute(Expression) QueryProvider.Execute<TResult>(Expression) QueryProvider.GetCurrentTransaction() QueryProvider.ConnectionString QueryProvider.IsExternalConnection QueryProvider.Connection QueryProvider.Dispose(Boolean) QueryProvider.Dispose() Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class SqlServerQueryProvider : QueryProvider, IQueryProvider, IQueryProvider, IDisposable Constructors SqlServerQueryProvider(ConnectionStringSettings, ISqlExpressionVisitorFactory, IModelBuilder, ILogger) Initializes a new instance of the SqlServerQueryProvider class. Declaration public SqlServerQueryProvider(ConnectionStringSettings connectionString, ISqlExpressionVisitorFactory sqlGeneratorFactory, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string settings. ISqlExpressionVisitorFactory sqlGeneratorFactory The SQL generator factory. IModelBuilder modelBuilder The model builder. ILogger logger The logger. SqlServerQueryProvider(DbConnection, ISqlExpressionVisitorFactory, IModelBuilder, ILogger) Initializes a new instance of the QueryProvider class. Declaration public SqlServerQueryProvider(DbConnection connection, ISqlExpressionVisitorFactory sqlGeneratorFactory, IModelBuilder modelBuilder, ILogger logger) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. ISqlExpressionVisitorFactory sqlGeneratorFactory The SQL generator factory. IModelBuilder modelBuilder The model builder. ILogger logger The logger. Properties DbProviderFactory Returns DbProviderFactory for current provider. Declaration public override DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory Overrides QueryProvider.DbProviderFactory Methods CreateBulkInsert() Creates instance of Kros.Data.BulkActions.IBulkInsert . Declaration public override IBulkInsert CreateBulkInsert() Returns Type Description Kros.Data.BulkActions.IBulkInsert Instance of Kros.Data.BulkActions.IBulkInsert . Overrides QueryProvider.CreateBulkInsert() CreateBulkUpdate() Creates instance of Kros.Data.BulkActions.IBulkUpdate . Declaration public override IBulkUpdate CreateBulkUpdate() Returns Type Description Kros.Data.BulkActions.IBulkUpdate Instance of Kros.Data.BulkActions.IBulkUpdate . Overrides QueryProvider.CreateBulkUpdate() GetSchemaLoader() Returns instance of Kros.Data.Schema.SqlServer.SqlServerSchemaLoader . Declaration protected override IDatabaseSchemaLoader GetSchemaLoader() Returns Type Description Kros.Data.Schema.IDatabaseSchemaLoader Overrides QueryProvider.GetSchemaLoader() Implements IQueryProvider See Also QueryProvider"
  },
  "api/Kros.KORM.Query.Sql.html": {
    "href": "api/Kros.KORM.Query.Sql.html",
    "title": "Namespace Kros.KORM.Query.Sql | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Query.Sql Classes DefaultQuerySqlGenerator Default sql query visitor for generating SELECT command. DefaultQuerySqlGenerator.Parameters Class which help with Linq query parameters. ParameterExtractingExpressionVisitor Class for extracting parameters from Expression. QueryInfo Information about SQL query generated by ISqlExpressionVisitor . SqlServer2008SqlGenerator SQL query generator for SQL Server 2008 and newer. SqlServer2012SqlGenerator SQL query generator for SQL Server 2012 and newer. Structs RawSqlString A string representing a raw SQL query. This type enables overload resolution between the regular and interpolated SQL string query. Interfaces ISqlExpressionVisitor Interface, which describe visitor for genereting sql select command. ISqlExpressionVisitorFactory Factory for creating ISqlExpressionVisitor implementations for database connection. Enums DefaultQuerySqlGenerator.OrderType Order type."
  },
  "api/Kros.KORM.Query.Providers.SqlServerSqlExpressionVisitorFactory.html": {
    "href": "api/Kros.KORM.Query.Providers.SqlServerSqlExpressionVisitorFactory.html",
    "title": "Class SqlServerSqlExpressionVisitorFactory | Kros.KORM",
    "keywords": "Class SqlServerSqlExpressionVisitorFactory Inheritance System.Object SqlServerSqlExpressionVisitorFactory Implements ISqlExpressionVisitorFactory Namespace : Kros.KORM.Query.Providers Assembly : Kros.KORM.dll Syntax public class SqlServerSqlExpressionVisitorFactory : ISqlExpressionVisitorFactory Constructors SqlServerSqlExpressionVisitorFactory(IDatabaseMapper) Creates an instance with specified database mapper databaseMapper . Declaration public SqlServerSqlExpressionVisitorFactory(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper Database mapper. Methods CreateVisitor(IDbConnection) Creates an ISqlExpressionVisitor based on version of SQL server connection . Declaration public ISqlExpressionVisitor CreateVisitor(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Database connection. Returns Type Description ISqlExpressionVisitor Implements ISqlExpressionVisitorFactory"
  },
  "api/Kros.KORM.Query.Providers.LimitOffsetDataReader.html": {
    "href": "api/Kros.KORM.Query.Providers.LimitOffsetDataReader.html",
    "title": "Class LimitOffsetDataReader | Kros.KORM",
    "keywords": "Class LimitOffsetDataReader Data reader over some other System.Data.IDataReader . It can iterate just specified number of rows ( Limit ) and skip some rows at the begining ( Offset ). Inheritance System.Object LimitOffsetDataReader Implements IDataReaderEnvelope Namespace : Kros.KORM.Query.Providers Assembly : Kros.KORM.dll Syntax public class LimitOffsetDataReader : IDataReaderEnvelope, IDataReader, IDisposable, IDataRecord Remarks So for example if inner reader has 20 rows (iterations) and Limit is set to 3 and Offset is set to 5, LimitOffsetDataReader will iterate just over rows 6, 7 and 8 (rows are counted from 1). So it will skip first 5 rows and returns just next 3 of them. Constructors LimitOffsetDataReader(Int32) Creates an instance wit specified limit . Offset is set to 0. Declaration public LimitOffsetDataReader(int limit) Parameters Type Name Description System.Int32 limit Maximum number of rows returned. If value is 0, number of rows not limited. LimitOffsetDataReader(Int32, Int32) Creates an instance wit specified limit and offset . Declaration public LimitOffsetDataReader(int limit, int offset) Parameters Type Name Description System.Int32 limit Maximum number of rows returned. If value is 0, number of rows not limited. System.Int32 offset Number of rows to skip from the begining. Properties Depth Declaration public int Depth { get; } Property Value Type Description System.Int32 FieldCount Declaration public int FieldCount { get; } Property Value Type Description System.Int32 IsClosed Declaration public bool IsClosed { get; } Property Value Type Description System.Boolean Item[Int32] Declaration public object this[int i] { get; } Parameters Type Name Description System.Int32 i Property Value Type Description System.Object Item[String] Declaration public object this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description System.Object Limit Maximum number of rows returned. If value is 0, number of rows not limited. Declaration public int Limit { get; } Property Value Type Description System.Int32 Offset Number of rows to skip from the begining. Declaration public int Offset { get; } Property Value Type Description System.Int32 RecordsAffected Declaration public int RecordsAffected { get; } Property Value Type Description System.Int32 Methods Close() Declaration public void Close() Dispose() Declaration public void Dispose() GetBoolean(Int32) Declaration public bool GetBoolean(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Boolean GetByte(Int32) Declaration public byte GetByte(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Byte GetBytes(Int32, Int64, Byte[], Int32, Int32) Declaration public long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i System.Int64 fieldOffset System.Byte [] buffer System.Int32 bufferoffset System.Int32 length Returns Type Description System.Int64 GetData(Int32) Declaration public IDataReader GetData(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Data.IDataReader GetDataTypeName(Int32) Declaration public string GetDataTypeName(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String GetDateTime(Int32) Declaration public DateTime GetDateTime(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.DateTime GetDecimal(Int32) Declaration public decimal GetDecimal(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Decimal GetDouble(Int32) Declaration public double GetDouble(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Double GetFieldType(Int32) Declaration public Type GetFieldType(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Type GetFloat(Int32) Declaration public float GetFloat(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Single GetGuid(Int32) Declaration public Guid GetGuid(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Guid GetChar(Int32) Declaration public char GetChar(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Char GetChars(Int32, Int64, Char[], Int32, Int32) Declaration public long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i System.Int64 fieldoffset System.Char [] buffer System.Int32 bufferoffset System.Int32 length Returns Type Description System.Int64 GetInt16(Int32) Declaration public short GetInt16(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int16 GetInt32(Int32) Declaration public int GetInt32(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int32 GetInt64(Int32) Declaration public long GetInt64(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int64 GetName(Int32) Declaration public string GetName(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String GetOrdinal(String) Declaration public int GetOrdinal(string name) Parameters Type Name Description System.String name Returns Type Description System.Int32 GetSchemaTable() Declaration public DataTable GetSchemaTable() Returns Type Description System.Data.DataTable GetString(Int32) Declaration public string GetString(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String GetValue(Int32) Declaration public object GetValue(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Object GetValues(Object[]) Declaration public int GetValues(object[] values) Parameters Type Name Description System.Object [] values Returns Type Description System.Int32 IsDBNull(Int32) Declaration public bool IsDBNull(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Boolean NextResult() Declaration public bool NextResult() Returns Type Description System.Boolean Read() Declaration public bool Read() Returns Type Description System.Boolean SetInnerReader(IDataReader) Sets the inner reader, to which Limit and Offset are applied. Inner reader is closed when this reader is closed. Declaration public void SetInnerReader(IDataReader innerReader) Parameters Type Name Description System.Data.IDataReader innerReader Inner reader. Exceptions Type Condition System.ArgumentNullException Value of innerReader is null . System.InvalidOperationException Inner reader is already set. Implements IDataReaderEnvelope"
  },
  "api/Kros.KORM.Query.IQueryBase-1.html": {
    "href": "api/Kros.KORM.Query.IQueryBase-1.html",
    "title": "Interface IQueryBase<T> | Kros.KORM",
    "keywords": "Interface IQueryBase<T> Interface, which describe class for executing query. Instance which implement this interface can be used for creating and executing query for T model. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQueryBase<T> : IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Type of model class. Methods AsDbSet() Returns the collection of all entities that can be queried from the database. Declaration IDbSet<T> AsDbSet() Returns Type Description IDbSet <T> DbSet<T> . ExecuteScalar() Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration object ExecuteScalar() Returns Type Description System.Object The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Examples var id = (int)database.Query<Person>() .Select(p => new { p.Id }) .Where(\"FirstName = @p1 AND LastName = @p2\", \"Michael\", \"Štúr\") .ExecuteScalar(); ExecuteScalar<TRet>() Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration TRet? ExecuteScalar<TRet>() where TRet : struct Returns Type Description System.Nullable <TRet> The first column of the first row in the result set as nullable type of TRet. If the result set is empty, then HasValue is false. Returns a maximum of 2033 characters. Type Parameters Name Description TRet Return type. Examples var id = (int)database.Query<Person>() .Select(p => new { p.Id }) .Where(\"FirstName = @p1 AND LastName = @p2\", \"Michael\", \"Štúr\") .ExecuteScalar(); ExecuteStringScalar() Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration string ExecuteStringScalar() Returns Type Description System.String The first column of the first row in the result set as string, or null if the result set is empty. Returns a maximum of 2033 characters. Examples var id = (int)database.Query<Person>() .Select(p => new { p.Id }) .Where(\"FirstName = @p1 AND LastName = @p2\", \"Michael\", \"Štúr\") .ExecuteScalar();"
  },
  "api/Kros.KORM.Query.Expressions.SqlExpression.html": {
    "href": "api/Kros.KORM.Query.Expressions.SqlExpression.html",
    "title": "Class SqlExpression | Kros.KORM",
    "keywords": "Class SqlExpression Expression, which represent sql query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression SqlExpression Inherited Members ArgsExpression.Sql ArgsExpression.Parameters QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class SqlExpression : ArgsExpression Constructors SqlExpression(RawSqlString, Object[]) Initializes a new instance of the SqlExpression class. Declaration public SqlExpression(RawSqlString sqlQuery, params object[] args) Parameters Type Name Description RawSqlString sqlQuery The SQL query. System.Object [] args Where args. Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM.CommandGenerator.ICommandGenerator-1.html": {
    "href": "api/Kros.KORM.CommandGenerator.ICommandGenerator-1.html",
    "title": "Interface ICommandGenerator<T> | Kros.KORM",
    "keywords": "Interface ICommandGenerator<T> Iterface, which describes generating single-table commands that are used to commit changes made to a DbSet with the associated database. Namespace : Kros.KORM.CommandGenerator Assembly : Kros.KORM.dll Syntax public interface ICommandGenerator<T> Type Parameters Name Description T Methods FillCommand(DbCommand, T) Fills command's parameters with values from item . Declaration void FillCommand(DbCommand command, T item) Parameters Type Name Description System.Data.Common.DbCommand command Command which parameters are filled. T item Item, from which command is filled. Exceptions Type Condition System.ArgumentNullException Either command or item is null . GetColumnValue(ColumnInfo, T) Gets value from the specific column. Declaration object GetColumnValue(ColumnInfo columnInfo, T item) Parameters Type Name Description ColumnInfo columnInfo The specific column. T item The item whose value will be returned. Returns Type Description System.Object Value from the specific column. GetDeleteCommand() Gets the automatically generated DbCommand object required to perform deletions on the database. Declaration DbCommand GetDeleteCommand() Returns Type Description System.Data.Common.DbCommand Delete command. Exceptions Type Condition MissingPrimaryKeyException GetDeleteCommand doesn't supported when entity doesn't have primary key. GetDeleteCommands(IEnumerable<T>) Gets the automatically generated DbCommands object required to perform deletions on the database. Declaration IEnumerable<DbCommand> GetDeleteCommands(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items Type class of model collection. Returns Type Description System.Collections.Generic.IEnumerable < System.Data.Common.DbCommand > Delete command collection. Exceptions Type Condition MissingPrimaryKeyException GetDeleteCommands doesn't supported when entity doesn't have primary key. GetInsertCommand() Gets the automatically generated DbCommand object required to perform insertions on the database. Declaration DbCommand GetInsertCommand() Returns Type Description System.Data.Common.DbCommand Insert command. GetQueryColumns() Get columns for query. Declaration IEnumerable<ColumnInfo> GetQueryColumns() Returns Type Description System.Collections.Generic.IEnumerable < ColumnInfo > GetUpdateCommand() Gets the automatically generated DbCommand object required to perform updates on the database Declaration DbCommand GetUpdateCommand() Returns Type Description System.Data.Common.DbCommand Update command. Exceptions Type Condition MissingPrimaryKeyException GetUpdateCommand doesn't supported when entity doesn't have primary key."
  },
  "api/Kros.KORM.Query.Expressions.ColumnsExpression.html": {
    "href": "api/Kros.KORM.Query.Expressions.ColumnsExpression.html",
    "title": "Class ColumnsExpression | Kros.KORM",
    "keywords": "Class ColumnsExpression Expression which represent projection part of sql select. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ColumnsExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class ColumnsExpression : QueryExpression Constructors ColumnsExpression(String) Initializes a new instance of the ColumnsExpression class. Declaration public ColumnsExpression(string columns) Parameters Type Name Description System.String columns The columns part of sql. Remarks Columns are separate by , ColumnsExpression(String[]) Initializes a new instance of the ColumnsExpression class. Declaration public ColumnsExpression(params string[] columns) Parameters Type Name Description System.String [] columns The columns. Properties ColumnsPart Gets the columns part. Declaration public string ColumnsPart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) Create<T, TResult>(Func<T, TResult>, TableInfo) Creates the ColumnsExpression by selector. Declaration public static ColumnsExpression Create<T, TResult>(Func<T, TResult> selector, TableInfo tableInfo) Parameters Type Name Description System.Func <T, TResult> selector The selector. TableInfo tableInfo The table information. Returns Type Description ColumnsExpression ColumnsExpression Type Parameters Name Description T Type of model class. TResult The type of the result. See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM.Query.Expressions.OrderByExpression.html": {
    "href": "api/Kros.KORM.Query.Expressions.OrderByExpression.html",
    "title": "Class OrderByExpression | Kros.KORM",
    "keywords": "Class OrderByExpression Expression, which represent ORDER BY statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression OrderByExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class OrderByExpression : QueryExpression Constructors OrderByExpression(String) Initializes a new instance of the OrderByExpression class. Declaration public OrderByExpression(string orderBy) Parameters Type Name Description System.String orderBy The orderBy part of sql. Remarks Order by columns are separate by , OrderByExpression(String[]) Initializes a new instance of the OrderByExpression class. Declaration public OrderByExpression(params string[] columns) Parameters Type Name Description System.String [] columns The orderBy. Fields OrderByStatement The group by statement Declaration public const string OrderByStatement = \"ORDER BY\" Field Value Type Description System.String Properties OrderByPart Gets or sets the group by part. Declaration public string OrderByPart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM.Migrations.html": {
    "href": "api/Kros.KORM.Migrations.html",
    "title": "Namespace Kros.KORM.Migrations | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Migrations Classes MigrationOptions Migration options. MigrationsRunner Runner for execution database migrations. Interfaces IMigrationsRunner Interface which describe class for execution database migrations."
  },
  "api/Kros.KORM.Migrations.Providers.AssemblyMigrationScriptsProvider.html": {
    "href": "api/Kros.KORM.Migrations.Providers.AssemblyMigrationScriptsProvider.html",
    "title": "Class AssemblyMigrationScriptsProvider | Kros.KORM",
    "keywords": "Class AssemblyMigrationScriptsProvider Migration scripts provider, which load scripts from assembly. Inheritance System.Object AssemblyMigrationScriptsProvider Implements IMigrationScriptsProvider Namespace : Kros.KORM.Migrations.Providers Assembly : Kros.KORM.dll Syntax public class AssemblyMigrationScriptsProvider : IMigrationScriptsProvider Constructors AssemblyMigrationScriptsProvider(Assembly, String) Ctor. Declaration public AssemblyMigrationScriptsProvider(Assembly assembly, string resourceNamespace) Parameters Type Name Description System.Reflection.Assembly assembly Assembly, which contains embedded script resources. System.String resourceNamespace Full namespace, where are placed embedded scripts. Methods GetEntryAssemblyProvider() Create defaut AssemblyMigrationScriptsProvider , which load script from executing assembly. Declaration public static AssemblyMigrationScriptsProvider GetEntryAssemblyProvider() Returns Type Description AssemblyMigrationScriptsProvider AssemblyMigrationScriptsProvider . GetScriptAsync(ScriptInfo) Declaration public Task<string> GetScriptAsync(ScriptInfo scriptInfo) Parameters Type Name Description ScriptInfo scriptInfo Returns Type Description System.Threading.Tasks.Task < System.String > GetScripts() Declaration public IEnumerable<ScriptInfo> GetScripts() Returns Type Description System.Collections.Generic.IEnumerable < ScriptInfo > Implements IMigrationScriptsProvider"
  },
  "api/Kros.KORM.Metadata.DatabaseMapper.html": {
    "href": "api/Kros.KORM.Metadata.DatabaseMapper.html",
    "title": "Class DatabaseMapper | Kros.KORM",
    "keywords": "Class DatabaseMapper Mapper for database. Map object types to database informations. Inheritance System.Object DatabaseMapper Implements IDatabaseMapper Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class DatabaseMapper : IDatabaseMapper Constructors DatabaseMapper(IModelMapper) Initializes a new instance of the DatabaseMapper class. Declaration public DatabaseMapper(IModelMapper modelMapper) Parameters Type Name Description IModelMapper modelMapper The model mapper. Methods GetInjector<T>() Get property service injector. Declaration public IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information by model type. Declaration public TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Database table info for model. GetTableInfo<T>() Gets the table information by model type. Declaration public TableInfo GetTableInfo<T>() Returns Type Description TableInfo Database table info for model. Type Parameters Name Description T Model type. Implements IDatabaseMapper See Also IDatabaseMapper"
  },
  "api/Kros.KORM.Query.Expressions.GroupByExpression.html": {
    "href": "api/Kros.KORM.Query.Expressions.GroupByExpression.html",
    "title": "Class GroupByExpression | Kros.KORM",
    "keywords": "Class GroupByExpression Expression, which represent GROUP BY statement from sql select query. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression GroupByExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public class GroupByExpression : QueryExpression Constructors GroupByExpression(String) Initializes a new instance of the GroupByExpression class. Declaration public GroupByExpression(string groupBy) Parameters Type Name Description System.String groupBy The groupBy part of sql. Remarks Group by columns are separate by , GroupByExpression(String[]) Initializes a new instance of the GroupByExpression class. Declaration public GroupByExpression(params string[] groupBy) Parameters Type Name Description System.String [] groupBy The groupBy. Fields GroupByStatement The group by statement Declaration public const string GroupByStatement = \"GROUP BY\" Field Value Type Description System.String Properties GroupByPart Gets or sets the group by part. Declaration public string GroupByPart { get; } Property Value Type Description System.String Methods Accept(ExpressionVisitor) Dispatches to the specific visit method for this node type. For example, System.Linq.Expressions.MethodCallExpression calls the System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) . Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor The visitor to visit this node with. Returns Type Description System.Linq.Expressions.Expression The result of visiting this node. Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) Create<T, TResult>(Func<T, TResult>) Creates the GroupByExpression by selector. Declaration public static GroupByExpression Create<T, TResult>(Func<T, TResult> selector) where T : new() Parameters Type Name Description System.Func <T, TResult> selector The selector. Returns Type Description GroupByExpression GroupByExpression Type Parameters Name Description T Type of model class. TResult The type of the result. See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM.Migrations.Providers.html": {
    "href": "api/Kros.KORM.Migrations.Providers.html",
    "title": "Namespace Kros.KORM.Migrations.Providers | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Migrations.Providers Classes AssemblyMigrationScriptsProvider Migration scripts provider, which load scripts from assembly. FileMigrationScriptsProvider Migration scripts provider, which load scripts from disk. ScriptInfo Information about migration script. Interfaces IMigrationScriptsProvider Interface which describe provider for loading migration scripts."
  },
  "api/Kros.KORM.Metadata.Attribute.html": {
    "href": "api/Kros.KORM.Metadata.Attribute.html",
    "title": "Namespace Kros.KORM.Metadata.Attribute | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Metadata.Attribute Classes AliasAttribute Attribute which describe database name of property/class. ConverterAttribute Attribute for getting data converter. KeyAttribute Attribute, which describe property, which are part of primary key. NoMapAttribute Attribute, which describe property, which doesn't exist in database."
  },
  "api/Kros.KORM.Materializer.IModelBuilder.html": {
    "href": "api/Kros.KORM.Materializer.IModelBuilder.html",
    "title": "Interface IModelBuilder | Kros.KORM",
    "keywords": "Interface IModelBuilder Interface for ModelBuilder, which know materialize data from Ado to objects. Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public interface IModelBuilder Examples var people = database.ModelBuilder.Materialize<Person>(dataTable); foreach (var person in people) { Console.WriteLine(person.FirstName); } Methods Materialize<T>(DataRow) Materialize data from dataRow to instances of model type T . Declaration T Materialize<T>(DataRow dataRow) Parameters Type Name Description System.Data.DataRow dataRow Data row of the table. Returns Type Description T Model. Type Parameters Name Description T Type of model. Examples var person = database.ModelBuilder.Materialize<Person>(dataRow); Materialize<T>(DataTable) Materialize data from data table to instances of model type . Declaration IEnumerable<T> Materialize<T>(DataTable table) Parameters Type Name Description System.Data.DataTable table The table. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Examples var people = database.ModelBuilder.Materialize<Person>(reader); Materialize<T>(IDataReader) Materialize data from reader to instances of model type. Declaration IEnumerable<T> Materialize<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader The reader from which materialize data. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Remarks Doesn' call dispose over reader. Examples var people = database.ModelBuilder.Materialize<Person>(dataTable);"
  },
  "api/Kros.KORM.Query.Expressions.ArgsExpression.html": {
    "href": "api/Kros.KORM.Query.Expressions.ArgsExpression.html",
    "title": "Class ArgsExpression | Kros.KORM",
    "keywords": "Class ArgsExpression Base class for args expression. Inheritance System.Object System.Linq.Expressions.Expression QueryExpression ArgsExpression SqlExpression WhereExpression Inherited Members QueryExpression.NodeType QueryExpression.Type Namespace : Kros.KORM.Query.Expressions Assembly : Kros.KORM.dll Syntax public abstract class ArgsExpression : QueryExpression Properties Parameters Gets the parameters. Declaration public IEnumerable<object> Parameters { get; protected set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Object > Sql Sql. Declaration public string Sql { get; protected set; } Property Value Type Description System.String See Also System.Linq.Expressions.Expression"
  },
  "api/Kros.KORM.Migrations.Providers.IMigrationScriptsProvider.html": {
    "href": "api/Kros.KORM.Migrations.Providers.IMigrationScriptsProvider.html",
    "title": "Interface IMigrationScriptsProvider | Kros.KORM",
    "keywords": "Interface IMigrationScriptsProvider Interface which describe provider for loading migration scripts. Namespace : Kros.KORM.Migrations.Providers Assembly : Kros.KORM.dll Syntax public interface IMigrationScriptsProvider Methods GetScriptAsync(ScriptInfo) Get script content. Declaration Task<string> GetScriptAsync(ScriptInfo scriptInfo) Parameters Type Name Description ScriptInfo scriptInfo Script info. Returns Type Description System.Threading.Tasks.Task < System.String > Script content. GetScripts() Get script infos list. Declaration IEnumerable<ScriptInfo> GetScripts() Returns Type Description System.Collections.Generic.IEnumerable < ScriptInfo > Script infos."
  },
  "api/Kros.KORM.Metadata.html": {
    "href": "api/Kros.KORM.Metadata.html",
    "title": "Namespace Kros.KORM.Metadata | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Metadata Classes ColumnInfo Class, which represent information about column from database. ConventionModelMapper Model mapper, which know define convention for name mapping. DatabaseMapper Mapper for database. Map object types to database informations. TableInfo Class, which represent information about table from database Interfaces IDatabaseMapper Interface, which describe mapper for database. Map object types to database informations. IModelMapper Interface, which describe class for mapping database to model. Enums AutoIncrementMethodType Type of primary key auto increment method."
  },
  "api/Kros.KORM.Materializer.IMaterialize.html": {
    "href": "api/Kros.KORM.Materializer.IMaterialize.html",
    "title": "Interface IMaterialize | Kros.KORM",
    "keywords": "Interface IMaterialize Specifies that this object supports notification about materializing. Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public interface IMaterialize Methods OnAfterMaterialize(IDataRecord) Called when model is materialized. Declaration void OnAfterMaterialize(IDataRecord source) Parameters Type Name Description System.Data.IDataRecord source The source, which from was model materialized."
  },
  "api/Kros.KORM.Database.html": {
    "href": "api/Kros.KORM.Database.html",
    "title": "Class Database | Kros.KORM",
    "keywords": "Class Database Represent access to ORM features. For executing query and materializing models see: IDatabase IQuery<T> Inheritance System.Object Database Implements IDatabase Namespace : Kros.KORM Assembly : Kros.KORM.dll Syntax public class Database : IDatabase, IDisposable Constructors Database(ConnectionStringSettings) Initializes a new instance of the Database class. Declaration public Database(ConnectionStringSettings connectionString) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The active connection. Database(ConnectionStringSettings, IQueryProviderFactory) Initializes a new instance of the Database class. Declaration public Database(ConnectionStringSettings connectionString, IQueryProviderFactory queryProviderFactory) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string settings. IQueryProviderFactory queryProviderFactory The query provider factory, which know create query provider. Database(DbConnection) Initializes a new instance of the Database class. Declaration public Database(DbConnection activeConnection) Parameters Type Name Description System.Data.Common.DbConnection activeConnection The active connection. Database(DbConnection, IModelMapper) Initializes a new instance of the Database class. Declaration public Database(DbConnection activeConnection, IModelMapper modelMapper) Parameters Type Name Description System.Data.Common.DbConnection activeConnection The active connection. IModelMapper modelMapper Model mapper, which will be used for mapping Object to Relation database. Database(DbConnection, IQueryProviderFactory) Initializes a new instance of the Database class. Declaration public Database(DbConnection activeConnection, IQueryProviderFactory queryProviderFactory) Parameters Type Name Description System.Data.Common.DbConnection activeConnection The active connection. IQueryProviderFactory queryProviderFactory The query provider factory, which know create query provider. Database(String, String) Initializes a new instance of the Database class. Declaration public Database(string connectionString, string adoClientName) Parameters Type Name Description System.String connectionString Connection string. System.String adoClientName Ado client name. (System.Data.SqlClient/System.Data.OleDb) Properties DatabaseMapper Gets the database mapper, which has mapping information for all tables in database Declaration public static IDatabaseMapper DatabaseMapper { get; } Property Value Type Description IDatabaseMapper DbProviderFactory Returns DbProviderFactory for current provider. Declaration public DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory DefaultModelFactory Gets or sets the default model factory, which will be used for instanting and filling object from Ado. Declaration public static IModelFactory DefaultModelFactory { get; set; } Property Value Type Description IModelFactory The default model factory. DefaultModelMapper Gets or sets the default model mapper, which will be used for mapping Object to Relation database. Declaration public static IModelMapper DefaultModelMapper { get; set; } Property Value Type Description IModelMapper The default model mapper. Log Gets or sets the logging delegate. Declaration public static Action<string> Log { get; set; } Property Value Type Description System.Action < System.String > ModelBuilder Gets the model builder for materializing data from ado to models. Declaration public IModelBuilder ModelBuilder { get; } Property Value Type Description IModelBuilder Methods BeginTransaction() Declaration public ITransaction BeginTransaction() Returns Type Description ITransaction BeginTransaction(IsolationLevel) Declaration public ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Returns Type Description ITransaction CreateBulkInsert() Creates instance of Kros.Data.BulkActions.IBulkInsert . Declaration public IBulkInsert CreateBulkInsert() Returns Type Description Kros.Data.BulkActions.IBulkInsert Instance of Kros.Data.BulkActions.IBulkInsert . CreateBulkUpdate() Creates instance of Kros.Data.BulkActions.IBulkUpdate . Declaration public IBulkUpdate CreateBulkUpdate() Returns Type Description Kros.Data.BulkActions.IBulkUpdate Instance of Kros.Data.BulkActions.IBulkUpdate . Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing ExecuteNonQuery(String) Declaration public int ExecuteNonQuery(string query) Parameters Type Name Description System.String query Returns Type Description System.Int32 ExecuteNonQuery(String, CommandParameterCollection) Declaration public int ExecuteNonQuery(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query CommandParameterCollection parameters Returns Type Description System.Int32 ExecuteNonQueryAsync(String) Declaration public Task<int> ExecuteNonQueryAsync(string query) Parameters Type Name Description System.String query Returns Type Description System.Threading.Tasks.Task < System.Int32 > ExecuteNonQueryAsync(String, CommandParameterCollection) Declaration public Task<int> ExecuteNonQueryAsync(string query, CommandParameterCollection parameters) Parameters Type Name Description System.String query CommandParameterCollection parameters Returns Type Description System.Threading.Tasks.Task < System.Int32 > ExecuteScalar(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public string ExecuteScalar(string query) Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public string ExecuteScalar(string query, params object[] args) Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.String The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. ExecuteScalar<TResult>(String) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public TResult? ExecuteScalar<TResult>(string query) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteScalar<TResult>(String, Object[]) Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored. Declaration public TResult? ExecuteScalar<TResult>(string query, params object[] args) where TResult : struct Parameters Type Name Description System.String query Arbitrary SQL query. System.Object [] args The query parameters. Returns Type Description System.Nullable <TResult> The first column of the first row in the result set, or null if the result set is empty. Returns a maximum of 2033 characters. Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName) Parameters Type Name Description System.String storedProcedureName Returns Type Description TResult Type Parameters Name Description TResult ExecuteStoredProcedure<TResult>(String, CommandParameterCollection) Declaration public TResult ExecuteStoredProcedure<TResult>(string storedProcedureName, CommandParameterCollection parameters) Parameters Type Name Description System.String storedProcedureName CommandParameterCollection parameters Returns Type Description TResult Type Parameters Name Description TResult InitDatabaseForIdGenerator() Declaration public void InitDatabaseForIdGenerator() Query<T>() Gets the query builder for T creating and executing query for obtains models. Declaration public IQuery<T> Query<T>() Returns Type Description IQuery <T> Type Parameters Name Description T Type of model, for which querying. Implements IDatabase See Also IModelBuilder"
  },
  "api/Kros.KORM.Materializer.IModelFactory.html": {
    "href": "api/Kros.KORM.Materializer.IModelFactory.html",
    "title": "Interface IModelFactory | Kros.KORM",
    "keywords": "Interface IModelFactory Interface for factory, which know materialize model from database. Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public interface IModelFactory Methods GetFactory<T>(IDataReader) Gets the factory for creating and filling model. Declaration Func<IDataReader, T> GetFactory<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Reader from fill model. Returns Type Description System.Func < System.Data.IDataReader , T> Factory for creating and filling model. Type Parameters Name Description T Type of model class."
  },
  "api/Kros.KORM.Helper.html": {
    "href": "api/Kros.KORM.Helper.html",
    "title": "Namespace Kros.KORM.Helper | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Helper Classes Logger Logger for logging provider activities. MethodName<T> Helper for getting method name. PropertyName<P> Helper for getting property name from class. Interfaces ILogger Interface, which describe logger."
  },
  "api/Kros.KORM.Helper.Logger.html": {
    "href": "api/Kros.KORM.Helper.Logger.html",
    "title": "Class Logger | Kros.KORM",
    "keywords": "Class Logger Logger for logging provider activities. Inheritance System.Object Logger Implements ILogger Namespace : Kros.KORM.Helper Assembly : Kros.KORM.dll Syntax public class Logger : ILogger Methods LogCommand(IDbCommand) Logs the command. Declaration public void LogCommand(IDbCommand command) Parameters Type Name Description System.Data.IDbCommand command The command. Implements ILogger See Also ILogger"
  },
  "api/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerable-1.html": {
    "href": "api/Kros.KORM.Materializer.ModelBuilder.ModelBuilderEnumerable-1.html",
    "title": "Class ModelBuilder.ModelBuilderEnumerable<T> | Kros.KORM",
    "keywords": "Class ModelBuilder.ModelBuilderEnumerable<T> Enumerable which support iteration over the materialized models. Inheritance System.Object ModelBuilder.ModelBuilderEnumerable<T> Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class ModelBuilderEnumerable<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Methods GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> A System.Collections.Generic.IEnumerator<T> that can be used to iterate through the collection. See Also System.Collections.Generic.IEnumerable <T>"
  },
  "api/Kros.KORM.Converter.html": {
    "href": "api/Kros.KORM.Converter.html",
    "title": "Namespace Kros.KORM.Converter | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Converter Interfaces IConverter Interface, which describe converter, which know convert data from db to object and reverse."
  },
  "api/Kros.KORM.Materializer.DynamicMethodModelFactory.html": {
    "href": "api/Kros.KORM.Materializer.DynamicMethodModelFactory.html",
    "title": "Class DynamicMethodModelFactory | Kros.KORM",
    "keywords": "Class DynamicMethodModelFactory Modelfactory, which materialize model by dynamic method delegates. Inheritance System.Object DynamicMethodModelFactory Implements IModelFactory Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class DynamicMethodModelFactory : IModelFactory Constructors DynamicMethodModelFactory(IDatabaseMapper) Initializes a new instance of the DynamicMethodModelFactory class. Declaration public DynamicMethodModelFactory(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper The database mapper. Exceptions Type Condition System.ArgumentNullException databaseMapper;Argument 'databaseMapper' is required. Methods GetFactory<T>(IDataReader) Gets the factory for creating and filling model. Declaration public Func<IDataReader, T> GetFactory<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Reader from fill model. Returns Type Description System.Func < System.Data.IDataReader , T> Factory for creating and filling model. Type Parameters Name Description T Type of model class. Exceptions Type Condition System.ArgumentNullException reader;Argument 'reader' is required. Implements IModelFactory See Also IModelFactory"
  },
  "api/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.html": {
    "href": "api/Kros.KORM.Query.Sql.DefaultQuerySqlGenerator.html",
    "title": "Class DefaultQuerySqlGenerator | Kros.KORM",
    "keywords": "Class DefaultQuerySqlGenerator Default sql query visitor for generating SELECT command. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor DefaultQuerySqlGenerator SqlServer2008SqlGenerator SqlServer2012SqlGenerator Implements ISqlExpressionVisitor Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public class DefaultQuerySqlGenerator : ExpressionVisitor, ISqlExpressionVisitor Constructors DefaultQuerySqlGenerator(IDatabaseMapper) Constructor. Declaration public DefaultQuerySqlGenerator(IDatabaseMapper databaseMapper) Parameters Type Name Description IDatabaseMapper databaseMapper Database mapper. Properties ColumnsPosition Position in the SQL Query, where columns part ends. Some other columns can be added here. Declaration protected int ColumnsPosition { get; } Property Value Type Description System.Int32 DatabaseMapper Gets the database mapper. Declaration protected IDatabaseMapper DatabaseMapper { get; } Property Value Type Description IDatabaseMapper LinqParameters Gets the linq query parameters. Declaration protected DefaultQuerySqlGenerator.Parameters LinqParameters { get; } Property Value Type Description DefaultQuerySqlGenerator.Parameters LinqStringBuilder Gets the linq string builder. Declaration protected StringBuilder LinqStringBuilder { get; } Property Value Type Description System.Text.StringBuilder Orders List of ORDER BY parts for the query. Declaration protected List<string> Orders { get; } Property Value Type Description System.Collections.Generic.List < System.String > SelectExpression Get root select expression. Declaration protected SelectExpression SelectExpression { get; } Property Value Type Description SelectExpression Skip Offset - the number of rows to skip. Declaration protected int Skip { get; } Property Value Type Description System.Int32 SqlBuilder General builder for the SQL query. Declaration protected StringBuilder SqlBuilder { get; } Property Value Type Description System.Text.StringBuilder Top Limit - the maximum number of rows to return. Declaration protected int Top { get; } Property Value Type Description System.Int32 TopPosition Position in the SQL query, where TOP clause belongs. Declaration protected int TopPosition { get; } Property Value Type Description System.Int32 Methods AddLimitAndOffset() Adds limit (Top) and offset (Skip) clauses to the query. Declaration protected virtual void AddLimitAndOffset() AddOrderBy() Adds ORDER BY clause to the query. Declaration protected virtual void AddOrderBy() BindAnyCondition(String) Adds any method to query. Declaration protected virtual string BindAnyCondition(string existsCondition) Parameters Type Name Description System.String existsCondition Returns Type Description System.String BindContains(MethodCallExpression) Binds the System.String.Contains(System.String) method. Declaration protected virtual Expression BindContains(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindEndWith(MethodCallExpression) Binds the System.String.EndsWith(System.String) method. Declaration protected virtual Expression BindEndWith(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindIsNullOrEmpty(MethodCallExpression) Binds the System.String.IsNullOrEmpty(System.String) method. Declaration protected virtual Expression BindIsNullOrEmpty(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindReplace(MethodCallExpression) Binds the System.String.Replace(System.String,System.String) method. Declaration protected virtual Expression BindReplace(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindStartWith(MethodCallExpression) Binds the System.String.StartsWith(System.String) method. Declaration protected virtual Expression BindStartWith(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindSubstring(MethodCallExpression) Binds the System.String.Substring(System.Int32) method. Declaration protected virtual Expression BindSubstring(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindToLower(MethodCallExpression) Binds to System.String.ToLower method. Declaration protected virtual Expression BindToLower(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindToUpper(MethodCallExpression) Binds to System.String.ToUpper method. Declaration protected virtual Expression BindToUpper(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression BindTrim(MethodCallExpression) Binds the System.String.Trim method. Declaration protected virtual Expression BindTrim(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression CreateOrderByString() Creates ORDER BY string. Declaration protected string CreateOrderByString() Returns Type Description System.String String. CreateQueryReader() Creates a reader over data, for example to manually apply limit and offset if the database does not support it. Declaration protected virtual IDataReaderEnvelope CreateQueryReader() Returns Type Description IDataReaderEnvelope Implementation of IDataReaderEnvelope or null . GenerateSql(Expression) Generates the SQL from expression. Declaration public virtual QueryInfo GenerateSql(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression The expression. Returns Type Description QueryInfo SQL select command text. GetOperator(BinaryExpression) Gets the operator. Declaration protected virtual string GetOperator(BinaryExpression expression) Parameters Type Name Description System.Linq.Expressions.BinaryExpression expression The expression. Returns Type Description System.String Visit(Expression) Dispatches the expression to one of the more specialized visit methods in this class. Declaration public override Expression Visit(Expression node) Parameters Type Name Description System.Linq.Expressions.Expression node The expression to visit. Returns Type Description System.Linq.Expressions.Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression) VisitAggregate(MethodCallExpression, String) Visits the Linq aggregate methods. Declaration protected virtual Expression VisitAggregate(MethodCallExpression expression, string aggregateName) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. System.String aggregateName Name of aggreage method. Returns Type Description System.Linq.Expressions.Expression VisitAny(MethodCallExpression) Visits the Linq Any method. Declaration protected virtual Expression VisitAny(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression VisitBinary(BinaryExpression) Visits the Linq Binary. Declaration protected override Expression VisitBinary(BinaryExpression expression) Parameters Type Name Description System.Linq.Expressions.BinaryExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression) Exceptions Type Condition System.NotSupportedException If this binary expression is not supported. VisitColumns(ColumnsExpression) Visits the columns. Declaration public virtual Expression VisitColumns(ColumnsExpression columnExpression) Parameters Type Name Description ColumnsExpression columnExpression The column expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitCompare(MethodCallExpression, ExpressionType) Visit Visual Basic Compare expression Declaration protected virtual Expression VisitCompare(MethodCallExpression expression, ExpressionType binExpNodeType) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Method call expression Compare expression System.Linq.Expressions.ExpressionType binExpNodeType Binary expression node type Returns Type Description System.Linq.Expressions.Expression Reduced expression. VisitConstant(ConstantExpression) Visits the constant. Declaration protected override Expression VisitConstant(ConstantExpression expression) Parameters Type Name Description System.Linq.Expressions.ConstantExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression) Exceptions Type Condition System.NotSupportedException If type of constant is System.Object . VisitCount(MethodCallExpression) Visits the Linq Count method. Declaration protected virtual Expression VisitCount(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression VisitFirst(MethodCallExpression) Visits the Linq First. Declaration protected virtual Expression VisitFirst(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression VisitGroupBy(GroupByExpression) Visits the group by. Declaration public virtual Expression VisitGroupBy(GroupByExpression groupByExpression) Parameters Type Name Description GroupByExpression groupByExpression The group by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitLinqExpression(MethodCallExpression) Visits the linq expression. Declaration protected virtual Expression VisitLinqExpression(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The method call expression. Returns Type Description System.Linq.Expressions.Expression Reduced expression. VisitMember(MemberExpression) Visits the member. Declaration protected override Expression VisitMember(MemberExpression expression) Parameters Type Name Description System.Linq.Expressions.MemberExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression) Exceptions Type Condition System.NotSupportedException If the member type is not supported. VisitMethodCall(MethodCallExpression) Visits the method call. Declaration protected override Expression VisitMethodCall(MethodCallExpression m) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression m The method call expression. Returns Type Description System.Linq.Expressions.Expression Reuced expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression) VisitOrderBy(OrderByExpression) Visits the order by. Declaration public virtual Expression VisitOrderBy(OrderByExpression orderByExpression) Parameters Type Name Description OrderByExpression orderByExpression The order by expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSelect(SelectExpression) Visits the select. Declaration public virtual Expression VisitSelect(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression The select expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitSkip(MethodCallExpression) Visits the Linq Skip method. Declaration protected virtual Expression VisitSkip(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression The expression itself. VisitSql(SqlExpression) Visits the SQL. Declaration public virtual Expression VisitSql(SqlExpression sqlExpression) Parameters Type Name Description SqlExpression sqlExpression The SQL expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitStringMethods(MethodCallExpression) Visits the string methods. Declaration protected virtual Expression VisitStringMethods(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Exceptions Type Condition System.NotSupportedException If this System.String method is not supported. VisitTable(TableExpression) Visits the table. Declaration public virtual Expression VisitTable(TableExpression tableExpression) Parameters Type Name Description TableExpression tableExpression The table expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitTake(MethodCallExpression) Visits the Linq Take method. Declaration protected virtual Expression VisitTake(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Exceptions Type Condition System.NotSupportedException If call of Take method is not supported. VisitUnary(UnaryExpression) Visits the unary. Declaration protected override Expression VisitUnary(UnaryExpression expression) Parameters Type Name Description System.Linq.Expressions.UnaryExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression) Exceptions Type Condition System.NotSupportedException If this unary expression is not supported. VisitVbOperatorsMethods(MethodCallExpression, ExpressionType) Visit Visual Basic operators expressions. Declaration protected virtual Expression VisitVbOperatorsMethods(MethodCallExpression expression, ExpressionType binExpNodeType) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression Method call expression System.Linq.Expressions.ExpressionType binExpNodeType Binary expression node type Returns Type Description System.Linq.Expressions.Expression Reduced expression. VisitWhere(WhereExpression) Visits the where. Declaration public virtual Expression VisitWhere(WhereExpression whereExpression) Parameters Type Name Description WhereExpression whereExpression The where expression. Returns Type Description System.Linq.Expressions.Expression Expression VisitWhere(MethodCallExpression) Visits the Linq Where method. Declaration protected virtual Expression VisitWhere(MethodCallExpression expression) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression Implements ISqlExpressionVisitor See Also ISqlExpressionVisitor"
  },
  "api/Kros.KORM.Metadata.ColumnInfo.html": {
    "href": "api/Kros.KORM.Metadata.ColumnInfo.html",
    "title": "Class ColumnInfo | Kros.KORM",
    "keywords": "Class ColumnInfo Class, which represent information about column from database. Inheritance System.Object ColumnInfo Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public class ColumnInfo Properties AutoIncrementMethodType Type of primary key auto increment method. Declaration public AutoIncrementMethodType AutoIncrementMethodType { get; set; } Property Value Type Description AutoIncrementMethodType Converter Gets or sets the data converter. Declaration public IConverter Converter { get; set; } Property Value Type Description IConverter IsPrimaryKey Gets or sets a value indicating whether this column is primary key. Declaration public bool IsPrimaryKey { get; set; } Property Value Type Description System.Boolean Name Column name. Declaration public string Name { get; set; } Property Value Type Description System.String PrimaryKeyOrder Gets or sets the order of the column, if it is in composite primary key. Declaration public int PrimaryKeyOrder { get; set; } Property Value Type Description System.Int32 PropertyInfo Gets or sets the property information. Declaration public PropertyInfo PropertyInfo { get; set; } Property Value Type Description System.Reflection.PropertyInfo Methods GetValue(Object) Gets the value. Declaration public object GetValue(object targetObject) Parameters Type Name Description System.Object targetObject The target object. Returns Type Description System.Object Return value from targetObject. SetValue(Object, Object) Sets the value. Declaration public void SetValue(object targetObject, object value) Parameters Type Name Description System.Object targetObject The target object. System.Object value The value."
  },
  "api/Kros.KORM.Materializer.ModelBuilder.html": {
    "href": "api/Kros.KORM.Materializer.ModelBuilder.html",
    "title": "Class ModelBuilder | Kros.KORM",
    "keywords": "Class ModelBuilder ModelBuilder, which know materialize data from Db to objects. Inheritance System.Object ModelBuilder Implements IModelBuilder Namespace : Kros.KORM.Materializer Assembly : Kros.KORM.dll Syntax public class ModelBuilder : IModelBuilder Constructors ModelBuilder(IModelFactory) Initializes a new instance of the ModelBuilder class. Declaration public ModelBuilder(IModelFactory modelFactory) Parameters Type Name Description IModelFactory modelFactory The model factory. Exceptions Type Condition System.ArgumentNullException Argument 'modelFactory' is required. Methods Materialize<T>(DataRow) Materialize data from dataRow to instances of model type T . Declaration public T Materialize<T>(DataRow dataRow) Parameters Type Name Description System.Data.DataRow dataRow Data row of the table. Returns Type Description T Model. Type Parameters Name Description T Type of model. Materialize<T>(DataTable) Materialize data from data table to instances of model type T. Declaration public IEnumerable<T> Materialize<T>(DataTable table) Parameters Type Name Description System.Data.DataTable table Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Materialize<T>(IDataReader) Materialize data from reader to instances of model type T. Declaration public IEnumerable<T> Materialize<T>(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader The reader from which materialize data. Returns Type Description System.Collections.Generic.IEnumerable <T> IEnumerable of models. Type Parameters Name Description T Type of model. Remarks If disposeReader is true and connection is not null, then connection will be disposed. Examples var people = database.ModelBuilder.Materialize<Person>(dataTable); Implements IModelBuilder See Also IModelBuilder"
  },
  "api/Kros.KORM.Query.Providers.IDataReaderEnvelope.html": {
    "href": "api/Kros.KORM.Query.Providers.IDataReaderEnvelope.html",
    "title": "Interface IDataReaderEnvelope | Kros.KORM",
    "keywords": "Interface IDataReaderEnvelope Envelope over some other inner System.Data.IDataReader . Implementation can introduce own logic how to iterate over inner reader. Namespace : Kros.KORM.Query.Providers Assembly : Kros.KORM.dll Syntax public interface IDataReaderEnvelope : IDataReader, IDisposable, IDataRecord Methods SetInnerReader(IDataReader) Sets inner reader over which is implementation iterating. Declaration void SetInnerReader(IDataReader innerReader) Parameters Type Name Description System.Data.IDataReader innerReader Inner reader."
  },
  "api/Kros.KORM.Query.IQueryProviderFactory.html": {
    "href": "api/Kros.KORM.Query.IQueryProviderFactory.html",
    "title": "Interface IQueryProviderFactory | Kros.KORM",
    "keywords": "Interface IQueryProviderFactory Interface, which describe factory for creating provider. Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public interface IQueryProviderFactory Methods Create(ConnectionStringSettings, IModelBuilder, IDatabaseMapper) Creates the specified QueryProvider. Declaration IQueryProvider Create(ConnectionStringSettings connectionString, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Configuration.ConnectionStringSettings connectionString The connection string. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of IQueryProvider. Create(DbConnection, IModelBuilder, IDatabaseMapper) Creates the specified QueryProvider. Declaration IQueryProvider Create(DbConnection connection, IModelBuilder modelBuilder, IDatabaseMapper databaseMapper) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. IModelBuilder modelBuilder The model builder. IDatabaseMapper databaseMapper Database mapper. Returns Type Description IQueryProvider Instance of IQueryProvider."
  },
  "api/Kros.KORM.Query.Sql.ParameterExtractingExpressionVisitor.html": {
    "href": "api/Kros.KORM.Query.Sql.ParameterExtractingExpressionVisitor.html",
    "title": "Class ParameterExtractingExpressionVisitor | Kros.KORM",
    "keywords": "Class ParameterExtractingExpressionVisitor Class for extracting parameters from Expression. Inheritance System.Object System.Linq.Expressions.ExpressionVisitor ParameterExtractingExpressionVisitor Namespace : Kros.KORM.Query.Sql Assembly : Kros.KORM.dll Syntax public class ParameterExtractingExpressionVisitor : ExpressionVisitor Methods ExtractParametersToCommand(DbCommand, Expression) Extracts the parrameters to command. Declaration public static void ExtractParametersToCommand(DbCommand command, Expression expression) Parameters Type Name Description System.Data.Common.DbCommand command The command. System.Linq.Expressions.Expression expression The expression. Visit(Expression) Dispatches the expression to one of the more specialized visit methods in this class. Declaration public override Expression Visit(Expression node) Parameters Type Name Description System.Linq.Expressions.Expression node The expression to visit. Returns Type Description System.Linq.Expressions.Expression The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. Overrides System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression) See Also System.Linq.Expressions.ExpressionVisitor"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Welcome to Kros.Libs | Kros.KORM",
    "keywords": "Welcome to Kros.Libs This is Kros.Utils, Kros.Utils.MsAccess, Kros.KORM and Kros.KORM.MsAccess libraries documentation. Kros.Utils Universal library of various tools to simplify the work of the programmer. It is platform-independent (also applicable to desktop applications and server services) and is independent of third-party libraries. Kros.Utils.MsAccess Kros.Utils library extension for MS Access support. Only applicable in the full .NET framework. Kros.KORM Simple and fast micro-ORM framework for .NET. Kros.KORM.MsAccess Kros.KORM library extension for MS Access support. Only applicable in the full .NET framework."
  },
  "api/Kros.KORM.Query.DbSet-1.html": {
    "href": "api/Kros.KORM.Query.DbSet-1.html",
    "title": "Class DbSet<T> | Kros.KORM",
    "keywords": "Class DbSet<T> Represents the collection of all items that can be saved to the database, of a given type. Inheritance System.Object DbSet<T> Implements IDbSet <T> Namespace : Kros.KORM.Query Assembly : Kros.KORM.dll Syntax public class DbSet<T> : IDbSet<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type that defines the set. Constructors DbSet(ICommandGenerator<T>, IQueryProvider, IQueryBase<T>, TableInfo) Initializes a new instance of the DbSet<T> class. Declaration public DbSet(ICommandGenerator<T> commandGenerator, IQueryProvider provider, IQueryBase<T> query, TableInfo tableInfo) Parameters Type Name Description ICommandGenerator <T> commandGenerator Generator to create commands. IQueryProvider provider Provider to executing commands. IQueryBase <T> query Query. TableInfo tableInfo Information about table from database. Properties AddedItems List of items in Added state. Declaration public IEnumerable<T> AddedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> DeletedItems List of items in Deleted state. Declaration public IEnumerable<T> DeletedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> EditedItems List of items in Edited state. Declaration public IEnumerable<T> EditedItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable <T> Methods Add(T) Adds the item to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration public void Add(T entity) Parameters Type Name Description T entity Item to add. Exceptions Type Condition AlreadyInCollectionException Adding item already exists in list of items. Add(IEnumerable<T>) Adds the items to the context underlying the set in the Added state such that it will be inserted into the database when CommitChanges is called. Declaration public void Add(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to add. BulkInsert() Declaration public void BulkInsert() BulkInsert(IEnumerable<T>) Declaration public void BulkInsert(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items BulkInsertAsync() Declaration public Task BulkInsertAsync() Returns Type Description System.Threading.Tasks.Task BulkInsertAsync(IEnumerable<T>) Declaration public Task BulkInsertAsync(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items Returns Type Description System.Threading.Tasks.Task BulkUpdate() Declaration public void BulkUpdate() BulkUpdate(Action<IDbConnection, IDbTransaction, String>) Declaration public void BulkUpdate(Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction BulkUpdate(IEnumerable<T>) Declaration public void BulkUpdate(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items BulkUpdate(IEnumerable<T>, Action<IDbConnection, IDbTransaction, String>) Declaration public void BulkUpdate(IEnumerable<T> items, Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction BulkUpdateAsync() Declaration public Task BulkUpdateAsync() Returns Type Description System.Threading.Tasks.Task BulkUpdateAsync(Action<IDbConnection, IDbTransaction, String>) Declaration public Task BulkUpdateAsync(Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction Returns Type Description System.Threading.Tasks.Task BulkUpdateAsync(IEnumerable<T>) Declaration public Task BulkUpdateAsync(IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items Returns Type Description System.Threading.Tasks.Task BulkUpdateAsync(IEnumerable<T>, Action<IDbConnection, IDbTransaction, String>) Declaration public Task BulkUpdateAsync(IEnumerable<T> items, Action<IDbConnection, IDbTransaction, string> tempTableAction) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> items System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > tempTableAction Returns Type Description System.Threading.Tasks.Task Clear() Clear Added, Edited and Deleted lists of items. Declaration public void Clear() CommitChanges() Commits all pending changes to the database. Declaration public void CommitChanges() CommitChangesAsync() Declaration public Task CommitChangesAsync() Returns Type Description System.Threading.Tasks.Task Delete(T) Adds the item to the context underlying the set in the Deleted state such that it will be deleted from the database when CommitChanges is called. Declaration public void Delete(T entity) Parameters Type Name Description T entity Item to add. Exceptions Type Condition AlreadyInCollectionException Adding item already exists in list of items. Delete(IEnumerable<T>) Marks the items as Deleted such that it will be deleted from the database when CommitChanges is called. Declaration public void Delete(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to delete. Edit(T) Adds the item to the context underlying the set in the Edited state such that it will be updated in the database when CommitChanges is called. Declaration public void Edit(T entity) Parameters Type Name Description T entity Item to add. Exceptions Type Condition AlreadyInCollectionException Adding item already exists in list of items. Edit(IEnumerable<T>) Marks the items as Edited such that it will be updated in the database when CommitChanges is called. Declaration public void Edit(IEnumerable<T> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The items to edit. GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> An enumerator that can be used to iterate through the collection. Implements IDbSet<T>"
  },
  "api/Kros.KORM.Metadata.IModelMapper.html": {
    "href": "api/Kros.KORM.Metadata.IModelMapper.html",
    "title": "Interface IModelMapper | Kros.KORM",
    "keywords": "Interface IModelMapper Interface, which describe class for mapping database to model. Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public interface IModelMapper Properties MapColumnName Gets or sets the column name mapping logic. Declaration Func<ColumnInfo, Type, string> MapColumnName { get; set; } Property Value Type Description System.Func < ColumnInfo , System.Type , System.String > Remarks Params: ColumnInfo - info about column. Type - Type of model. string - return column name. MapPrimaryKey Gets or sets the primary key mapping logic. Declaration Func<TableInfo, IEnumerable<ColumnInfo>> MapPrimaryKey { get; set; } Property Value Type Description System.Func < TableInfo , System.Collections.Generic.IEnumerable < ColumnInfo >> MapTableName Gets or sets the table name mapping logic. Declaration Func<TableInfo, Type, string> MapTableName { get; set; } Property Value Type Description System.Func < TableInfo , System.Type , System.String > Remarks Params: TableInfo - info about table. Type - Type of model. string - return table name. Methods GetInjector<T>() Get property service injector. Declaration IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information. Declaration TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Table info. GetTableInfo<T>() Gets the table information. Declaration TableInfo GetTableInfo<T>() Returns Type Description TableInfo Table info. Type Parameters Name Description T Type of model. InjectionConfigurator<T>() Get property injection configuration for model T. Declaration IInjectionConfigurator<T> InjectionConfigurator<T>() Returns Type Description IInjectionConfigurator <T> Type Parameters Name Description T Examples Database.DefaultModelMapper .InjectionConfigurator<Person>() .FillProperty(p => p.CalculationService, () => new CalculationService()) .FillProperty(p => p.Logger, () => ServiceContainer.Instance.Resolve<ILogger>()); SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>>, String) Set column name for specific property. Declaration void SetColumnName<TModel, TValue>(Expression<Func<TModel, TValue>> modelProperty, string columnName) where TModel : class Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TModel, TValue>> modelProperty Expression for defined property to. System.String columnName Database column name. Type Parameters Name Description TModel TValue Examples Database.DefaultModelMapper.SetColumnName<Person, string>(p => p.Name, \"FirstName\");"
  },
  "api/Kros.KORM.Migrations.Providers.FileMigrationScriptsProvider.html": {
    "href": "api/Kros.KORM.Migrations.Providers.FileMigrationScriptsProvider.html",
    "title": "Class FileMigrationScriptsProvider | Kros.KORM",
    "keywords": "Class FileMigrationScriptsProvider Migration scripts provider, which load scripts from disk. Inheritance System.Object FileMigrationScriptsProvider Implements IMigrationScriptsProvider Namespace : Kros.KORM.Migrations.Providers Assembly : Kros.KORM.dll Syntax public class FileMigrationScriptsProvider : IMigrationScriptsProvider Constructors FileMigrationScriptsProvider(String) Ctor. Declaration public FileMigrationScriptsProvider(string folderPath) Parameters Type Name Description System.String folderPath Path to folder with migration scripts. Methods GetScriptAsync(ScriptInfo) Declaration public Task<string> GetScriptAsync(ScriptInfo scriptInfo) Parameters Type Name Description ScriptInfo scriptInfo Returns Type Description System.Threading.Tasks.Task < System.String > GetScripts() Declaration public IEnumerable<ScriptInfo> GetScripts() Returns Type Description System.Collections.Generic.IEnumerable < ScriptInfo > Implements IMigrationScriptsProvider"
  },
  "api/Kros.KORM.Metadata.Attribute.NoMapAttribute.html": {
    "href": "api/Kros.KORM.Metadata.Attribute.NoMapAttribute.html",
    "title": "Class NoMapAttribute | Kros.KORM",
    "keywords": "Class NoMapAttribute Attribute, which describe property, which doesn't exist in database. Inheritance System.Object System.Attribute NoMapAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class NoMapAttribute : Attribute, _Attribute"
  },
  "api/Kros.KORM.Migrations.MigrationsRunner.html": {
    "href": "api/Kros.KORM.Migrations.MigrationsRunner.html",
    "title": "Class MigrationsRunner | Kros.KORM",
    "keywords": "Class MigrationsRunner Runner for execution database migrations. Inheritance System.Object MigrationsRunner Implements IMigrationsRunner Namespace : Kros.KORM.Migrations Assembly : Kros.KORM.dll Syntax public class MigrationsRunner : IMigrationsRunner Constructors MigrationsRunner(IDatabase, MigrationOptions) Ctor. Declaration public MigrationsRunner(IDatabase database, MigrationOptions migrationOptions) Parameters Type Name Description IDatabase database Database connection. MigrationOptions migrationOptions Migration options Methods MigrateAsync() Declaration public Task MigrateAsync() Returns Type Description System.Threading.Tasks.Task Implements IMigrationsRunner"
  },
  "api/Kros.KORM.Metadata.IDatabaseMapper.html": {
    "href": "api/Kros.KORM.Metadata.IDatabaseMapper.html",
    "title": "Interface IDatabaseMapper | Kros.KORM",
    "keywords": "Interface IDatabaseMapper Interface, which describe mapper for database. Map object types to database informations. Namespace : Kros.KORM.Metadata Assembly : Kros.KORM.dll Syntax public interface IDatabaseMapper Methods GetInjector<T>() Get property service injector. Declaration IInjector GetInjector<T>() Returns Type Description IInjector Service property injector. Type Parameters Name Description T Model type. GetTableInfo(Type) Gets the table information by model type. Declaration TableInfo GetTableInfo(Type modelType) Parameters Type Name Description System.Type modelType Type of the model. Returns Type Description TableInfo Database table info for model. GetTableInfo<T>() Gets the table information by model type. Declaration TableInfo GetTableInfo<T>() Returns Type Description TableInfo Database table info for model. Type Parameters Name Description T Model type."
  },
  "api/Kros.KORM.Exceptions.html": {
    "href": "api/Kros.KORM.Exceptions.html",
    "title": "Namespace Kros.KORM.Exceptions | Kros.KORM",
    "keywords": "Namespace Kros.KORM.Exceptions Classes AlreadyInCollectionException Exception class for item already exists in the collection. CompositePrimaryKeyException Exception class for composite primary key. MissingPrimaryKeyException Exception class for missing primary key."
  },
  "api/Kros.KORM.Data.ITransaction.html": {
    "href": "api/Kros.KORM.Data.ITransaction.html",
    "title": "Interface ITransaction | Kros.KORM",
    "keywords": "Interface ITransaction Represent database transaction. Instances of this class are obtained from BeginTransaction() and it is not designed to be directly constructed in your application code. Namespace : Kros.KORM.Data Assembly : Kros.KORM.dll Syntax public interface ITransaction : IDisposable Properties CommandTimeout The time in seconds to wait for the System.Data.Common.DbCommand.CommandTimeout in this transaction to execute. If not set, default value (30 s) will be used. Caution: Can be set only for main transaction (nested will share this value). Declaration int CommandTimeout { get; set; } Property Value Type Description System.Int32 Remarks A value of 0 indicates no limit (an attempt to execute a command will wait indefinitely). Methods Commit() Commits all changes made to the database in the current transaction. Declaration void Commit() Rollback() Discards all changes made to the database in the current transaction. Declaration void Rollback()"
  },
  "api/Kros.KORM.Metadata.Attribute.KeyAttribute.html": {
    "href": "api/Kros.KORM.Metadata.Attribute.KeyAttribute.html",
    "title": "Class KeyAttribute | Kros.KORM",
    "keywords": "Class KeyAttribute Attribute, which describe property, which are part of primary key. Inheritance System.Object System.Attribute KeyAttribute Namespace : Kros.KORM.Metadata.Attribute Assembly : Kros.KORM.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class KeyAttribute : Attribute, _Attribute Constructors KeyAttribute() Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute() KeyAttribute(AutoIncrementMethodType) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(AutoIncrementMethodType autoIncrementMethodType) Parameters Type Name Description AutoIncrementMethodType autoIncrementMethodType Type of primary key auto increment method. KeyAttribute(Int32) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(int order) Parameters Type Name Description System.Int32 order The order of the column in composite primary key. KeyAttribute(String) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(string name) Parameters Type Name Description System.String name The key name. KeyAttribute(String, AutoIncrementMethodType) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(string name, AutoIncrementMethodType autoIncrementMethodType) Parameters Type Name Description System.String name The key name. AutoIncrementMethodType autoIncrementMethodType Type of primary key auto increment method. KeyAttribute(String, Int32) Initializes a new instance of the KeyAttribute class. Declaration public KeyAttribute(string name, int order) Parameters Type Name Description System.String name The key name. System.Int32 order The order of the column in composite primary key. Properties AutoIncrementMethodType Type of primary key auto increment method. Declaration public AutoIncrementMethodType AutoIncrementMethodType { get; } Property Value Type Description AutoIncrementMethodType Name Gets the name of key. Declaration public string Name { get; } Property Value Type Description System.String Order The order of the column in composite primary key. Declaration public int Order { get; } Property Value Type Description System.Int32"
  }
}