{
  "api/Kros.Data.Schema.DefaultValueParsers.html": {
    "href": "api/Kros.Data.Schema.DefaultValueParsers.html",
    "title": "Class DefaultValueParsers | Kros.Utils",
    "keywords": "Class DefaultValueParsers Standard parsers for columns' default values. The default values in database are stored as string and it is necessary to convert them to the specific column's type. If conversion to desired type fails, the returned value is always null . Inheritance System.Object DefaultValueParsers Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public static class DefaultValueParsers Methods ParseBool(String) Declaration public static object ParseBool(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseByte(String) Declaration public static object ParseByte(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDate(String) Declaration public static object ParseDate(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDateSql(String) Declaration public static object ParseDateSql(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDateTimeOffsetSql(String) Declaration public static object ParseDateTimeOffsetSql(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDecimal(String) Declaration public static object ParseDecimal(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseDouble(String) Declaration public static object ParseDouble(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseGuid(String) Declaration public static object ParseGuid(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseInt16(String) Declaration public static object ParseInt16(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseInt32(String) Declaration public static object ParseInt32(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseInt64(String) Declaration public static object ParseInt64(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseSByte(String) Declaration public static object ParseSByte(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseSingle(String) Declaration public static object ParseSingle(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseUInt16(String) Declaration public static object ParseUInt16(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseUInt32(String) Declaration public static object ParseUInt32(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object ParseUInt64(String) Declaration public static object ParseUInt64(string defaultValue) Parameters Type Name Description System.String defaultValue Returns Type Description System.Object"
  },
  "api/Kros.Caching.ICache-2.html": {
    "href": "api/Kros.Caching.ICache-2.html",
    "title": "Interface ICache<TKey, TValue> | Kros.Utils",
    "keywords": "Interface ICache<TKey, TValue> Interface, which describe class for caching data. Namespace : Kros.Caching Assembly : Kros.Utils.dll Syntax public interface ICache<TKey, TValue> Type Parameters Name Description TKey The type of the key. TValue The type of the value. Properties Count Gets the count of cached data. Declaration int Count { get; } Property Value Type Description System.Int32 Methods Clear() Clears the cache. Declaration void Clear() Get(TKey, Func<TValue>) Gets the cached value by key. Declaration TValue Get(TKey key, Func<TValue> factory) Parameters Type Name Description TKey key The key. System.Func <TValue> factory The factory for creating value, if doesn't exist in cahce. Returns Type Description TValue Value from Cache. Remarks If value key doesn't exist in cache, then factory is use for creating value and value is set to cache."
  },
  "api/Kros.Net.html": {
    "href": "api/Kros.Net.html",
    "title": "Namespace Kros.Net | Kros.Utils",
    "keywords": "Namespace Kros.Net Classes HttpClientExtensions Extension methods for System.Net.Http.HttpClient class. HttpRequestMessageExtensions Extensions method for System.Net.Http.HttpRequestMessage class. HttpResponseMessageExtensions Extensions method for System.Net.Http.HttpResponseMessage class. NetworkChecker Class dedicated for simple testing of internet connectivity."
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProceduresSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProceduresSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ProceduresSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.ProceduresSchemaNames Inheritance System.Object SqlServerSchemaLoader.ProceduresSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ProceduresSchemaNames Fields Created Declaration public const string Created = \"CREATED\" Field Value Type Description System.String LastAltered Declaration public const string LastAltered = \"LAST_ALTERED\" Field Value Type Description System.String RoutineCatalog Declaration public const string RoutineCatalog = \"ROUTINE_CATALOG\" Field Value Type Description System.String RoutineName Declaration public const string RoutineName = \"ROUTINE_NAME\" Field Value Type Description System.String RoutineSchema Declaration public const string RoutineSchema = \"ROUTINE_SCHEMA\" Field Value Type Description System.String RoutineType Declaration public const string RoutineType = \"ROUTINE_TYPE\" Field Value Type Description System.String SpecificCatalog Declaration public const string SpecificCatalog = \"SPECIFIC_CATALOG\" Field Value Type Description System.String SpecificName Declaration public const string SpecificName = \"SPECIFIC_NAME\" Field Value Type Description System.String SpecificSchema Declaration public const string SpecificSchema = \"SPECIFIC_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.IndexType.html": {
    "href": "api/Kros.Data.Schema.IndexType.html",
    "title": "Enum IndexType | Kros.Utils",
    "keywords": "Enum IndexType Table index type. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public enum IndexType Fields Name Description Index General index. PrimaryKey Primary key. UniqueKey Unique index."
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UsersSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UsersSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.UsersSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.UsersSchemaNames Inheritance System.Object SqlServerSchemaLoader.UsersSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class UsersSchemaNames Fields CreateDate Declaration public const string CreateDate = \"CREATEDATE\" Field Value Type Description System.String Name Declaration public const string Name = \"NAME\" Field Value Type Description System.String Uid Declaration public const string Uid = \"UID\" Field Value Type Description System.String UpdateDate Declaration public const string UpdateDate = \"UPDATEDATE\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexColumnsSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.IndexColumnsSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.IndexColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.IndexColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class IndexColumnsSchemaNames Fields ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String ConstraintCatalog Declaration public const string ConstraintCatalog = \"CONSTRAINT_CATALOG\" Field Value Type Description System.String ConstraintName Declaration public const string ConstraintName = \"CONSTRAINT_NAME\" Field Value Type Description System.String ConstraintSchema Declaration public const string ConstraintSchema = \"CONSTRAINT_SCHEMA\" Field Value Type Description System.String KeyType Declaration public const string KeyType = \"KEYTYPE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.SortOrder.html": {
    "href": "api/Kros.Data.Schema.SortOrder.html",
    "title": "Enum SortOrder | Kros.Utils",
    "keywords": "Enum SortOrder Sort order of an index column. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public enum SortOrder Fields Name Description Ascending Ascending order. Descending Descending order."
  },
  "api/Kros.IO.html": {
    "href": "api/Kros.IO.html",
    "title": "Namespace Kros.IO | Kros.Utils",
    "keywords": "Namespace Kros.IO Classes PathFormatter Helper for formatting file paths. It takes care of maximum path length and of creating the path, which does not yet exists on disk. PathHelper Helpers for working with file/folder paths."
  },
  "api/Kros.IO.PathHelper.html": {
    "href": "api/Kros.IO.PathHelper.html",
    "title": "Class PathHelper | Kros.Utils",
    "keywords": "Class PathHelper Helpers for working with file/folder paths. Inheritance System.Object PathHelper Namespace : Kros.IO Assembly : Kros.Utils.dll Syntax public static class PathHelper Methods BuildPath(String[]) Joins parts parts to one string, representing path to a file/folder. Declaration public static string BuildPath(params string[] parts) Parameters Type Name Description System.String [] parts Path parts. Returns Type Description System.String Created path. Remarks The method works similarly as standard .NET method System.IO.Path.Combine(System.String[]) , with some different details: Exceptions Type Condition System.ArgumentNullException The value of parts or any of its item is null . System.ArgumentException Any of the item in parts contains invalid characters defined in System.IO.Path.GetInvalidPathChars . GetTempPath() Returns path to system temporary folder ( System.IO.Path.GetTempPath ) without trailing directory separator. Declaration public static string GetTempPath() Returns Type Description System.String IsNetworkPath(String) Checks, if specified path is network share path. The path is considered network share path, if it begins with \\ . Declaration public static bool IsNetworkPath(string path) Parameters Type Name Description System.String path Checked path. Returns Type Description System.Boolean true if path is network share path, false otherwise. ReplaceInvalidPathChars(String) Replaces invalid characters in pathName with dash ( - ). If there are several succesive invalid characters, they all are replaced only by one dash. Declaration public static string ReplaceInvalidPathChars(string pathName) Parameters Type Name Description System.String pathName Input path. Returns Type Description System.String Remarks ReplaceInvalidPathChars(String, String) Replaces invalid characters in pathName with replacement . If there are several succesive invalid characters, they all are replaced only by one replacement . Declaration public static string ReplaceInvalidPathChars(string pathName, string replacement) Parameters Type Name Description System.String pathName Input path. System.String replacement Value, by which are replaced invalid path charactes. If the value is null , empty stirng is used, so invalid characters are removed. Returns Type Description System.String String with invalid path characters replaced. If input pathName is null , empty string is returned. Remarks Replaced are all characters in System.IO.Path.GetInvalidFileNameChars and System.IO.Path.GetInvalidPathChars ."
  },
  "api/Kros.Extensions.DateTimeExtensions.html": {
    "href": "api/Kros.Extensions.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | Kros.Utils",
    "keywords": "Class DateTimeExtensions Extension methods for date and time System.DateTime . Inheritance System.Object DateTimeExtensions Namespace : Kros.Extensions Assembly : Kros.Utils.dll Syntax public static class DateTimeExtensions Methods FirstDayOfCurrentMonth() Returns first day of current month. Declaration public static DateTime FirstDayOfCurrentMonth() Returns Type Description System.DateTime Date. FirstDayOfMonth(DateTime) Returns date, which is the first day in month and year in input value . Time component is nulled. Declaration public static DateTime FirstDayOfMonth(this DateTime value) Parameters Type Name Description System.DateTime value Date, to which the first day of month is returned. Returns Type Description System.DateTime Date. LastDayOfCurrentMonth() Returns last day of current month. Declaration public static DateTime LastDayOfCurrentMonth() Returns Type Description System.DateTime Date. LastDayOfMonth(DateTime) Returns date, which is the last day in month and year in input value . Time component is nulled. Declaration public static DateTime LastDayOfMonth(this DateTime value) Parameters Type Name Description System.DateTime value Date, to which the last day of month is returned. Returns Type Description System.DateTime Date."
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProcedureParametersSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ProcedureParametersSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ProcedureParametersSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.ProcedureParametersSchemaNames Inheritance System.Object SqlServerSchemaLoader.ProcedureParametersSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ProcedureParametersSchemaNames Fields AsLocator Declaration public const string AsLocator = \"AS_LOCATOR\" Field Value Type Description System.String CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String CollationName Declaration public const string CollationName = \"COLLATION_NAME\" Field Value Type Description System.String CollationSchema Declaration public const string CollationSchema = \"COLLATION_SCHEMA\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSetCatalog Declaration public const string CharacterSetCatalog = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSetName Declaration public const string CharacterSetName = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSetSchema Declaration public const string CharacterSetSchema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IntervalPrecision Declaration public const string IntervalPrecision = \"INTERVAL_PRECISION\" Field Value Type Description System.String IntervalType Declaration public const string IntervalType = \"INTERVAL_TYPE\" Field Value Type Description System.String IsResult Declaration public const string IsResult = \"IS_RESULT\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericPrecisionRadix Declaration public const string NumericPrecisionRadix = \"NUMERIC_PRECISION_RADIX\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String ParameterMode Declaration public const string ParameterMode = \"PARAMETER_MODE\" Field Value Type Description System.String ParameterName Declaration public const string ParameterName = \"PARAMETER_NAME\" Field Value Type Description System.String SpecificCatalog Declaration public const string SpecificCatalog = \"SPECIFIC_CATALOG\" Field Value Type Description System.String SpecificName Declaration public const string SpecificName = \"SPECIFIC_NAME\" Field Value Type Description System.String SpecificSchema Declaration public const string SpecificSchema = \"SPECIFIC_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexesSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.IndexesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.IndexesSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.IndexesSchemaNames Inheritance System.Object SqlServerSchemaLoader.IndexesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class IndexesSchemaNames Fields ConstraintCatalog Declaration public const string ConstraintCatalog = \"CONSTRAINT_CATALOG\" Field Value Type Description System.String ConstraintName Declaration public const string ConstraintName = \"CONSTRAINT_NAME\" Field Value Type Description System.String ConstraintSchema Declaration public const string ConstraintSchema = \"CONSTRAINT_SCHEMA\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TypeDesc Declaration public const string TypeDesc = \"TYPE_DESC\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.ColumnSchema.DefaultValues.html": {
    "href": "api/Kros.Data.Schema.ColumnSchema.DefaultValues.html",
    "title": "Class ColumnSchema.DefaultValues | Kros.Utils",
    "keywords": "Class ColumnSchema.DefaultValues Columns' default values for individual data types. Inheritance System.Object ColumnSchema.DefaultValues Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public static class DefaultValues Fields Boolean Declaration public const bool Boolean = false Field Value Type Description System.Boolean Byte Declaration public const byte Byte = 0 Field Value Type Description System.Byte Date Declaration public static readonly DateTime Date Field Value Type Description System.DateTime DateTime Declaration public static readonly DateTime DateTime Field Value Type Description System.DateTime Decimal Declaration public const decimal Decimal = 0M Field Value Type Description System.Decimal Double Declaration public const double Double = 0 Field Value Type Description System.Double Guid Declaration public static readonly Guid Guid Field Value Type Description System.Guid Int16 Declaration public const short Int16 = 0 Field Value Type Description System.Int16 Int32 Declaration public const int Int32 = 0 Field Value Type Description System.Int32 Int64 Declaration public const long Int64 = 0L Field Value Type Description System.Int64 Null Declaration public static readonly DBNull Null Field Value Type Description System.DBNull SByte Declaration public const sbyte SByte = 0 Field Value Type Description System.SByte Single Declaration public const float Single = 0F Field Value Type Description System.Single Text Declaration public const string Text = \"\" Field Value Type Description System.String Time Declaration public static readonly DateTime Time Field Value Type Description System.DateTime UInt16 Declaration public const ushort UInt16 = 0 Field Value Type Description System.UInt16 UInt32 Declaration public const uint UInt32 = 0U Field Value Type Description System.UInt32 UInt64 Declaration public const ulong UInt64 = 0UL Field Value Type Description System.UInt64"
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ForeignKeysSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ForeignKeysSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ForeignKeysSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.ForeignKeysSchemaNames Inheritance System.Object SqlServerSchemaLoader.ForeignKeysSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ForeignKeysSchemaNames Fields ConstraintCatalog Declaration public const string ConstraintCatalog = \"CONSTRAINT_CATALOG\" Field Value Type Description System.String ConstraintName Declaration public const string ConstraintName = \"CONSTRAINT_NAME\" Field Value Type Description System.String ConstraintSchema Declaration public const string ConstraintSchema = \"CONSTRAINT_SCHEMA\" Field Value Type Description System.String ConstraintType Declaration public const string ConstraintType = \"CONSTRAINT_TYPE\" Field Value Type Description System.String InitiallyDeferred Declaration public const string InitiallyDeferred = \"INITIALLY_DEFERRED\" Field Value Type Description System.String IsDeferrable Declaration public const string IsDeferrable = \"IS_DEFERRABLE\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Data.DataExtensions.html": {
    "href": "api/Kros.Data.DataExtensions.html",
    "title": "Class DataExtensions | Kros.Utils",
    "keywords": "Class DataExtensions Extensions for various data classes. Inheritance System.Object DataExtensions Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public static class DataExtensions Methods IsOpened(IDbConnection) Checks if database connection is opened. Declaration public static bool IsOpened(this IDbConnection cn) Parameters Type Name Description System.Data.IDbConnection cn Database connection. Returns Type Description System.Boolean true , if database connection is opened, false otherwise. SqlServerErrorCode(SqlException) Returns error code for Microsoft SQL Server. Declaration public static SqlServerErrorCode SqlServerErrorCode(this SqlException ex) Parameters Type Name Description System.Data.SqlClient.SqlException ex Exception of which error code is tested. Returns Type Description SqlServerErrorCode Error code as a value of enumeration SqlServerErrorCode(SqlException) . If error code is not defined in the enum, value Unknown is returned. Remarks Method checks value of System.Data.SqlClient.SqlError.Number property of the first error in the System.Data.SqlClient.SqlException.Errors list."
  },
  "api/Kros.Net.NetworkChecker.html": {
    "href": "api/Kros.Net.NetworkChecker.html",
    "title": "Class NetworkChecker | Kros.Utils",
    "keywords": "Class NetworkChecker Class dedicated for simple testing of internet connectivity. Inheritance System.Object NetworkChecker Namespace : Kros.Net Assembly : Kros.Utils.dll Syntax public class NetworkChecker Remarks It is not sufficient to test connectivity using System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable , because that method just checks, if the computer is in some network. It does not check if internet is really available. Internet availability is not checked using ping ( System.Net.NetworkInformation.Ping ), because this method is often blocked. The availability is tested using a request to specific service. Constructors NetworkChecker(Uri) Declaration public NetworkChecker(Uri serviceAddress) Parameters Type Name Description System.Uri serviceAddress NetworkChecker(Uri, Func<HttpMessageHandler>) Initializes a new instance of the NetworkChecker class. Declaration public NetworkChecker(Uri serviceAddress, Func<HttpMessageHandler> httpMessageHandlerFactory) Parameters Type Name Description System.Uri serviceAddress The address for requests checking internet availability. It must be http or https address. System.Func < System.Net.Http.HttpMessageHandler > httpMessageHandlerFactory Factory function to create System.Net.Http.HttpMessageHandler which will be used. NetworkChecker(Uri, Func<HttpMessageHandler>, TimeSpan, TimeSpan) Initializes a new instance of the NetworkChecker class. Declaration public NetworkChecker(Uri serviceAddress, Func<HttpMessageHandler> httpMessageHandlerFactory, TimeSpan requestTimeout, TimeSpan responseCacheExpiration) Parameters Type Name Description System.Uri serviceAddress The address for requests checking internet availability. It must be http or https address. System.Func < System.Net.Http.HttpMessageHandler > httpMessageHandlerFactory Factory function to create System.Net.Http.HttpMessageHandler which will be used. System.TimeSpan requestTimeout Maximum time for waiting for the response from server. If the response will not came in this time, we consider that the internet is not available. System.TimeSpan responseCacheExpiration Time during which the last response will be remembered and so no requests to serviceAddress will be performed. NetworkChecker(Uri, TimeSpan, TimeSpan) Declaration public NetworkChecker(Uri serviceAddress, TimeSpan requestTimeout, TimeSpan responseCacheExpiration) Parameters Type Name Description System.Uri serviceAddress System.TimeSpan requestTimeout System.TimeSpan responseCacheExpiration NetworkChecker(Uri, Uri) Declaration public NetworkChecker(Uri serviceAddress, Uri proxyAddress) Parameters Type Name Description System.Uri serviceAddress System.Uri proxyAddress NetworkChecker(Uri, Uri, TimeSpan, TimeSpan) Initializes a new instance of the NetworkChecker with address serviceAddress and aditional parameters. Declaration public NetworkChecker(Uri serviceAddress, Uri proxyAddress, TimeSpan requestTimeout, TimeSpan responseCacheExpiration) Parameters Type Name Description System.Uri serviceAddress The address for requests checking internet availability. It must be http or https address. System.Uri proxyAddress The address of a proxy server (optional). System.TimeSpan requestTimeout Maximum time for waiting for the response from server. If the response will not came in this time, we consider that the internet is not available. System.TimeSpan responseCacheExpiration Time during which the last response will be remembered and so no requests to serviceAddress will be performed. Properties ProxyAddress Address of a proxy server. Declaration public Uri ProxyAddress { get; } Property Value Type Description System.Uri RequestTimeout Maximum time for waiting for the response from server. If the response will not came in this time, we consider that the internet is not available. Default timeout is 1 second. Declaration public TimeSpan RequestTimeout { get; } Property Value Type Description System.TimeSpan ResponseCacheExpiration Time during which the last response will be remembered and so no other requests to ServiceAddress will be performed. Default value is 3 minutes. Declaration public TimeSpan ResponseCacheExpiration { get; } Property Value Type Description System.TimeSpan ServiceAddress Web address to which requests are made to check internet availability. Declaration public Uri ServiceAddress { get; } Property Value Type Description System.Uri Methods IsNetworkAvailable() Checks if the internet (specifically the service at the address ServiceAddress ) is available. Positive response is cached for the time specified in ResponseCacheExpiration , so another request to the service is made after this time. Declaration public bool IsNetworkAvailable() Returns Type Description System.Boolean true if internet (service) is available false otherwise."
  },
  "api/Kros.Data.Schema.ForeignKeySchema.html": {
    "href": "api/Kros.Data.Schema.ForeignKeySchema.html",
    "title": "Class ForeignKeySchema | Kros.Utils",
    "keywords": "Class ForeignKeySchema The schema of the foreign key of the database table. Inheritance System.Object ForeignKeySchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class ForeignKeySchema Constructors ForeignKeySchema(String, String, IEnumerable<String>, String, IEnumerable<String>) Creates a definition of foreign key with the name . Columns primaryKeyTableColumns in parent table primaryKeyTableName are referenced in columns foreignKeyTableColumns of child table foreignKeyTableName . Declaration public ForeignKeySchema(string name, string primaryKeyTableName, IEnumerable<string> primaryKeyTableColumns, string foreignKeyTableName, IEnumerable<string> foreignKeyTableColumns) Parameters Type Name Description System.String name Name of the foreign key. System.String primaryKeyTableName . System.Collections.Generic.IEnumerable < System.String > primaryKeyTableColumns List of columns in parent table. System.String foreignKeyTableName . System.Collections.Generic.IEnumerable < System.String > foreignKeyTableColumns List of columns in child table. Exceptions Type Condition System.ArgumentNullException Value of any argument is null . System.ArgumentException ForeignKeySchema(String, String, String, String, String) Creates a definition of foreign key with the name . Column primaryKeyTableColumn in parent table primaryKeyTableName is referenced in column foreignKeyTableColumn of child table foreignKeyTableName . Declaration public ForeignKeySchema(string name, string primaryKeyTableName, string primaryKeyTableColumn, string foreignKeyTableName, string foreignKeyTableColumn) Parameters Type Name Description System.String name Name of the foreign key. System.String primaryKeyTableName . System.String primaryKeyTableColumn Column name in primary key table. System.String foreignKeyTableName . System.String foreignKeyTableColumn Column name in foreign key table. Exceptions Type Condition System.ArgumentNullException Value of any parameter is null . System.ArgumentException Value of any parameter is empty string, or string containing only whitespace characters. Properties DeleteRule The rule, what to do when record in parent table is deleted. Declaration public ForeignKeyRule DeleteRule { get; set; } Property Value Type Description ForeignKeyRule ForeignKeyTableColumns List of columns in child table. Declaration public ReadOnlyCollection<string> ForeignKeyTableColumns { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < System.String > ForeignKeyTableName Name of the child table. Declaration public string ForeignKeyTableName { get; } Property Value Type Description System.String Name Name of the foreign key. Declaration public string Name { get; } Property Value Type Description System.String PrimaryKeyTableColumns List of columns in primary key table. Declaration public ReadOnlyCollection<string> PrimaryKeyTableColumns { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < System.String > PrimaryKeyTableName Name of the table, where the primary key is. Declaration public string PrimaryKeyTableName { get; } Property Value Type Description System.String Table Table to which this foreign key belongs. Declaration public TableSchema Table { get; } Property Value Type Description TableSchema UpdateRule The rule, what to do when record in parent table is updated. Declaration public ForeignKeyRule UpdateRule { get; set; } Property Value Type Description ForeignKeyRule Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnsSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ColumnsSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.ColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ColumnsSchemaNames Fields CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String ColumnDefault Declaration public const string ColumnDefault = \"COLUMN_DEFAULT\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSetCatalog Declaration public const string CharacterSetCatalog = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSetName Declaration public const string CharacterSetName = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSetSchema Declaration public const string CharacterSetSchema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IsColumnSet Declaration public const string IsColumnSet = \"IS_COLUMN_SET\" Field Value Type Description System.String IsFilestream Declaration public const string IsFilestream = \"IS_FILESTREAM\" Field Value Type Description System.String IsNullable Declaration public const string IsNullable = \"IS_NULLABLE\" Field Value Type Description System.String IsSparse Declaration public const string IsSparse = \"IS_SPARSE\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericPrecision_radix Declaration public const string NumericPrecision_radix = \"NUMERIC_PRECISION_RADIX\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.IDatabaseSchemaLoader.html": {
    "href": "api/Kros.Data.Schema.IDatabaseSchemaLoader.html",
    "title": "Interface IDatabaseSchemaLoader | Kros.Utils",
    "keywords": "Interface IDatabaseSchemaLoader Interface for loading database schema. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface IDatabaseSchemaLoader Methods LoadSchema(Object) Loads whole database schema in connection . Declaration DatabaseSchema LoadSchema(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description DatabaseSchema Schema of whole database. LoadTableSchema(Object, String) Loads schema of table tableName from database connection . Declaration TableSchema LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection Database connection. System.String tableName Name of the table to load schema. Returns Type Description TableSchema Table schema or null , if specified table does not exist. SupportsConnectionType(Object) Checks, if specific loader can load schema from connection . Declaration bool SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description System.Boolean true if loader can load schema, false otherwise."
  },
  "api/Kros.Data.Schema.DefaultValueParsers.ParseDefaultValueFunction.html": {
    "href": "api/Kros.Data.Schema.DefaultValueParsers.ParseDefaultValueFunction.html",
    "title": "Delegate DefaultValueParsers.ParseDefaultValueFunction | Kros.Utils",
    "keywords": "Delegate DefaultValueParsers.ParseDefaultValueFunction Delegate for function which parses default value. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public delegate object ParseDefaultValueFunction(string defaultValue); Parameters Type Name Description System.String defaultValue Column's default value as string. Returns Type Description System.Object Returns value converted to desired data type, or null if conversion failed."
  },
  "api/Kros.Data.Schema.IndexColumnSchema.html": {
    "href": "api/Kros.Data.Schema.IndexColumnSchema.html",
    "title": "Class IndexColumnSchema | Kros.Utils",
    "keywords": "Class IndexColumnSchema Schema of a column of an index. Inheritance System.Object IndexColumnSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexColumnSchema Constructors IndexColumnSchema(String) Creates an instance of an index column with name . Column sort Order is Ascending . Declaration public IndexColumnSchema(string name) Parameters Type Name Description System.String name Index column name. Exceptions Type Condition System.ArgumentNullException Value of name is null . System.ArgumentException Value of name is empty string, or string containing only whitespace characters. IndexColumnSchema(String, SortOrder) Creates an instance of an index column with name and sort order . Declaration public IndexColumnSchema(string name, SortOrder order) Parameters Type Name Description System.String name Index column name. SortOrder order Index column sort order. Exceptions Type Condition System.ArgumentNullException Value of name is null . System.ArgumentException Value of name is empty string, or string containing only whitespace characters. Properties Index Index, to which column belongs. Declaration public IndexSchema Index { get; } Property Value Type Description IndexSchema Name Column name. Declaration public string Name { get; } Property Value Type Description System.String Order Sort order of the column. Declaration public SortOrder Order { get; set; } Property Value Type Description SortOrder"
  },
  "api/Kros.Data.Schema.ForeignKeyRule.html": {
    "href": "api/Kros.Data.Schema.ForeignKeyRule.html",
    "title": "Enum ForeignKeyRule | Kros.Utils",
    "keywords": "Enum ForeignKeyRule Foreign key rule. Defines what to do with child records when the value of parent record changes or is deleted. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public enum ForeignKeyRule Fields Name Description Cascade Corresponding rows are updated in the referencing table when that row is updated in the parent table. NoAction No action is taken. . SetDefault All the values that make up the foreign key are set to their default values when the corresponding row in the parent table is updated. For this constraint to execute, all foreign key columns must have default definitions. If a column is nullable, and there is no explicit default value set, NULL becomes the implicit default value of the column. SetNull All the values that make up the foreign key are set to NULL when the corresponding row in the parent table is updated. For this constraint to execute, the foreign key columns must be nullable."
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.SchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.SchemaNames.html",
    "title": "Class SqlServerSchemaLoader.SchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.SchemaNames Inheritance System.Object SqlServerSchemaLoader.SchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class SchemaNames Fields AllColumns Declaration public const string AllColumns = \"AllColumns\" Field Value Type Description System.String Columns Declaration public const string Columns = \"Columns\" Field Value Type Description System.String ColumnSetColumns Declaration public const string ColumnSetColumns = \"ColumnSetColumns\" Field Value Type Description System.String Databases Declaration public const string Databases = \"Databases\" Field Value Type Description System.String DataSourceInformation Declaration public const string DataSourceInformation = \"DataSourceInformation\" Field Value Type Description System.String DataTypes Declaration public const string DataTypes = \"DataTypes\" Field Value Type Description System.String ForeignKeys Declaration public const string ForeignKeys = \"ForeignKeys\" Field Value Type Description System.String IndexColumns Declaration public const string IndexColumns = \"IndexColumns\" Field Value Type Description System.String Indexes Declaration public const string Indexes = \"Indexes\" Field Value Type Description System.String MetaDataCollections Declaration public const string MetaDataCollections = \"MetaDataCollections\" Field Value Type Description System.String ProcedureParameters Declaration public const string ProcedureParameters = \"ProcedureParameters\" Field Value Type Description System.String Procedures Declaration public const string Procedures = \"Procedures\" Field Value Type Description System.String ReservedWords Declaration public const string ReservedWords = \"ReservedWords\" Field Value Type Description System.String Restrictions Declaration public const string Restrictions = \"Restrictions\" Field Value Type Description System.String StructuredTypeMembers Declaration public const string StructuredTypeMembers = \"StructuredTypeMembers\" Field Value Type Description System.String Tables Declaration public const string Tables = \"Tables\" Field Value Type Description System.String UserDefinedTypes Declaration public const string UserDefinedTypes = \"UserDefinedTypes\" Field Value Type Description System.String Users Declaration public const string Users = \"Users\" Field Value Type Description System.String ViewColumns Declaration public const string ViewColumns = \"ViewColumns\" Field Value Type Description System.String Views Declaration public const string Views = \"Views\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnSetColumnsSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ColumnSetColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ColumnSetColumnsSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.ColumnSetColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ColumnSetColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ColumnSetColumnsSchemaNames Fields CollationCatalog Declaration public const string CollationCatalog = \"COLLATION_CATALOG\" Field Value Type Description System.String ColumnDefault Declaration public const string ColumnDefault = \"COLUMN_DEFAULT\" Field Value Type Description System.String ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String DataType Declaration public const string DataType = \"DATA_TYPE\" Field Value Type Description System.String DatetimePrecision Declaration public const string DatetimePrecision = \"DATETIME_PRECISION\" Field Value Type Description System.String CharacterMaximumLength Declaration public const string CharacterMaximumLength = \"CHARACTER_MAXIMUM_LENGTH\" Field Value Type Description System.String CharacterOctetLength Declaration public const string CharacterOctetLength = \"CHARACTER_OCTET_LENGTH\" Field Value Type Description System.String CharacterSetCataloG Declaration public const string CharacterSetCataloG = \"CHARACTER_SET_CATALOG\" Field Value Type Description System.String CharacterSetName Declaration public const string CharacterSetName = \"CHARACTER_SET_NAME\" Field Value Type Description System.String CharacterSetSchema Declaration public const string CharacterSetSchema = \"CHARACTER_SET_SCHEMA\" Field Value Type Description System.String IsColumnSet Declaration public const string IsColumnSet = \"IS_COLUMN_SET\" Field Value Type Description System.String IsFilestream Declaration public const string IsFilestream = \"IS_FILESTREAM\" Field Value Type Description System.String IsNullable Declaration public const string IsNullable = \"IS_NULLABLE\" Field Value Type Description System.String IsSparse Declaration public const string IsSparse = \"IS_SPARSE\" Field Value Type Description System.String NumericPrecision Declaration public const string NumericPrecision = \"NUMERIC_PRECISION\" Field Value Type Description System.String NumericPrecisionRadix Declaration public const string NumericPrecisionRadix = \"NUMERIC_PRECISION_RADIX\" Field Value Type Description System.String NumericScale Declaration public const string NumericScale = \"NUMERIC_SCALE\" Field Value Type Description System.String OrdinalPosition Declaration public const string OrdinalPosition = \"ORDINAL_POSITION\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Net.HttpRequestMessageExtensions.html": {
    "href": "api/Kros.Net.HttpRequestMessageExtensions.html",
    "title": "Class HttpRequestMessageExtensions | Kros.Utils",
    "keywords": "Class HttpRequestMessageExtensions Extensions method for System.Net.Http.HttpRequestMessage class. Inheritance System.Object HttpRequestMessageExtensions Namespace : Kros.Net Assembly : Kros.Utils.dll Syntax public static class HttpRequestMessageExtensions"
  },
  "api/Kros.Net.HttpClientExtensions.html": {
    "href": "api/Kros.Net.HttpClientExtensions.html",
    "title": "Class HttpClientExtensions | Kros.Utils",
    "keywords": "Class HttpClientExtensions Extension methods for System.Net.Http.HttpClient class. Inheritance System.Object HttpClientExtensions Namespace : Kros.Net Assembly : Kros.Utils.dll Syntax public static class HttpClientExtensions Fields AntiForgeryTokenFieldName Web form's field name for anti-forgery token. The name is __RequestVerificationToken . Declaration public const string AntiForgeryTokenFieldName = \"__RequestVerificationToken\" Field Value Type Description System.String"
  },
  "api/Kros.Data.SqlServer.SqlServerVersions.html": {
    "href": "api/Kros.Data.SqlServer.SqlServerVersions.html",
    "title": "Class SqlServerVersions | Kros.Utils",
    "keywords": "Class SqlServerVersions SQL Server versions. Version numbers are taken from this document: https://support.microsoft.com/en-us/help/321185/how-to-determine-the-version-edition-and-update-level-of-sql-server-an . Inheritance System.Object SqlServerVersions Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public static class SqlServerVersions Fields Server2005 SQL Server 2005, version 9.00.1399.0. Declaration public static readonly Version Server2005 Field Value Type Description System.Version Server2005SP1 SQL Server 2005 SP1, version 9.00.2047.0. Declaration public static readonly Version Server2005SP1 Field Value Type Description System.Version Server2005SP2 SQL Server 2005 SP2, version 9.00.3042.0. Declaration public static readonly Version Server2005SP2 Field Value Type Description System.Version Server2005SP3 SQL Server 2005 SP3, version 9.00.4035.0. Declaration public static readonly Version Server2005SP3 Field Value Type Description System.Version Server2005SP4 SQL Server 2005 SP4, version 9.00.5000.0. Declaration public static readonly Version Server2005SP4 Field Value Type Description System.Version Server2008 SQL Server 2008, version 10.00.1600.22. Declaration public static readonly Version Server2008 Field Value Type Description System.Version Server2008R2 SQL Server 2008 R2, version 10.50.1600.1. Declaration public static readonly Version Server2008R2 Field Value Type Description System.Version Server2008R2SP1 SQL Server 2008 R2 SP1, version 10.50.2500.0. Declaration public static readonly Version Server2008R2SP1 Field Value Type Description System.Version Server2008R2SP2 SQL Server 2008 R2 SP2, version 10.50.4000.0. Declaration public static readonly Version Server2008R2SP2 Field Value Type Description System.Version Server2008R2SP3 SQL Server 2008 R2 SP3, version 10.50.6000.34. Declaration public static readonly Version Server2008R2SP3 Field Value Type Description System.Version Server2008SP1 SQL Server 2008 SP1, version 10.00.2531.00. Declaration public static readonly Version Server2008SP1 Field Value Type Description System.Version Server2008SP2 SQL Server 2008 SP2, version 10.00.4000.00. Declaration public static readonly Version Server2008SP2 Field Value Type Description System.Version Server2008SP3 SQL Server 2008 SP3, version 10.00.5500.00. Declaration public static readonly Version Server2008SP3 Field Value Type Description System.Version Server2012 SQL Server 2012, version 11.0.2100.60. Declaration public static readonly Version Server2012 Field Value Type Description System.Version Server2012SP1 SQL Server 2012 SP1, version 11.0.3000.00. Declaration public static readonly Version Server2012SP1 Field Value Type Description System.Version Server2012SP2 SQL Server 2012 SP2, version 11.0.5058.0. Declaration public static readonly Version Server2012SP2 Field Value Type Description System.Version Server2012SP3 SQL Server 2012 SP3, version 11.0.6020.0. Declaration public static readonly Version Server2012SP3 Field Value Type Description System.Version Server2012SP4 SQL Server 2012 SP4, version 11.0.7001.0. Declaration public static readonly Version Server2012SP4 Field Value Type Description System.Version Server2014 SQL Server 2014, version 12.0.2000.8. Declaration public static readonly Version Server2014 Field Value Type Description System.Version Server2014SP1 SQL Server 2014 SP1, version 12.0.4100.1. Declaration public static readonly Version Server2014SP1 Field Value Type Description System.Version Server2014SP2 SQL Server 2014 SP2, version 12.0.5000.0. Declaration public static readonly Version Server2014SP2 Field Value Type Description System.Version Server2016 SQL Server 2016, version 13.0.2149.0. Declaration public static readonly Version Server2016 Field Value Type Description System.Version Server2016SP1 SQL Server 2016 SP1, version 13.0.4001.0. Declaration public static readonly Version Server2016SP1 Field Value Type Description System.Version Server2016SP2 SQL Server 2016 SP2, version 13.0.5026.0. Declaration public static readonly Version Server2016SP2 Field Value Type Description System.Version Server2017 SQL Server 2017, version 14.0.3006.16. Declaration public static readonly Version Server2017 Field Value Type Description System.Version"
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.DatabasesSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.DatabasesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.DatabasesSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.DatabasesSchemaNames Inheritance System.Object SqlServerSchemaLoader.DatabasesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class DatabasesSchemaNames Fields CreateDate Declaration public const string CreateDate = \"CREATE_DATE\" Field Value Type Description System.String DatabaseName Declaration public const string DatabaseName = \"DATABASE_NAME\" Field Value Type Description System.String DbId Declaration public const string DbId = \"DBID\" Field Value Type Description System.String"
  },
  "api/Kros.Data.SqlServer.SqlConnectionExtensions.html": {
    "href": "api/Kros.Data.SqlServer.SqlConnectionExtensions.html",
    "title": "Class SqlConnectionExtensions | Kros.Utils",
    "keywords": "Class SqlConnectionExtensions Extension methods for System.Data.SqlClient.SqlConnection class. Inheritance System.Object SqlConnectionExtensions Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public static class SqlConnectionExtensions Methods GetVersion(SqlConnection) Returns System.Data.SqlClient.SqlConnection.ServerVersion string as System.Version object. Declaration public static Version GetVersion(this SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Connection from which SQL Server version is returned. Returns Type Description System.Version SQL Server version as System.Version object."
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewColumnsSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewColumnsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ViewColumnsSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.ViewColumnsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ViewColumnsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ViewColumnsSchemaNames Fields ColumnName Declaration public const string ColumnName = \"COLUMN_NAME\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String ViewCatalog Declaration public const string ViewCatalog = \"VIEW_CATALOG\" Field Value Type Description System.String ViewName Declaration public const string ViewName = \"VIEW_NAME\" Field Value Type Description System.String ViewSchema Declaration public const string ViewSchema = \"VIEW_SCHEMA\" Field Value Type Description System.String"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Welcome to Kros.Libs | Kros.Utils",
    "keywords": "Welcome to Kros.Libs This is Kros.Utils, Kros.Utils.MsAccess, Kros.KORM and Kros.KORM.MsAccess libraries documentation. Kros.Utils Universal library of various tools to simplify the work of the programmer. It is platform-independent (also applicable to desktop applications and server services) and is independent of third-party libraries. Kros.Utils.MsAccess Kros.Utils library extension for MS Access support. Only applicable in the full .NET framework. Kros.KORM Simple and fast micro-ORM framework for .NET. Kros.KORM.MsAccess Kros.KORM library extension for MS Access support. Only applicable in the full .NET framework."
  },
  "api/Kros.Data.SqlServer.SqlServerErrorCode.html": {
    "href": "api/Kros.Data.SqlServer.SqlServerErrorCode.html",
    "title": "Enum SqlServerErrorCode | Kros.Utils",
    "keywords": "Enum SqlServerErrorCode Some of the error codes for Microsoft SQL Server. Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public enum SqlServerErrorCode Remarks Error code is in exception System.Data.SqlClient.SqlException , in the System.Data.SqlClient.SqlException.Number property. List of all error codes is at https://msdn.microsoft.com/en-us/library/cc645603.aspx . Fields Name Description CannotInsertDuplicateKeyRow Cannot insert duplicate key row in object 'objectName' with unique index 'indexName'. ConstraintViolation The ... statement conflicted with the ... constraint. The conflict occurred in database ..., table .... DatabaseAlreadyExists Database 'name' already exists. Choose a different database name. DuplicateKeyViolation Violation of ... constraint 'constraintName'. Cannot insert duplicate key in object 'objectName'. InvalidColumnName Invalid column name 'name'. InvalidObjectName Invalid object name 'name'. ServerNotAccessible A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: Named Pipes Provider, error: 40 - Could not open a connection to SQL Server) TheDatabaseCouldNotBeExclusivelyLocked The database could not be exclusively locked to perform the operation. Unknown Unknown error code."
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewsSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.ViewsSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.ViewsSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.ViewsSchemaNames Inheritance System.Object SqlServerSchemaLoader.ViewsSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class ViewsSchemaNames Fields CheckOption Declaration public const string CheckOption = \"CHECK_OPTION\" Field Value Type Description System.String IsUpdatable Declaration public const string IsUpdatable = \"IS_UPDATABLE\" Field Value Type Description System.String TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String"
  },
  "api/Kros.Extensions.html": {
    "href": "api/Kros.Extensions.html",
    "title": "Namespace Kros.Extensions | Kros.Utils",
    "keywords": "Namespace Kros.Extensions Classes DateTimeExtensions Extension methods for date and time System.DateTime . StringExtensions General extension methods for strings ( System.String )."
  },
  "api/Kros.Extensions.StringExtensions.html": {
    "href": "api/Kros.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | Kros.Utils",
    "keywords": "Class StringExtensions General extension methods for strings ( System.String ). Inheritance System.Object StringExtensions Namespace : Kros.Extensions Assembly : Kros.Utils.dll Syntax public static class StringExtensions Methods Format(String, IFormatProvider, Object) Declaration public static string Format(this string format, IFormatProvider provider, object arg0) Parameters Type Name Description System.String format System.IFormatProvider provider System.Object arg0 Returns Type Description System.String Format(String, IFormatProvider, Object, Object) Declaration public static string Format(this string format, IFormatProvider provider, object arg0, object arg1) Parameters Type Name Description System.String format System.IFormatProvider provider System.Object arg0 System.Object arg1 Returns Type Description System.String Format(String, IFormatProvider, Object, Object, Object) Declaration public static string Format(this string format, IFormatProvider provider, object arg0, object arg1, object arg2) Parameters Type Name Description System.String format System.IFormatProvider provider System.Object arg0 System.Object arg1 System.Object arg2 Returns Type Description System.String Format(String, IFormatProvider, Object[]) Declaration public static string Format(this string format, IFormatProvider provider, params object[] args) Parameters Type Name Description System.String format System.IFormatProvider provider System.Object [] args Returns Type Description System.String Format(String, Object) Declaration public static string Format(this string format, object arg0) Parameters Type Name Description System.String format System.Object arg0 Returns Type Description System.String Format(String, Object, Object) Declaration public static string Format(this string format, object arg0, object arg1) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 Returns Type Description System.String Format(String, Object, Object, Object) Declaration public static string Format(this string format, object arg0, object arg1, object arg2) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 System.Object arg2 Returns Type Description System.String Format(String, Object[]) Declaration public static string Format(this string format, params object[] args) Parameters Type Name Description System.String format System.Object [] args Returns Type Description System.String IsNullOrEmpty(String) Checks, if string value is null , or empty string ( string.Empty ). Declaration public static bool IsNullOrEmpty(this string value) Parameters Type Name Description System.String value Checked stirng. Returns Type Description System.Boolean true , if value is null or string.Empty , false otherwise. IsNullOrWhiteSpace(String) Checks, if string value is null , empty string ( string.Empty ), or string containig only whitespace characters. Declaration public static bool IsNullOrWhiteSpace(this string value) Parameters Type Name Description System.String value Checked string. Returns Type Description System.Boolean true , if value is null , empty string, or string containing only white characters, false otherwise. Left(String, Int32) Returns first length of characters form input string value . Declaration public static string Left(this string value, int length) Parameters Type Name Description System.String value Input string. System.Int32 length Number of characters at the begining of value which are returned. Returns Type Description System.String Begining of the input string value of length length . If value is null , empty string is returned. If value of length is greater than length of value , the value itself is returned. Exceptions Type Condition System.ArgumentException Value of length is less than 0. RemoveDiacritics(String) Returns the same string without diacritic marks (for example čšá becomes csa ). Declaration public static string RemoveDiacritics(this string value) Parameters Type Name Description System.String value Returns Type Description System.String RemoveNewLines(String) Removes new line characters from string. Removed characters are line feed ( \\n ) and carriage return ( \\r ). Declaration public static string RemoveNewLines(this string value) Parameters Type Name Description System.String value Input string. Returns Type Description System.String String without new line characters, or null if value is null . Right(String, Int32) Returns last length of characters form input string value . Declaration public static string Right(this string value, int length) Parameters Type Name Description System.String value Input string. System.Int32 length Number of characters at the end of value which are returned. Returns Type Description System.String End of the input string value of length length . If value is null , empty string is returned. If value of length is greater than length of value , the value itself is returned. Exceptions Type Condition System.ArgumentException Value of length is less than 0."
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UserDefinedTypesSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.UserDefinedTypesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.UserDefinedTypesSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.UserDefinedTypesSchemaNames Inheritance System.Object SqlServerSchemaLoader.UserDefinedTypesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class UserDefinedTypesSchemaNames Fields AssemblyName Declaration public const string AssemblyName = \"ASSEMBLY_NAME\" Field Value Type Description System.String CreateDate Declaration public const string CreateDate = \"CREATE_DATE\" Field Value Type Description System.String CultureInfo Declaration public const string CultureInfo = \"CULTURE_INFO\" Field Value Type Description System.String IsFixedLength Declaration public const string IsFixedLength = \"IS_FIXED_LENGTH\" Field Value Type Description System.String MaxLength Declaration public const string MaxLength = \"MAX_LENGTH\" Field Value Type Description System.String PermissionSetDesc Declaration public const string PermissionSetDesc = \"PERMISSION_SET_DESC\" Field Value Type Description System.String PublicKey Declaration public const string PublicKey = \"PUBLIC_KEY\" Field Value Type Description System.String UdtName Declaration public const string UdtName = \"UDT_NAME\" Field Value Type Description System.String VersionBuild Declaration public const string VersionBuild = \"VERSION_BUILD\" Field Value Type Description System.String VersionMajor Declaration public const string VersionMajor = \"VERSION_MAJOR\" Field Value Type Description System.String VersionMinor Declaration public const string VersionMinor = \"VERSION_MINOR\" Field Value Type Description System.String VersionRevision Declaration public const string VersionRevision = \"VERSION_REVISION\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.TablesSchemaNames.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.TablesSchemaNames.html",
    "title": "Class SqlServerSchemaLoader.TablesSchemaNames | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader.TablesSchemaNames Inheritance System.Object SqlServerSchemaLoader.TablesSchemaNames Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public static class TablesSchemaNames Fields TableCatalog Declaration public const string TableCatalog = \"TABLE_CATALOG\" Field Value Type Description System.String TableName Declaration public const string TableName = \"TABLE_NAME\" Field Value Type Description System.String TableSchema Declaration public const string TableSchema = \"TABLE_SCHEMA\" Field Value Type Description System.String TableType Declaration public const string TableType = \"TABLE_TYPE\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.IDatabaseSchemaCache.html": {
    "href": "api/Kros.Data.Schema.IDatabaseSchemaCache.html",
    "title": "Interface IDatabaseSchemaCache | Kros.Utils",
    "keywords": "Interface IDatabaseSchemaCache Interface for classes which loads and caches database schema. Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface IDatabaseSchemaCache Remarks Loading of a database schema can take some time, so it is good to cache loaded schemas for later use. Methods ClearAllSchemas() Clears the whole cache (removes all cached schemas). Declaration void ClearAllSchemas() ClearSchema(Object) Removes cached schema loaded for connection . Declaration void ClearSchema(object connection) Parameters Type Name Description System.Object connection Database connection. GetSchema(Object) Returns database schema connection . Declaration DatabaseSchema GetSchema(object connection) Parameters Type Name Description System.Object connection database connection. Returns Type Description DatabaseSchema Loaded database schema. RefreshSchema(Object) Loads database schema for connection . The schema is loaded directly from database even when it is already cached. New loaded schema is cached. Declaration DatabaseSchema RefreshSchema(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description DatabaseSchema Loaded database schema."
  },
  "api/Kros.Net.HttpResponseMessageExtensions.html": {
    "href": "api/Kros.Net.HttpResponseMessageExtensions.html",
    "title": "Class HttpResponseMessageExtensions | Kros.Utils",
    "keywords": "Class HttpResponseMessageExtensions Extensions method for System.Net.Http.HttpResponseMessage class. Inheritance System.Object HttpResponseMessageExtensions Namespace : Kros.Net Assembly : Kros.Utils.dll Syntax public static class HttpResponseMessageExtensions Methods GetAntiForgeryTokenAsync(HttpResponseMessage) Extracts anti-forgery token from the HTTP response. Z HTTP odpovede získa hodnotu anti-forgery tokenu. Ten sa získa iba v prípade, že odpoveď je úspešná, tzn. jej StatusCode má hodnotu 2xx. Declaration public static Task<string> GetAntiForgeryTokenAsync(this HttpResponseMessage response) Parameters Type Name Description System.Net.Http.HttpResponseMessage response HTTP response from which the anti-forgery token is extracted. Returns Type Description System.Threading.Tasks.Task < System.String > Value of the anti-forgery token or null , if the token was not found or the response is not successful. Remarks The token is extracted only if the respons was successful ( System.Net.Http.HttpResponseMessage.IsSuccessStatusCode ). The response's content is searched for form's field with the name AntiForgeryTokenFieldName . If that field is found, it's value is returned."
  },
  "api/Kros.IO.PathFormatter.html": {
    "href": "api/Kros.IO.PathFormatter.html",
    "title": "Class PathFormatter | Kros.Utils",
    "keywords": "Class PathFormatter Helper for formatting file paths. It takes care of maximum path length and of creating the path, which does not yet exists on disk. Inheritance System.Object PathFormatter Namespace : Kros.IO Assembly : Kros.Utils.dll Syntax public class PathFormatter Remarks The class is useful for example in exports, when there are multiple files generated by export. The user of the application sets just output folder and file names are generated automatically based on exported data. The class ensures, that the generated paths are valid (do not contain invalid characters) and that they are not too long. It also checks the existence of files. If there already exists a file, counter is added to generated path. It is even possible to add own string as an additional information to generated paths. Static property Default is created for simple direct use of PathFormatter . Properties CounterClosingString Closing string for counter, which is inserted into file/folder name. The counter is enclosed between CounterOpeningString and CounterClosingString . Default value is right parenthesis ) . Declaration public string CounterClosingString { get; set; } Property Value Type Description System.String Remarks When set, invalid path characters in the value are replaced using ReplaceInvalidPathChars(String) . CounterOpeningString Opening string for counter, which is inserted into file/folder name. The counter is enclosed between CounterOpeningString and CounterClosingString . Default value is left parenthesis ( . Declaration public string CounterOpeningString { get; set; } Property Value Type Description System.String Remarks When set, invalid path characters in the value are replaced using ReplaceInvalidPathChars(String) . Default Default instance for simpler direct use. Declaration public static PathFormatter Default { get; } Property Value Type Description PathFormatter InfoClosingString Closing string for additional information, which is inserted into file/folder name. Additional information is enclosed between InfoOpeningString and InfoClosingString . Default value is right parenthesis ) . Declaration public string InfoClosingString { get; set; } Property Value Type Description System.String Remarks When set, invalid path characters in the value are replaced using ReplaceInvalidPathChars(String) . InfoOpeningString Opening string for additional information, which is inserted into file/folder name. Additional information is enclosed between InfoOpeningString and InfoClosingString . Default value is left parenthesis ( . Declaration public string InfoOpeningString { get; set; } Property Value Type Description System.String Remarks When set, invalid path characters in the value are replaced using ReplaceInvalidPathChars(String) . MaxPathLength Maximum path length. Intended for internal use. Declaration protected int MaxPathLength { get; set; } Property Value Type Description System.Int32 Methods FileExists(String) Checks if file filePath exists. Method is intended for internal use. Declaration public virtual bool FileExists(string filePath) Parameters Type Name Description System.String filePath Path to file. Returns Type Description System.Boolean true if file exists, false otherwise. FolderExists(String) Checks if folder folderPath exists. Method is intended for internal use. Declaration public virtual bool FolderExists(string folderPath) Parameters Type Name Description System.String folderPath Path to folder. Returns Type Description System.Boolean true if folder exists, false otherwise. FormatDateForPath(DateTime) Formats date for use in file/folder names. Default format is yyyy_MM_dd . Declaration protected virtual string FormatDateForPath(DateTime value) Parameters Type Name Description System.DateTime value Date to format. Returns Type Description System.String Remarks Minimum ( System.DateTime.MinValue ) and maximum ( System.DateTime.MaxValue ) values are not formatted, but empty string is returned. FormatNewPath(String, String) Formats folder folder and file name fileName to the resulting path and ensures, that the file does not exist. The counter is added to file name if the path exists. Declaration public string FormatNewPath(string folder, string fileName) Parameters Type Name Description System.String folder Folder path. System.String fileName File name. Returns Type Description System.String Remarks If file already exists at generated path, such counter is added to the file name ( (1) , (2) ...), to make the path to non-existing file. If resulting path is too long, file name is shortened to make it valid. Shortened is original fileName - if counter was added, it is preserved. FormatNewPath(String, String, String) Formats folder folder and file name fileName to the resulting path. Additional info info is added to the file name and it is ensured, that the file does not exist. The counter is added to file name if the path exists. Declaration public string FormatNewPath(string folder, string fileName, string info) Parameters Type Name Description System.String folder Folder path. System.String fileName File name. System.String info Additional info added to the file name. Returns Type Description System.String Remarks Additional info info is added to the file name enclosed between InfoOpeningString and InfoClosingString . So if fileName is exported.xml and info is Lorem ipsum , resulting file name is exported (Lorem ipsum).xml . If file already exists at generated path, such counter is added to the file name ( (1) , (2) ...), to make the path to non-existing false , so final file name may be exported (Lorem ipsum) (1).xml . If resulting path is too long, the file name is shortened to make the path correct. Shortened is the original fileName , additional info info and possible counter are preserved. FormatPath(String, String) Formats folder folder and file name fileName to the resulting path. It does not check if the file already exist. Declaration public string FormatPath(string folder, string fileName) Parameters Type Name Description System.String folder Folder path. System.String fileName File name. Returns Type Description System.String Remarks If resulting path is too long, the file name is shortened to make the path correct. FormatPath(String, String, String) Formats folder folder and file name fileName to the resulting path. Additional info info is added to the file name. It does not check if the file already exist. Declaration public string FormatPath(string folder, string fileName, string info) Parameters Type Name Description System.String folder Folder path. System.String fileName File name. System.String info Additional info added to the file name. Returns Type Description System.String Remarks Additional info info is added to the file name enclosed between InfoOpeningString and InfoClosingString . So if fileName is exported.xml and info is Lorem ipsum , resulting file name is exported (Lorem ipsum).xml . If resulting path is too long, the file name is shortened to make the path correct. Shortened is the original fileName , additional info info is preserved. FormatPaths<TKey>(String, String, Dictionary<TKey, String>) Creates a list of paths to files. The paths are created with base folder baseFolder , base file name baseFileName and additional information for individual files fileInfos . Declaration public Dictionary<TKey, string> FormatPaths<TKey>(string baseFolder, string baseFileName, Dictionary<TKey, string> fileInfos) Parameters Type Name Description System.String baseFolder Base folder for generated file paths. System.String baseFileName Base file name. All paths are created with this file name with additional info added. System.Collections.Generic.Dictionary <TKey, System.String > fileInfos Additional informations added to individual file names. Returns Type Description System.Collections.Generic.Dictionary <TKey, System.String > Dictionary with the same keys as int fileInfos , where for each key a file path is generated. Type Parameters Name Description TKey Type of the key in additional info dictionary fileInfos . The same keys are in the returned dictionary with generated file paths. Remarks For every key and value in fileInfos si generated a file path in resultng dictionary. File paths are created using FormatPath(String, String, String) , meaning that file name is created as baseFileName with additional information added from fileInfos and joined with baseFolder . If needed, resulting paths are shortened to be valid. All of the resulting paths are shortened the same way and in such a way that the longest of them must be valid. Base file name baseFileName is shortened, additional informations are preserved. Resulting paths are checked if they already exists, and if so, a counter is added to the filename. So returned generated paths do not exist on file system (at least at the time of their generation). Examples If baseFolder is C:\\lorem\\ipsum , baseFileName is filename.xml and values in fileInfos are: key additional file name info 1 some info 1 2 some info 2 3 some info 3 Created list of paths is: key path 1 C:\\lorem\\ipsum\\filename (some info 1).xml 2 C:\\lorem\\ipsum\\filename (some info 2).xml 3 C:\\lorem\\ipsum\\filename (some info 3).xml FormatPathsInSubfolder<TKey>(String, String, Dictionary<TKey, String>) Creates a list of paths to files. The paths are created with base folder baseFolder , to which a subfolder is added with the same name as value of baseFileName without extension. File names are created as value of baseFileName and additional information from fileInfos . Declaration public Dictionary<TKey, string> FormatPathsInSubfolder<TKey>(string baseFolder, string baseFileName, Dictionary<TKey, string> fileInfos) Parameters Type Name Description System.String baseFolder Base folder for generated file paths. Another subfolder is added with the same name as the file name baseFileName without theextension. System.String baseFileName Base file name. All paths are created with this file name with additional info added. At the same time this value (without the extension) is used as a subfolder name in baseFolder . System.Collections.Generic.Dictionary <TKey, System.String > fileInfos Additional informations added to individual file names. Returns Type Description System.Collections.Generic.Dictionary <TKey, System.String > Dictionary with the same keys as int fileInfos , where for each key a file path is generated. Type Parameters Name Description TKey Type of the key in additional info dictionary fileInfos . The same keys are in the returned dictionary with generated file paths. Remarks For every key and value in fileInfos si generated a file path in resultng dictionary. At first, base path baseFolder is extended with subfolder with name as file name in baseFileName (without extension). File paths are then created using FormatPath(String, String, String) , meaning that file name is created as baseFileName with additional information added from fileInfos . If needed, resulting paths are shortened to be valid. All of the resulting paths are shortened the same way and in such a way that the longest of them must be valid. The value of base file name baseFileName is shortened before it is added as a subfolder to baseFolder . So when shortening occurs, the subfolder and file names are shortened. Additional informations are preserved. Resulting paths are checked if they already exists, and if so, a counter is added to the filename. So returned generated paths do not exist on file system (at least at the time of their generation). Examples If baseFolder is C:\\lorem\\ipsum , baseFileName is filename.xml and values in fileInfos are: key additional file name info 1 some info 1 2 some info 2 3 some info 3 Created list of paths is: key path 1 C:\\lorem\\ipsum\\filename\\filename (some info 1).xml 2 C:\\lorem\\ipsum\\filename\\filename (some info 2).xml 3 C:\\lorem\\ipsum\\filename\\filename (some info 3).xml FormatPathsInSubfolder<TKey>(String, String, String, Dictionary<TKey, String>) Creates a list of paths to files. The paths are created with base folder baseFolder , to which a subfolder is added. Subfolder name is the same name as value of baseFileName without extension and subfolderInfo is added to it. File names are created as value of baseFileName and additional information from fileInfos . Declaration public Dictionary<TKey, string> FormatPathsInSubfolder<TKey>(string baseFolder, string baseFileName, string subfolderInfo, Dictionary<TKey, string> fileInfos) Parameters Type Name Description System.String baseFolder Base folder for generated file paths. Another subfolder is added with the same name as the file name baseFileName without theextension. System.String baseFileName Base file name. All paths are created with this file name with additional info added. At the same time this value (without the extension) is used as a subfolder name in baseFolder . System.String subfolderInfo Additional info added to subfolder name. System.Collections.Generic.Dictionary <TKey, System.String > fileInfos Additional informations added to individual file names. Returns Type Description System.Collections.Generic.Dictionary <TKey, System.String > Dictionary with the same keys as in fileInfos , where for each key a file path is generated. Type Parameters Name Description TKey Type of the key in additional info dictionary fileInfos . The same keys are in the returned dictionary with generated file paths. Remarks For every key and value in fileInfos si generated a file path in resultng dictionary. At first, base path baseFolder is extended with subfolder with name as file name in baseFileName (without extension) and subfolderInfo . File paths are then created using FormatPath(String, String, String) , meaning that file name is created as baseFileName with additional information added from fileInfos . If needed, resulting paths are shortened to be valid. All of the resulting paths are shortened the same way and in such a way that the longest of them must be valid. The value of base file name baseFileName is shortened before it is added as a subfolder to baseFolder . So when shortening occurs, the subfolder and file names are shortened. Additional informations fileInfos and subfolderInfo are preserved. Resulting paths are checked if they already exists, and if so, a counter is added to the filename. So returned generated paths do not exist on file system (at least at the time of their generation). Examples If baseFolder is C:\\lorem\\ipsum , baseFileName is filename.xml , subfolderInfo is subfolder info and values in fileInfos are: key additional file name info 1 some info 1 2 some info 2 3 some info 3 Created list of paths is: key path 1 C:\\lorem\\ipsum\\filename (subfolder info)\\filename (some info 1).xml 2 C:\\lorem\\ipsum\\filename (subfolder info)\\filename (some info 2).xml 3 C:\\lorem\\ipsum\\filename (subfolder info)\\filename (some info 3).xml FormatSeasonForPath(DateTime, DateTime) Formats season from - to for use in file/folder names. Declaration public virtual string FormatSeasonForPath(DateTime from, DateTime to) Parameters Type Name Description System.DateTime from Start of the season. System.DateTime to End of the season. Returns Type Description System.String Remarks If any value is minimum or maximum date ( System.DateTime.MinValue , System.DateTime.MaxValue ), the value is not used. For the formatting itself is used the method FormatDateForPath(DateTime) ."
  },
  "api/Kros.Data.Schema.ColumnSchemaCollection.html": {
    "href": "api/Kros.Data.Schema.ColumnSchemaCollection.html",
    "title": "Class ColumnSchemaCollection | Kros.Utils",
    "keywords": "Class ColumnSchemaCollection List of columns for table TableSchema . Inheritance System.Object System.Collections.ObjectModel.Collection < ColumnSchema > System.Collections.ObjectModel.KeyedCollection < System.String , ColumnSchema > ColumnSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class ColumnSchemaCollection : KeyedCollection<string, ColumnSchema>, IList<ColumnSchema>, ICollection<ColumnSchema>, IList, ICollection, IReadOnlyList<ColumnSchema>, IReadOnlyCollection<ColumnSchema>, IEnumerable<ColumnSchema>, IEnumerable Remarks To the columns added to this list is automatically set their Table . The column can belong only to one table. Constructors ColumnSchemaCollection(TableSchema) Creates a new column list for table . Declaration public ColumnSchemaCollection(TableSchema table) Parameters Type Name Description TableSchema table Table to which column list belongs. Exceptions Type Condition System.ArgumentNullException Value of table is null . Properties Table The table to which belongs this ColumnSchemaCollection . Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods GetKeyForItem(ColumnSchema) Declaration protected override string GetKeyForItem(ColumnSchema item) Parameters Type Name Description ColumnSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ColumnSchema>.GetKeyForItem(Kros.Data.Schema.ColumnSchema) InsertItem(Int32, ColumnSchema) Declaration protected override void InsertItem(int index, ColumnSchema item) Parameters Type Name Description System.Int32 index ColumnSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ColumnSchema>.InsertItem(System.Int32, Kros.Data.Schema.ColumnSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ColumnSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.Data.IdGeneratorFactories.html": {
    "href": "api/Kros.Data.IdGeneratorFactories.html",
    "title": "Class IdGeneratorFactories | Kros.Utils",
    "keywords": "Class IdGeneratorFactories Helper class for ID generator factories ( IIdGeneratorFactory ) for different databases. Factories are registered in the class using Register<TConnection>(String, Func<DbConnection, IIdGeneratorFactory>, Func<String, IIdGeneratorFactory>) method. Two factory methods are registered for every connection (database) type. One for creating generator with connection instance and one with connection string. Inheritance System.Object IdGeneratorFactories Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public static class IdGeneratorFactories Remarks SqlServerIdGeneratorFactory is automatically registered. Methods GetFactory(DbConnection) Returns IIdGeneratorFactory for specified connection . Declaration public static IIdGeneratorFactory GetFactory(DbConnection connection) Parameters Type Name Description System.Data.Common.DbConnection connection Database connection. Returns Type Description IIdGeneratorFactory Instance of IIdGeneratorFactory . Exceptions Type Condition System.InvalidOperationException Factory for type of connection is not registered. GetFactory(String, String) Returns IIdGeneratorFactory for specified connectionString and database type adoClientName . Declaration public static IIdGeneratorFactory GetFactory(string connectionString, string adoClientName) Parameters Type Name Description System.String connectionString Connection string for database. System.String adoClientName Name, which specifies database type. Returns Type Description IIdGeneratorFactory Instance of IIdGeneratorFactory . Exceptions Type Condition System.InvalidOperationException Factory for database type specified by adoClientName is not registered. Register<TConnection>(String, Func<DbConnection, IIdGeneratorFactory>, Func<String, IIdGeneratorFactory>) Registers ID generator factory methods factoryByConnection and factoryByConnectionString for database specified by connection type TConnection and client name adoClientName . Declaration public static void Register<TConnection>(string adoClientName, Func<DbConnection, IIdGeneratorFactory> factoryByConnection, Func<string, IIdGeneratorFactory> factoryByConnectionString) where TConnection : DbConnection Parameters Type Name Description System.String adoClientName Name of the database client. It identifies specific database. For example client name for SqlServerIdGeneratorFactory is \"System.Data.SqlClient\" ( ClientId ). System.Func < System.Data.Common.DbConnection , IIdGeneratorFactory > factoryByConnection Factory method for creating IIdGeneratorFactory with connection instance. System.Func < System.String , IIdGeneratorFactory > factoryByConnectionString Factory method for creating IIdGeneratorFactory with connection string. Type Parameters Name Description TConnection Database connection type. Exceptions Type Condition System.ArgumentNullException Value of any argument is null . System.ArgumentException Value of adoClientName is empty string, or string containing only whitespace characters. See Also IIdGeneratorFactory IIdGenerator"
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerColumnSchema.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerColumnSchema.html",
    "title": "Class SqlServerColumnSchema | Kros.Utils",
    "keywords": "Class SqlServerColumnSchema Table's column schema for Microsoft SQL Server. Inheritance System.Object ColumnSchema SqlServerColumnSchema Inherited Members ColumnSchema.DefaultDefaultValue ColumnSchema.DefaultAllowNull ColumnSchema.DefaultSize ColumnSchema.DefaultPrecision ColumnSchema.DefaultScale ColumnSchema.Table ColumnSchema.Name ColumnSchema.FullName ColumnSchema.AllowNull ColumnSchema.DefaultValue ColumnSchema.Size ColumnSchema.Precision ColumnSchema.Scale ColumnSchema.ToStringDefaultValue() Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerColumnSchema : ColumnSchema Constructors SqlServerColumnSchema(String) Declaration public SqlServerColumnSchema(string name) Parameters Type Name Description System.String name SqlServerColumnSchema(String, Boolean) Declaration public SqlServerColumnSchema(string name, bool allowNull) Parameters Type Name Description System.String name System.Boolean allowNull SqlServerColumnSchema(String, Boolean, Object) Declaration public SqlServerColumnSchema(string name, bool allowNull, object defaultValue) Parameters Type Name Description System.String name System.Boolean allowNull System.Object defaultValue SqlServerColumnSchema(String, Boolean, Object, Int32) Creates an instance of column schema with name and specified parameters. Declaration public SqlServerColumnSchema(string name, bool allowNull, object defaultValue, int size) Parameters Type Name Description System.String name Column's name System.Boolean allowNull Specifies if column accepts NULL value. System.Object defaultValue Column's default value. System.Int32 size Maximum length of text columns. If value is 0 , maximum length is unlimited. Exceptions Type Condition System.ArgumentNullException Value of name is null . System.ArgumentException Value of name is empty string, or string containing only whitespace characters. Properties SqlDbType Data type of the column. Declaration public SqlDbType SqlDbType { get; set; } Property Value Type Description System.Data.SqlDbType Methods SetupParameter(IDataParameter) Sets-up command parameter param according to the column schema. Declaration public override void SetupParameter(IDataParameter param) Parameters Type Name Description System.Data.IDataParameter param Parameter for System.Data.IDbCommand commands. Overrides ColumnSchema.SetupParameter(IDataParameter) Remarks Method should set parameters data type, and other specific values (size for VARCHAR , precision and scale for float columns). Exceptions Type Condition System.ArgumentException Value of param is not of type System.Data.SqlClient.SqlParameter . ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Data.BulkActions.IBulkActionDataReader.html": {
    "href": "api/Kros.Data.BulkActions.IBulkActionDataReader.html",
    "title": "Interface IBulkActionDataReader | Kros.Utils",
    "keywords": "Interface IBulkActionDataReader Interface for data source used in bulk actions ( IBulkInsert , IBulkUpdate ). Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public interface IBulkActionDataReader : IDisposable Properties FieldCount Columns count of the data row. Declaration int FieldCount { get; } Property Value Type Description System.Int32 Methods GetName(Int32) Returns column name at position i . Declaration string GetName(int i) Parameters Type Name Description System.Int32 i Index of column. Returns Type Description System.String Column name. Exceptions Type Condition System.IndexOutOfRangeException Zadaný index bol mimo rozsah stĺpcov 0 až FieldCount . GetOrdinal(String) Return index of column with name name . Declaration int GetOrdinal(string name) Parameters Type Name Description System.String name Column name. Returns Type Description System.Int32 Index of column. GetString(Int32) Gets the value of the specified column as an instance of System.String . Declaration string GetString(int i) Parameters Type Name Description System.Int32 i The zero-based column ordinal. Returns Type Description System.String The value of the specified column. GetValue(Int32) Returns value of column at index i . Declaration object GetValue(int i) Parameters Type Name Description System.Int32 i Column index. Returns Type Description System.Object Object - value of column. Exceptions Type Condition System.IndexOutOfRangeException Defined index is not between 0 and FieldCount . IsDBNull(Int32) Gets a value that indicates whether the column contains non-existent or missing values. Declaration bool IsDBNull(int i) Parameters Type Name Description System.Int32 i The zero-based column ordinal. Returns Type Description System.Boolean true if the specified column value is System.DBNull or null , otherwise false. Read() Moves reader to next record. Declaration bool Read() Returns Type Description System.Boolean true if next record exists and reader is moved, false if next record does not exist."
  },
  "api/Kros.Data.Schema.DatabaseSchemaCache.html": {
    "href": "api/Kros.Data.Schema.DatabaseSchemaCache.html",
    "title": "Class DatabaseSchemaCache | Kros.Utils",
    "keywords": "Class DatabaseSchemaCache Implementation of IDatabaseSchemaCache . It allows to load database schemas after adding appropriate loaders ( AddSchemaLoader(IDatabaseSchemaLoader, ISchemaCacheKeyGenerator) ). Loading of a database schema is quite slow, that's why loaded schemas are cached. On next request for the same schema, it is not loaded from database, but returned from cache. Inheritance System.Object DatabaseSchemaCache Implements IDatabaseSchemaCache Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class DatabaseSchemaCache : IDatabaseSchemaCache Remarks It is necessary to initialize DatabaseSchemaCache with loaders ( IDatabaseSchemaLoader ) and every loader must have its cache key generator ( ISchemaCacheKeyGenerator ). Different cache key generators should generate different keys. There is a property Default intended for simple static use, so it is not necessary to create own instance. Properties Default Instance of DatabaseSchemaCache intended for simple static use. By default, it contains a loader for Microsoft SQL Server ( SqlServerSchemaLoader ). Declaration public static DatabaseSchemaCache Default { get; } Property Value Type Description DatabaseSchemaCache Methods AddSchemaLoader(IDatabaseSchemaLoader, ISchemaCacheKeyGenerator) Adds loader together with its cache key generator keyGenerator to the inner loaders list. Declaration public void AddSchemaLoader(IDatabaseSchemaLoader loader, ISchemaCacheKeyGenerator keyGenerator) Parameters Type Name Description IDatabaseSchemaLoader loader Database schema loader. ISchemaCacheKeyGenerator keyGenerator Schema cache key generator for loader . Exceptions Type Condition System.ArgumentNullException Value of loader or keyGenerator is null . ClearAllSchemas() Declaration public void ClearAllSchemas() ClearSchema(Object) Declaration public void ClearSchema(object connection) Parameters Type Name Description System.Object connection Exceptions Type Condition System.InvalidOperationException The cache does not contain a loader for database type specified by connection . ClearSchemaLoaders() Removes all database schema loaders. Declaration public void ClearSchemaLoaders() GetSchema(Object) Declaration public DatabaseSchema GetSchema(object connection) Parameters Type Name Description System.Object connection Returns Type Description DatabaseSchema Exceptions Type Condition System.InvalidOperationException The cache does not contain a loader for database type specified by connection . RefreshSchema(Object) Declaration public DatabaseSchema RefreshSchema(object connection) Parameters Type Name Description System.Object connection Returns Type Description DatabaseSchema Exceptions Type Condition System.InvalidOperationException The cache does not contain a loader for database type specified by connection . RemoveSchemaLoader(IDatabaseSchemaLoader) Removes specified loader from inner loaders list. Declaration public void RemoveSchemaLoader(IDatabaseSchemaLoader loader) Parameters Type Name Description IDatabaseSchemaLoader loader Database schema loader to be removed. Implements IDatabaseSchemaCache"
  },
  "api/Kros.Data.Schema.ForeignKeySchemaCollection.html": {
    "href": "api/Kros.Data.Schema.ForeignKeySchemaCollection.html",
    "title": "Class ForeignKeySchemaCollection | Kros.Utils",
    "keywords": "Class ForeignKeySchemaCollection List of foreign keys for table TableSchema . Inheritance System.Object System.Collections.ObjectModel.Collection < ForeignKeySchema > System.Collections.ObjectModel.KeyedCollection < System.String , ForeignKeySchema > ForeignKeySchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class ForeignKeySchemaCollection : KeyedCollection<string, ForeignKeySchema>, IList<ForeignKeySchema>, ICollection<ForeignKeySchema>, IList, ICollection, IReadOnlyList<ForeignKeySchema>, IReadOnlyCollection<ForeignKeySchema>, IEnumerable<ForeignKeySchema>, IEnumerable Remarks To the foreign keys added to this list is automatically set their Table . Foreign key can belong only to one table. Constructors ForeignKeySchemaCollection(TableSchema) Creates a new foreign key list for table . Declaration public ForeignKeySchemaCollection(TableSchema table) Parameters Type Name Description TableSchema table Table to which foreign key list belongs. Exceptions Type Condition System.ArgumentNullException Value of table is null . Methods Add(String, String, IEnumerable<String>, String, IEnumerable<String>) Creates a definition of foreign key with the name and adds it to the list. Columns primaryKeyTableColumns in parent table primaryKeyTableName are referenced in columns foreignKeyTableColumns of child table foreignKeyTableName . Declaration public ForeignKeySchema Add(string name, string primaryKeyTableName, IEnumerable<string> primaryKeyTableColumns, string foreignKeyTableName, IEnumerable<string> foreignKeyTableColumns) Parameters Type Name Description System.String name Name of the foreign key. System.String primaryKeyTableName . System.Collections.Generic.IEnumerable < System.String > primaryKeyTableColumns List of columns in parent table. System.String foreignKeyTableName . System.Collections.Generic.IEnumerable < System.String > foreignKeyTableColumns List of columns in child table. Returns Type Description ForeignKeySchema Exceptions Type Condition System.ArgumentNullException Value of any argument is null . System.ArgumentException Add(String, String, String, String, String) Creates a definition of foreign key with the name and adds it to the list. Column primaryKeyTableColumn in parent table primaryKeyTableName is referenced in column foreignKeyTableColumn of child table foreignKeyTableName . Declaration public ForeignKeySchema Add(string name, string primaryKeyTableName, string primaryKeyTableColumn, string foreignKeyTableName, string foreignKeyTableColumn) Parameters Type Name Description System.String name Name of the foreign key. System.String primaryKeyTableName . System.String primaryKeyTableColumn Column name in primary key table. System.String foreignKeyTableName . System.String foreignKeyTableColumn Column name in foreign key table. Returns Type Description ForeignKeySchema Created foreign key. Exceptions Type Condition System.ArgumentNullException Value of any parameter is null . System.ArgumentException Value of any parameter is empty string, or string containing only whitespace characters. GetKeyForItem(ForeignKeySchema) Declaration protected override string GetKeyForItem(ForeignKeySchema item) Parameters Type Name Description ForeignKeySchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ForeignKeySchema>.GetKeyForItem(Kros.Data.Schema.ForeignKeySchema) InsertItem(Int32, ForeignKeySchema) Declaration protected override void InsertItem(int index, ForeignKeySchema item) Parameters Type Name Description System.Int32 index ForeignKeySchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ForeignKeySchema>.InsertItem(System.Int32, Kros.Data.Schema.ForeignKeySchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.ForeignKeySchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.UnitTests.SqlServerDatabaseTestBase.html": {
    "href": "api/Kros.UnitTests.SqlServerDatabaseTestBase.html",
    "title": "Class SqlServerDatabaseTestBase | Kros.Utils",
    "keywords": "Class SqlServerDatabaseTestBase Base class for database integration tests on Microsoft SQL Server. The class takes care of creating and initialization of database. Inherited classes just use connection to this database. Inheritance System.Object SqlServerDatabaseTestBase Namespace : Kros.UnitTests Assembly : Kros.Utils.dll Syntax public abstract class SqlServerDatabaseTestBase : IDisposable Remarks Database with unique name is created at the begining and it is deleted when Dispose() is called. The created database may be initielized with own scripts in DatabaseInitScripts . Descendant classes must override BaseConnectionString to set the connection to SQL Server. public class SomeDatabaseTests : Kros.UnitTests.SqlServerDatabaseTestBase { protected override string BaseConnectionString => \"Data Source=TESTSQLSERVER;Integrated Security=True\"; [Fact] public void Test1() { using (var cmd = ServerHelper.Connection.CreateCommand()) { // Use cmd to execute queries. } } [Fact] public void Test2() { } } Constructors SqlServerDatabaseTestBase() Creates an instance of SqlServerDatabaseTestBase . Declaration public SqlServerDatabaseTestBase() Properties BaseConnectionString Base connection string to SQL Server, where database will be created. It does not need to have database name, because it will be generated to make it unique. Declaration protected abstract string BaseConnectionString { get; } Property Value Type Description System.String See Also SqlServerTestHelper BaseConnectionString BaseDatabaseName Base database name. GUID is appended to this name to make it unique. Default implementation returns class full name ( GetType().FullName ) with underscore ( _ ) appended. Declaration protected virtual string BaseDatabaseName { get; } Property Value Type Description System.String See Also BaseDatabaseName SqlServerTestHelper DatabaseInitScripts SQL scripts for initializing created database. Declaration protected virtual IEnumerable<string> DatabaseInitScripts { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Remarks The class creates a database for tests using SqlServerTestHelper . If it is necessary to have this database initialized (tables, data...), this is the list of scripts for it. ServerHelper Helper for accessing database using its Connection property. Declaration protected SqlServerTestHelper ServerHelper { get; } Property Value Type Description SqlServerTestHelper Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing CheckDisposed() Checks, if the instance was disposed of ( Dispose() was called). If yes, it throws System.ObjectDisposedException . Declaration protected void CheckDisposed() Exceptions Type Condition System.ObjectDisposedException If the instance was already disposed of."
  },
  "api/Kros.Data.Schema.TableSchemaCollection.html": {
    "href": "api/Kros.Data.Schema.TableSchemaCollection.html",
    "title": "Class TableSchemaCollection | Kros.Utils",
    "keywords": "Class TableSchemaCollection List of tables for DatabaseSchema . Inheritance System.Object System.Collections.ObjectModel.Collection < TableSchema > System.Collections.ObjectModel.KeyedCollection < System.String , TableSchema > TableSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class TableSchemaCollection : KeyedCollection<string, TableSchema>, IList<TableSchema>, ICollection<TableSchema>, IList, ICollection, IReadOnlyList<TableSchema>, IReadOnlyCollection<TableSchema>, IEnumerable<TableSchema>, IEnumerable Remarks To the tables added to this list is automatically set their Database . The table can belong only to one database. Constructors TableSchemaCollection(DatabaseSchema) Creates a new table list for database . Declaration public TableSchemaCollection(DatabaseSchema database) Parameters Type Name Description DatabaseSchema database Database to which table belongs. Exceptions Type Condition System.ArgumentNullException Value of database is null . Properties Database Database to which table list belongs. Declaration public DatabaseSchema Database { get; } Property Value Type Description DatabaseSchema Methods Add(String) Creates a new TableSchema with name and adds it to the list. Declaration public TableSchema Add(string name) Parameters Type Name Description System.String name Name of the created table. Returns Type Description TableSchema Created table schema. GetKeyForItem(TableSchema) Declaration protected override string GetKeyForItem(TableSchema item) Parameters Type Name Description TableSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.TableSchema>.GetKeyForItem(Kros.Data.Schema.TableSchema) InsertItem(Int32, TableSchema) Declaration protected override void InsertItem(int index, TableSchema item) Parameters Type Name Description System.Int32 index TableSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.TableSchema>.InsertItem(System.Int32, Kros.Data.Schema.TableSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.TableSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.Utils.IDiContainer.html": {
    "href": "api/Kros.Utils.IDiContainer.html",
    "title": "Interface IDiContainer | Kros.Utils",
    "keywords": "Interface IDiContainer Interface for DI (Dependency Injection) container. Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public interface IDiContainer : IDisposable Methods CreateChildContainer() Create a child container. Declaration IDiContainer CreateChildContainer() Returns Type Description IDiContainer The new child container. Remarks A child container shares the parent's configuration, but can be configured with different settings or lifetime. GetInstance(Type) Resolves the instance of type instanceType . Declaration object GetInstance(Type instanceType) Parameters Type Name Description System.Type instanceType Type to resolve from container. Returns Type Description System.Object Object of type instanceType . GetInstance(Type, String) Resolves the named instance of type instanceType . Declaration object GetInstance(Type instanceType, string name) Parameters Type Name Description System.Type instanceType Type to resolve from container. System.String name Name of the desired instance. Returns Type Description System.Object Object of type instanceType . GetInstance<T>() Resolves the instance of type T . Declaration T GetInstance<T>() Returns Type Description T Object of type T . Type Parameters Name Description T Type to resolve from container. GetInstance<T>(String) Resolves the named instance of type T . Declaration T GetInstance<T>(string name) Parameters Type Name Description System.String name Name of the desired instance. Returns Type Description T Object of type T . Type Parameters Name Description T Type to resolve from container. Register<T>() Registers a class type. Declaration IDiContainer Register<T>() Returns Type Description IDiContainer Container instance for fluent registration. Type Parameters Name Description T Class type. Register<T>(Func<IDiContainer, T>) Register interface or class type using lambda function. Declaration IDiContainer Register<T>(Func<IDiContainer, T> lambda) Parameters Type Name Description System.Func < IDiContainer , T> lambda Function which takes current DI container as parameter and creates a new instance of T . Returns Type Description IDiContainer Type Parameters Name Description T Interface or class type. Register<T>(String) Registers a class type with name name . Declaration IDiContainer Register<T>(string name) Parameters Type Name Description System.String name Name of the registered class type. Returns Type Description IDiContainer Type Parameters Name Description T Class type. Register<T>(String, Func<IDiContainer, T>) Register named interface or class type using lambda function. Declaration IDiContainer Register<T>(string name, Func<IDiContainer, T> lambda) Parameters Type Name Description System.String name Name of the registered interface or class type. System.Func < IDiContainer , T> lambda Returns Type Description IDiContainer Type Parameters Name Description T Interface or class type. Register<TFrom, TTo>() Registers a interface-class pair. Declaration IDiContainer Register<TFrom, TTo>() where TTo : TFrom Returns Type Description IDiContainer Type Parameters Name Description TFrom Registered interface. TTo Registered class type that implements TFrom . Register<TFrom, TTo>(String) Registers a named interface-class pair. Declaration IDiContainer Register<TFrom, TTo>(string name) where TTo : TFrom Parameters Type Name Description System.String name Name of the registered interface. Returns Type Description IDiContainer Type Parameters Name Description TFrom TTo RegisterInstance<T>() Registers class type as singleton. Declaration IDiContainer RegisterInstance<T>() Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(T) Registers class instance. Declaration IDiContainer RegisterInstance<T>(T instance) Parameters Type Name Description T instance Registered instance. Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(Func<IDiContainer, T>) Registers class instance as sigleton using function. Declaration IDiContainer RegisterInstance<T>(Func<IDiContainer, T> lambda) Parameters Type Name Description System.Func < IDiContainer , T> lambda Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(String) Registers class type with name name as singleton. Declaration IDiContainer RegisterInstance<T>(string name) Parameters Type Name Description System.String name Name of the registered class type. Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(String, T) Registers class instance. Declaration IDiContainer RegisterInstance<T>(string name, T instance) Parameters Type Name Description System.String name Name of the registered class type. T instance Registered instance. Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<T>(String, Func<IDiContainer, T>) Registers named class instance as sigleton using function. Declaration IDiContainer RegisterInstance<T>(string name, Func<IDiContainer, T> lambda) Parameters Type Name Description System.String name Name, under which is type registered. System.Func < IDiContainer , T> lambda Returns Type Description IDiContainer Type Parameters Name Description T Registered class type. RegisterInstance<TFrom, TTo>() Registers a interface-class pair as singleton. Declaration IDiContainer RegisterInstance<TFrom, TTo>() where TTo : TFrom Returns Type Description IDiContainer Type Parameters Name Description TFrom TTo RegisterInstance<TFrom, TTo>(String) Registers a named interface to class type pair. class type TTo as a singleton. Declaration IDiContainer RegisterInstance<TFrom, TTo>(string name) where TTo : TFrom Parameters Type Name Description System.String name Name of the registered class type. Returns Type Description IDiContainer Type Parameters Name Description TFrom TTo"
  },
  "api/Kros.UnitTests.SqlServerTestHelper.html": {
    "href": "api/Kros.UnitTests.SqlServerTestHelper.html",
    "title": "Class SqlServerTestHelper | Kros.Utils",
    "keywords": "Class SqlServerTestHelper Helper class for unit testing using real SQL Server database. Inheritance System.Object SqlServerTestHelper Namespace : Kros.UnitTests Assembly : Kros.Utils.dll Syntax public class SqlServerTestHelper : IDisposable Remarks In general, the unit tests should not require real database. But in some cases, this is necessary. This class manages creation of temporary database, which the tests will use. Database name is generated to be unique and after finishing ( Dispose() ), the database is deleted. Connection to created database is available in Connection property. Examples // V connection string-u nie je určená databáza, pretože tá sa automaticky vytvorí s náhodným // menom. Na konci práce sa databáza automaticky vymaže. private const string BaseConnectionString = \"Data Source=SQLSERVER;Integrated Security=True;\"; private const string CreateTestTableScript = @\"CREATE TABLE [dbo].[TestTable] ( [Id] [int] NOT NULL, [Name] [nvarchar](255) NULL, CONSTRAINT [PK_TestTable] PRIMARY KEY CLUSTERED ([Id] ASC) ON [PRIMARY] ) ON [PRIMARY];\"; [Fact] public void DoSomeTestWithDatabase() { using (var serverHelper = new SqlServerTestHelper(BaseConnectionString, \"TestDatabase\", CreateTestTableScript)) { // Do tests with connection serverHelper.Connection. } } Constructors SqlServerTestHelper(String, String) Creates an instance of helper with connection baseConnectionString and base database name baseDatabaseName . Declaration public SqlServerTestHelper(string baseConnectionString, string baseDatabaseName) Parameters Type Name Description System.String baseConnectionString Base connection string to SQL Server, where database will be created. System.String baseDatabaseName Base database name. GUID will be appended to it. The value is not required. SqlServerTestHelper(String, String, IEnumerable<String>) Creates an instance of helper with connection baseConnectionString and base database name baseDatabaseName . Created database will be initialized with scripts from initDatabaseScripts . Declaration public SqlServerTestHelper(string baseConnectionString, string baseDatabaseName, IEnumerable<string> initDatabaseScripts) Parameters Type Name Description System.String baseConnectionString Base connection string to SQL Server, where database will be created. System.String baseDatabaseName Base database name. GUID will be appended to it. The value is not required. System.Collections.Generic.IEnumerable < System.String > initDatabaseScripts List of scripts, which are executed when database is created. For example, they can be scripts to create necessary tables and data. SqlServerTestHelper(String, String, String) Creates an instance of helper with connection baseConnectionString and base database name baseDatabaseName . Created database will be initialized with script initDatabaseScript . Declaration public SqlServerTestHelper(string baseConnectionString, string baseDatabaseName, string initDatabaseScript) Parameters Type Name Description System.String baseConnectionString Base connection string to SQL Server, where database will be created. System.String baseDatabaseName Base database name. GUID will be appended to it. The value is not required. System.String initDatabaseScript The script, which is executed when database is created. For example, it can be script to create some table. Properties BaseConnectionString Base connection string to SQL Server, where temporary database will be created. Database name does not need to be set in connection stirng, because it will be generated. Declaration public string BaseConnectionString { get; } Property Value Type Description System.String BaseDatabaseName Base database name. GUID is appended to this name, to make database name unique. If BaseDatabaseName is empty, the database name will be just that GUID. Declaration public string BaseDatabaseName { get; } Property Value Type Description System.String Connection Connection to created database. Declaration public SqlConnection Connection { get; } Property Value Type Description System.Data.SqlClient.SqlConnection Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GenerateDatabaseName() Generates a name for database, which is created on SQL Server. Returned name is composed from BaseDatabaseName (if specified) and generated GUID, to make it unique. Declaration protected virtual string GenerateDatabaseName() Returns Type Description System.String Database name. InitDatabase() Initializes a database. Method is executed once after creating the database and it executes scripts which were specified in constructor. Declaration protected virtual void InitDatabase()"
  },
  "api/Kros.Data.Schema.IndexColumnSchemaCollection.html": {
    "href": "api/Kros.Data.Schema.IndexColumnSchemaCollection.html",
    "title": "Class IndexColumnSchemaCollection | Kros.Utils",
    "keywords": "Class IndexColumnSchemaCollection List of index columns. Inheritance System.Object System.Collections.ObjectModel.Collection < IndexColumnSchema > System.Collections.ObjectModel.KeyedCollection < System.String , IndexColumnSchema > IndexColumnSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexColumnSchemaCollection : KeyedCollection<string, IndexColumnSchema>, IList<IndexColumnSchema>, ICollection<IndexColumnSchema>, IList, ICollection, IReadOnlyList<IndexColumnSchema>, IReadOnlyCollection<IndexColumnSchema>, IEnumerable<IndexColumnSchema>, IEnumerable Remarks To the columns added to this list is automatically set their Index . The column can belong only to one index. Constructors IndexColumnSchemaCollection(IndexSchema) Creates a new list of columns for index index . Declaration public IndexColumnSchemaCollection(IndexSchema index) Parameters Type Name Description IndexSchema index The index to which column list belongs. Exceptions Type Condition System.ArgumentNullException Value of index is null . Properties Index The index to which column list belongs. Declaration public IndexSchema Index { get; } Property Value Type Description IndexSchema Methods Add(String) Creates the new index column with name columnName and adds it to the list. Declaration public IndexColumnSchema Add(string columnName) Parameters Type Name Description System.String columnName Column name. Returns Type Description IndexColumnSchema Created column. Exceptions Type Condition System.ArgumentNullException Value of columnName is null . System.ArgumentException Value of columnName is empty string, or string containing only whitespace characters. Add(String, SortOrder) Creates the new index column with name columnName and sort order order and adds it to the list. Declaration public IndexColumnSchema Add(string columnName, SortOrder order) Parameters Type Name Description System.String columnName Column name. SortOrder order Column sort order. Returns Type Description IndexColumnSchema Created column. Exceptions Type Condition System.ArgumentNullException Value of columnName is null . System.ArgumentException Value of columnName is empty string, or string containing only whitespace characters. GetKeyForItem(IndexColumnSchema) Declaration protected override string GetKeyForItem(IndexColumnSchema item) Parameters Type Name Description IndexColumnSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexColumnSchema>.GetKeyForItem(Kros.Data.Schema.IndexColumnSchema) InsertItem(Int32, IndexColumnSchema) Declaration protected override void InsertItem(int index, IndexColumnSchema item) Parameters Type Name Description System.Int32 index IndexColumnSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexColumnSchema>.InsertItem(System.Int32, Kros.Data.Schema.IndexColumnSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexColumnSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.Data.SqlServer.SqlServerIdGeneratorFactory.html": {
    "href": "api/Kros.Data.SqlServer.SqlServerIdGeneratorFactory.html",
    "title": "Class SqlServerIdGeneratorFactory | Kros.Utils",
    "keywords": "Class SqlServerIdGeneratorFactory Creates an instances of SqlServerIdGenerator for specified database. Inheritance System.Object SqlServerIdGeneratorFactory Implements IIdGeneratorFactory Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerIdGeneratorFactory : IIdGeneratorFactory Examples public class PeopleService { private IIdGeneratorFactory _idGeneratorFactory; public PeopleService(IIdGeneratorFactory idGeneratorFactory) { _idGeneratorFactory = Check.NotNull(idGeneratorFactory, nameof(idGeneratorFactory)); } public void GenerateData() { using (var idGenerator = _idGeneratorFactory.GetGenerator(\"people\", 1000)) { for (int i = 0; i < 1800; i++) { var person = new Person() { Id = idGenerator.GetNext() }; } } } } Constructors SqlServerIdGeneratorFactory(SqlConnection) Initializes a new instance of the SqlServerIdGeneratorFactory class. Declaration public SqlServerIdGeneratorFactory(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. ID generators create IDs for tables in this database. SqlServerIdGeneratorFactory(String) Initializes a new instance of the SqlServerIdGeneratorFactory class. Declaration public SqlServerIdGeneratorFactory(string connectionString) Parameters Type Name Description System.String connectionString Database connection string. ID generators create IDs for tables in this database. Methods GetGenerator(String) Creates an instance of IIdGenerator for table tableName . Declaration public IIdGenerator GetGenerator(string tableName) Parameters Type Name Description System.String tableName Table for which IDs will be generated. Returns Type Description IIdGenerator The instance of IIdGenerator . GetGenerator(String, Int32) Creates an instance of IIdGenerator for table tableName with specified batchSize . Declaration public IIdGenerator GetGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName Table for which IDs will be generated. System.Int32 batchSize IDs batch size. This number of IDs will be reserved for later use. Returns Type Description IIdGenerator The instance of IIdGenerator . Register() Registers factory methods for creating an instance of factory into IdGeneratorFactories . Declaration public static void Register() Implements IIdGeneratorFactory See Also SqlServerIdGenerator IdGeneratorFactories"
  },
  "api/Kros.Data.Schema.ISchemaCacheKeyGenerator-1.html": {
    "href": "api/Kros.Data.Schema.ISchemaCacheKeyGenerator-1.html",
    "title": "Interface ISchemaCacheKeyGenerator<T> | Kros.Utils",
    "keywords": "Interface ISchemaCacheKeyGenerator<T> Inherited Members ISchemaCacheKeyGenerator.GenerateKey(Object) Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface ISchemaCacheKeyGenerator<T> : ISchemaCacheKeyGenerator Type Parameters Name Description T Database connection type. Methods GenerateKey(T) Declaration string GenerateKey(T connection) Parameters Type Name Description T connection Returns Type Description System.String"
  },
  "api/Kros.Data.Schema.IDatabaseSchemaLoader-1.html": {
    "href": "api/Kros.Data.Schema.IDatabaseSchemaLoader-1.html",
    "title": "Interface IDatabaseSchemaLoader<T> | Kros.Utils",
    "keywords": "Interface IDatabaseSchemaLoader<T> Inherited Members IDatabaseSchemaLoader.SupportsConnectionType(Object) IDatabaseSchemaLoader.LoadSchema(Object) IDatabaseSchemaLoader.LoadTableSchema(Object, String) Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface IDatabaseSchemaLoader<T> : IDatabaseSchemaLoader Type Parameters Name Description T Database connection type which loader works with. Methods LoadSchema(T) Declaration DatabaseSchema LoadSchema(T connection) Parameters Type Name Description T connection Returns Type Description DatabaseSchema LoadTableSchema(T, String) Declaration TableSchema LoadTableSchema(T connection, string tableName) Parameters Type Name Description T connection System.String tableName Returns Type Description TableSchema SupportsConnectionType(T) Declaration bool SupportsConnectionType(T connection) Parameters Type Name Description T connection Returns Type Description System.Boolean"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Kros.Utils | Kros.Utils",
    "keywords": "Welcome to Kros.Utils Kros.Utils is universal library of various tools to simplify the work of the programmer. View in GitHub | Download Latest"
  },
  "api/Kros.Data.BulkActions.BulkUpdateBase.html": {
    "href": "api/Kros.Data.BulkActions.BulkUpdateBase.html",
    "title": "Class BulkUpdateBase | Kros.Utils",
    "keywords": "Class BulkUpdateBase Common base class for BulkUpdate. Inheritance System.Object BulkUpdateBase SqlServerBulkUpdate Implements IBulkUpdate Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public abstract class BulkUpdateBase : IBulkUpdate, IDisposable Fields _connection Connection. Declaration protected IDbConnection _connection Field Value Type Description System.Data.IDbConnection _disposeOfConnection true if dispose of the connection is necessary, otherwise false . Declaration protected bool _disposeOfConnection Field Value Type Description System.Boolean PrefixTempTable Temporary table prefix. Declaration protected const char PrefixTempTable = '#' Field Value Type Description System.Char Properties DestinationTableName Destination table name in database. Declaration public string DestinationTableName { get; set; } Property Value Type Description System.String ExternalTransaction External transaction in which the operation is executed. Declaration public IDbTransaction ExternalTransaction { get; protected set; } Property Value Type Description System.Data.IDbTransaction PrimaryKeyColumn Primary key. Declaration public string PrimaryKeyColumn { get; set; } Property Value Type Description System.String TempTableAction Action, executed on temporary table. Declaration public Action<IDbConnection, IDbTransaction, string> TempTableAction { get; set; } Property Value Type Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > Remarks Action, which will be executed on temp table (additional modification of data). Methods CreateBulkInsert() Creates BulkInsert. Declaration protected abstract IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Bulk insert. CreateCommandForPrimaryKey() Returns command for creating primary key. Declaration protected abstract IDbCommand CreateCommandForPrimaryKey() Returns Type Description System.Data.IDbCommand CreateTempTable(IDataReader, String) Creates temporary table by reader . Declaration protected abstract void CreateTempTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader Reader for accessing data. System.String tempTableName Name of temporary table. Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing DoneTempTableAsync(String, Boolean) Ends work with temporary table. Declaration protected virtual Task DoneTempTableAsync(string tempTableName, bool useAsync) Parameters Type Name Description System.String tempTableName Temporary table name. System.Boolean useAsync true if action can by executed asynchronously. Returns Type Description System.Threading.Tasks.Task GetColumnNamesForTempTable(IDataReader) List of temporary table columns. Declaration protected string GetColumnNamesForTempTable(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Reader for accesing data. Returns Type Description System.String GetTempTableName() Returns name of temporary table. Declaration protected abstract string GetTempTableName() Returns Type Description System.String GetTempTableNameForBulkInsert(String) Returns formatted name of temporary table for BulkInsert. Declaration protected virtual string GetTempTableNameForBulkInsert(string name) Parameters Type Name Description System.String name Temporary table name. Returns Type Description System.String GetUpdateColumnNames(IDataReader, String) List of temporary table columns. Declaration protected string GetUpdateColumnNames(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader Reader for accesing data. System.String tempTableName Temporary table name. Returns Type Description System.String InvokeAction(String) Invokes action in temporary database. Declaration protected abstract void InvokeAction(string tempTableName) Parameters Type Name Description System.String tempTableName Name of temporary table. Update(IBulkActionDataReader) Updates all data from source reader . Declaration public void Update(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Update(DataTable) Updates all data from table table . Declaration public void Update(DataTable table) Parameters Type Name Description System.Data.DataTable table Data source. Update(IDataReader) Updates all data from source reader . Declaration public void Update(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. UpdateAsync(IBulkActionDataReader) Asynchronously updates all data from source reader . Declaration public Task UpdateAsync(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. UpdateAsync(DataTable) Asynchronously updates all data from table table . Declaration public Task UpdateAsync(DataTable table) Parameters Type Name Description System.Data.DataTable table Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. UpdateAsync(IDataReader) Asynchronously updates all data from source reader . Declaration public Task UpdateAsync(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. UpdateDestinationTableAsync(IDataReader, String, Boolean) Executes update on destination table. Declaration protected abstract Task UpdateDestinationTableAsync(IDataReader reader, string tempTableName, bool useAsync) Parameters Type Name Description System.Data.IDataReader reader Reader for accesing data. System.String tempTableName Temporary table name. System.Boolean useAsync true if action can by executed asynchronously. Returns Type Description System.Threading.Tasks.Task Implements IBulkUpdate"
  },
  "api/Kros.Data.SqlServer.SqlServerIdGenerator.html": {
    "href": "api/Kros.Data.SqlServer.SqlServerIdGenerator.html",
    "title": "Class SqlServerIdGenerator | Kros.Utils",
    "keywords": "Class SqlServerIdGenerator The unique ID generator for Microsoft SQL Server. Inheritance System.Object IdGeneratorBase SqlServerIdGenerator Implements IIdGenerator Inherited Members IdGeneratorBase.TableName IdGeneratorBase.BatchSize IdGeneratorBase.Connection IdGeneratorBase.GetNext() IdGeneratorBase.Dispose(Boolean) IdGeneratorBase.Dispose() Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerIdGenerator : IdGeneratorBase, IIdGenerator, IDisposable Remarks In general, the generator should be created using SqlServerIdGeneratorFactory . Examples public class PeopleService { private IIdGeneratorFactory _idGeneratorFactory; public PeopleService(IIdGeneratorFactory idGeneratorFactory) { _idGeneratorFactory = Check.NotNull(idGeneratorFactory, nameof(idGeneratorFactory)); } public void GenerateData() { using (var idGenerator = _idGeneratorFactory.GetGenerator(\"people\", 1000)) { for (int i = 0; i < 1800; i++) { var person = new Person() { Id = idGenerator.GetNext() }; } } } } Constructors SqlServerIdGenerator(SqlConnection, String, Int32) Creates a generator for table tableName in database connection with batch size batchSize . Declaration public SqlServerIdGenerator(SqlConnection connection, string tableName, int batchSize) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connection or tableName is null . System.ArgumentException Value of batchSize is less or equal than 0. SqlServerIdGenerator(String, String, Int32) Creates a generator for table tableName in database connectionString with batch size batchSize . Declaration public SqlServerIdGenerator(string connectionString, string tableName, int batchSize) Parameters Type Name Description System.String connectionString Connection string to the database. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connectionString or tableName is null . System.ArgumentException Methods CreateConnection(String) Creates a database connection instance. Declaration protected override DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description System.Data.Common.DbConnection Specific instance of System.Data.Common.DbConnection . Overrides IdGeneratorBase.CreateConnection(String) GetIdStoreTableCreationScript() Returns SQL script for creating table in database for storing IDs. Declaration public static string GetIdStoreTableCreationScript() Returns Type Description System.String GetNewIdFromDbCore() Returns new ID from database. In this method is ensured, that the Connection is opened. Declaration protected override int GetNewIdFromDbCore() Returns Type Description System.Int32 Next ID. Overrides IdGeneratorBase.GetNewIdFromDbCore() GetStoredProcedureCreationScript() Returns SQL script for creating stored procedure, which generates IDs. Declaration public static string GetStoredProcedureCreationScript() Returns Type Description System.String InitDatabaseForIdGenerator() Initializes database for using ID generator. Initialization can mean creating necessary table and stored procedure. Declaration public override void InitDatabaseForIdGenerator() Overrides IdGeneratorBase.InitDatabaseForIdGenerator() Implements IIdGenerator See Also IdGeneratorFactories SqlServerIdGeneratorFactory"
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerParseDefaultValueEventArgs.html",
    "title": "Class SqlServerParseDefaultValueEventArgs | Kros.Utils",
    "keywords": "Class SqlServerParseDefaultValueEventArgs Arguments for the event ParseDefaultValue . Inheritance System.Object System.EventArgs SqlServerParseDefaultValueEventArgs Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerParseDefaultValueEventArgs : EventArgs Constructors SqlServerParseDefaultValueEventArgs(String, String, SqlDbType, String, Object) Creates and initializes instance of arguments. Declaration public SqlServerParseDefaultValueEventArgs(string tableName, string columnName, SqlDbType sqlDbType, string defaultValueString, object defaultValue) Parameters Type Name Description System.String tableName System.String columnName System.Data.SqlDbType sqlDbType System.String defaultValueString System.Object defaultValue Value, which was obtained by default parser. Properties ColumnName Column name which default value is being parsed. Declaration public string ColumnName { get; } Property Value Type Description System.String DefaultValue Value, which was obtained by default parser. Set this value, when using custom logic for parsing default value in event handler. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object DefaultValueString Default value of a column. It is the string which is being parsed. Declaration public string DefaultValueString { get; } Property Value Type Description System.String Handled Flag indicating if default value was parsed using custom logic in event handler. Set this to true if you set your own default value in DefaultValue . Declaration public bool Handled { get; set; } Property Value Type Description System.Boolean SqlDbType Data type of column which default value is being parsed. Declaration public SqlDbType SqlDbType { get; } Property Value Type Description System.Data.SqlDbType TableName Table which schema is being loaded. Declaration public string TableName { get; } Property Value Type Description System.String"
  },
  "api/Kros.Data.IdGeneratorBase.html": {
    "href": "api/Kros.Data.IdGeneratorBase.html",
    "title": "Class IdGeneratorBase | Kros.Utils",
    "keywords": "Class IdGeneratorBase Base class for simple creation of implementations of IIdGenerator . Inheritance System.Object IdGeneratorBase SqlServerIdGenerator Implements IIdGenerator Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public abstract class IdGeneratorBase : IIdGenerator, IDisposable Constructors IdGeneratorBase(DbConnection, String, Int32) Creates an instance of ID generator for table tableName in database connection and with specified batchSize . Declaration public IdGeneratorBase(DbConnection connection, string tableName, int batchSize) Parameters Type Name Description System.Data.Common.DbConnection connection Database connection. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connection or tableName is null . System.ArgumentException Value of batchSize is less or equal than 0. IdGeneratorBase(String, String, Int32) Creates an instance of ID generator for table tableName in database connectionString and with specified batchSize . Declaration public IdGeneratorBase(string connectionString, string tableName, int batchSize) Parameters Type Name Description System.String connectionString Database connection string. System.String tableName Table name, for which IDs are generated. System.Int32 batchSize IDs batch size. Saves round trips to database for IDs. Exceptions Type Condition System.ArgumentNullException Value of connectionString or tableName is null . System.ArgumentException Properties BatchSize Batch size - saves roundtrips into database. Declaration public int BatchSize { get; } Property Value Type Description System.Int32 Connection Database connection. Declaration protected DbConnection Connection { get; } Property Value Type Description System.Data.Common.DbConnection TableName Table name for which IDs are generated. Declaration public string TableName { get; } Property Value Type Description System.String Methods CreateConnection(String) Creates a database connection instance. Declaration protected abstract DbConnection CreateConnection(string connectionString) Parameters Type Name Description System.String connectionString Connection string. Returns Type Description System.Data.Common.DbConnection Specific instance of System.Data.Common.DbConnection . Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetNewIdFromDbCore() Returns new ID from database. In this method is ensured, that the Connection is opened. Declaration protected abstract int GetNewIdFromDbCore() Returns Type Description System.Int32 Next ID. GetNext() Declaration public virtual int GetNext() Returns Type Description System.Int32 InitDatabaseForIdGenerator() Initializes database for using ID generator. Initialization can mean creating necessary table and stored procedure. Declaration public abstract void InitDatabaseForIdGenerator() Implements IIdGenerator See Also IIdGenerator"
  },
  "api/Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.html": {
    "href": "api/Kros.Data.BulkActions.SqlServer.SqlServerBulkUpdate.html",
    "title": "Class SqlServerBulkUpdate | Kros.Utils",
    "keywords": "Class SqlServerBulkUpdate Class for fast data update for SQL Server. Inheritance System.Object BulkUpdateBase SqlServerBulkUpdate Implements IBulkUpdate Inherited Members BulkUpdateBase.PrefixTempTable BulkUpdateBase._connection BulkUpdateBase._disposeOfConnection BulkUpdateBase.ExternalTransaction BulkUpdateBase.DestinationTableName BulkUpdateBase.TempTableAction BulkUpdateBase.PrimaryKeyColumn BulkUpdateBase.Update(IBulkActionDataReader) BulkUpdateBase.UpdateAsync(IBulkActionDataReader) BulkUpdateBase.Update(IDataReader) BulkUpdateBase.UpdateAsync(IDataReader) BulkUpdateBase.Update(DataTable) BulkUpdateBase.UpdateAsync(DataTable) BulkUpdateBase.GetTempTableNameForBulkInsert(String) BulkUpdateBase.GetColumnNamesForTempTable(IDataReader) BulkUpdateBase.GetUpdateColumnNames(IDataReader, String) BulkUpdateBase.Dispose(Boolean) BulkUpdateBase.Dispose() Namespace : Kros.Data.BulkActions.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerBulkUpdate : BulkUpdateBase, IBulkUpdate, IDisposable Examples private class BulkUpdateItem { public int Id { get; set; } public string Name { get; set; } } public void UpdateManyItems() { IEnumerable<BulkUpdateItem> data = GetItems(); using (var reader = new EnumerableDataReader<BulkUpdateItem>(data, new string[] { \"Id\", \"Name\" })) { using (var bulkUpdate = new SqlServerBulkUpdate(\"connection string\")) { bulkUpdate.DestinationTableName = \"TableName\"; bulkUpdate.PrimaryKeyColumn = \"Id\"; bulkUpdate.Update(reader); } } } Constructors SqlServerBulkUpdate(SqlConnection) Initialize new instance of SqlServerBulkUpdate with database connection connection . Declaration public SqlServerBulkUpdate(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be updated, connection has to be opened. If transaction is running on connection, contructor with defined external transaction has to be used. SqlServerBulkUpdate(SqlConnection, SqlTransaction) Initialize new instance of SqlServerBulkUpdate with database connection connection , and external transaction externalTransaction . Declaration public SqlServerBulkUpdate(SqlConnection connection, SqlTransaction externalTransaction) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be updated, connection has to be opened. If transaction is running on connection, transaction has to be defined in externalTransaction . System.Data.SqlClient.SqlTransaction externalTransaction External transaction, in which bulk update is executed. SqlServerBulkUpdate(String) Initialize new instance of SqlServerBulkUpdate with connectionString . Declaration public SqlServerBulkUpdate(string connectionString) Parameters Type Name Description System.String connectionString Connection string for database connection. Methods CreateBulkInsert() Creates BulkInsert. Declaration protected override IBulkInsert CreateBulkInsert() Returns Type Description IBulkInsert Bulk insert. Overrides BulkUpdateBase.CreateBulkInsert() CreateCommandForPrimaryKey() Returns command for creating primary key. Declaration protected override IDbCommand CreateCommandForPrimaryKey() Returns Type Description System.Data.IDbCommand Overrides BulkUpdateBase.CreateCommandForPrimaryKey() CreateTempTable(IDataReader, String) Creates temporary table by reader . Declaration protected override void CreateTempTable(IDataReader reader, string tempTableName) Parameters Type Name Description System.Data.IDataReader reader Reader for accessing data. System.String tempTableName Name of temporary table. Overrides BulkUpdateBase.CreateTempTable(IDataReader, String) DoneTempTableAsync(String, Boolean) Ends work with temporary table. Declaration protected override Task DoneTempTableAsync(string tempTableName, bool useAsync) Parameters Type Name Description System.String tempTableName Temporary table name. System.Boolean useAsync true if action can by executed asynchronously. Returns Type Description System.Threading.Tasks.Task Overrides BulkUpdateBase.DoneTempTableAsync(String, Boolean) GetTempTableName() Returns name of temporary table. Declaration protected override string GetTempTableName() Returns Type Description System.String Overrides BulkUpdateBase.GetTempTableName() InvokeAction(String) Invokes action in temporary database. Declaration protected override void InvokeAction(string tempTableName) Parameters Type Name Description System.String tempTableName Name of temporary table. Overrides BulkUpdateBase.InvokeAction(String) UpdateDestinationTableAsync(IDataReader, String, Boolean) Executes update on destination table. Declaration protected override Task UpdateDestinationTableAsync(IDataReader reader, string tempTableName, bool useAsync) Parameters Type Name Description System.Data.IDataReader reader Reader for accesing data. System.String tempTableName Temporary table name. System.Boolean useAsync true if action can by executed asynchronously. Returns Type Description System.Threading.Tasks.Task Overrides BulkUpdateBase.UpdateDestinationTableAsync(IDataReader, String, Boolean) Implements IBulkUpdate"
  },
  "api/Kros.Data.Schema.IndexSchemaCollection.html": {
    "href": "api/Kros.Data.Schema.IndexSchemaCollection.html",
    "title": "Class IndexSchemaCollection | Kros.Utils",
    "keywords": "Class IndexSchemaCollection List of indexes for table TableSchema . Inheritance System.Object System.Collections.ObjectModel.Collection < IndexSchema > System.Collections.ObjectModel.KeyedCollection < System.String , IndexSchema > IndexSchemaCollection Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexSchemaCollection : KeyedCollection<string, IndexSchema>, IList<IndexSchema>, ICollection<IndexSchema>, IList, ICollection, IReadOnlyList<IndexSchema>, IReadOnlyCollection<IndexSchema>, IEnumerable<IndexSchema>, IEnumerable Remarks To the indexes added to this list is automatically set their Table . Index can belong only to one table. Constructors IndexSchemaCollection(TableSchema) Creates a new index list for table . Declaration public IndexSchemaCollection(TableSchema table) Parameters Type Name Description TableSchema table Table to which index list belongs. Exceptions Type Condition System.ArgumentNullException Value of table is null . Properties Table The table to which belongs this IndexSchemaCollection . Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods Add(String) Creates an instance of index with name indexName . Created index is added to the list. Declaration public IndexSchema Add(string indexName) Parameters Type Name Description System.String indexName Name of the index. Returns Type Description IndexSchema Created index schema. Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. Add(String, IndexType) Creates an instance of index of type indexType , with name indexName . Created index is added to the list. Declaration public IndexSchema Add(string indexName, IndexType indexType) Parameters Type Name Description System.String indexName Name of the index. IndexType indexType Type of the index. Returns Type Description IndexSchema Created index schema. Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. Add(String, IndexType, Boolean) Creates an instance of index of type indexType , with name indexName and setting if the index is clustered . Created index is added to the list. Declaration public IndexSchema Add(string indexName, IndexType indexType, bool clustered) Parameters Type Name Description System.String indexName Name of the index. IndexType indexType Type of the index. System.Boolean clustered Specifies, if the index is CLUSTERED . Returns Type Description IndexSchema Created index schema. Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. GetKeyForItem(IndexSchema) Declaration protected override string GetKeyForItem(IndexSchema item) Parameters Type Name Description IndexSchema item Returns Type Description System.String Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexSchema>.GetKeyForItem(Kros.Data.Schema.IndexSchema) InsertItem(Int32, IndexSchema) Declaration protected override void InsertItem(int index, IndexSchema item) Parameters Type Name Description System.Int32 index IndexSchema item Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexSchema>.InsertItem(System.Int32, Kros.Data.Schema.IndexSchema) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index Overrides System.Collections.ObjectModel.KeyedCollection<System.String, Kros.Data.Schema.IndexSchema>.RemoveItem(System.Int32)"
  },
  "api/Kros.Data.IIdGenerator.html": {
    "href": "api/Kros.Data.IIdGenerator.html",
    "title": "Interface IIdGenerator | Kros.Utils",
    "keywords": "Interface IIdGenerator Interface for generating IDs for records in database. In general, IDs are just sequential numbers. Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public interface IIdGenerator : IDisposable Remarks Usually one generator generates IDs for just one table. Examples public class PeopleService { private IIdGeneratorFactory _idGeneratorFactory; public PeopleService(IIdGeneratorFactory idGeneratorFactory) { _idGeneratorFactory = Check.NotNull(idGeneratorFactory, nameof(idGeneratorFactory)); } public void GenerateData() { using (var idGenerator = _idGeneratorFactory.GetGenerator(\"people\", 1000)) { for (int i = 0; i < 1800; i++) { var person = new Person() { Id = idGenerator.GetNext() }; } } } } Methods GetNext() Returns next ID. Declaration int GetNext() Returns Type Description System.Int32 Unique ID for record in data table. InitDatabaseForIdGenerator() Initializes database for using ID generator. Initialization can mean creating necessary table and stored procedure. Declaration void InitDatabaseForIdGenerator() See Also SqlServerIdGenerator"
  },
  "api/Kros.Data.BulkActions.BulkActionDataReader.html": {
    "href": "api/Kros.Data.BulkActions.BulkActionDataReader.html",
    "title": "Class BulkActionDataReader | Kros.Utils",
    "keywords": "Class BulkActionDataReader Wrapper, which extends simple IBulkActionDataReader to more complex System.Data.IDataReader . Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbDataReader BulkActionDataReader Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public class BulkActionDataReader : DbDataReader, IDataReader, IDisposable, IDataRecord, IEnumerable Constructors BulkActionDataReader(IBulkActionDataReader) Creates System.Data.IDataReader over defined reader . Declaration public BulkActionDataReader(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Input reader. Exceptions Type Condition System.ArgumentNullException reader is null . Properties Depth Declaration public override int Depth { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.Depth FieldCount Columns count of the data row. Declaration public override int FieldCount { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.FieldCount HasRows Declaration public override bool HasRows { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.HasRows IsClosed Declaration public override bool IsClosed { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.IsClosed Item[Int32] Declaration public override object this[int i] { get; } Parameters Type Name Description System.Int32 i Property Value Type Description System.Object Overrides System.Data.Common.DbDataReader.Item[System.Int32] Item[String] Declaration public override object this[string name] { get; } Parameters Type Name Description System.String name Property Value Type Description System.Object Overrides System.Data.Common.DbDataReader.Item[System.String] RecordsAffected Declaration public override int RecordsAffected { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.RecordsAffected Methods Close() Declaration public override void Close() Overrides System.Data.Common.DbDataReader.Close() GetBoolean(Int32) Declaration public override bool GetBoolean(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.GetBoolean(System.Int32) GetByte(Int32) Declaration public override byte GetByte(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Byte Overrides System.Data.Common.DbDataReader.GetByte(System.Int32) GetBytes(Int32, Int64, Byte[], Int32, Int32) Declaration public override long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i System.Int64 fieldOffset System.Byte [] buffer System.Int32 bufferoffset System.Int32 length Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32) GetDataTypeName(Int32) Declaration public override string GetDataTypeName(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String Overrides System.Data.Common.DbDataReader.GetDataTypeName(System.Int32) GetDateTime(Int32) Declaration public override DateTime GetDateTime(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.DateTime Overrides System.Data.Common.DbDataReader.GetDateTime(System.Int32) GetDecimal(Int32) Declaration public override decimal GetDecimal(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Decimal Overrides System.Data.Common.DbDataReader.GetDecimal(System.Int32) GetDouble(Int32) Declaration public override double GetDouble(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Double Overrides System.Data.Common.DbDataReader.GetDouble(System.Int32) GetEnumerator() Declaration public override IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Overrides System.Data.Common.DbDataReader.GetEnumerator() GetFieldType(Int32) Declaration public override Type GetFieldType(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Type Overrides System.Data.Common.DbDataReader.GetFieldType(System.Int32) GetFloat(Int32) Declaration public override float GetFloat(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Single Overrides System.Data.Common.DbDataReader.GetFloat(System.Int32) GetGuid(Int32) Declaration public override Guid GetGuid(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Guid Overrides System.Data.Common.DbDataReader.GetGuid(System.Int32) GetChar(Int32) Declaration public override char GetChar(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Char Overrides System.Data.Common.DbDataReader.GetChar(System.Int32) GetChars(Int32, Int64, Char[], Int32, Int32) Declaration public override long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) Parameters Type Name Description System.Int32 i System.Int64 fieldoffset System.Char [] buffer System.Int32 bufferoffset System.Int32 length Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32) GetInt16(Int32) Declaration public override short GetInt16(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int16 Overrides System.Data.Common.DbDataReader.GetInt16(System.Int32) GetInt32(Int32) Declaration public override int GetInt32(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int32 Overrides System.Data.Common.DbDataReader.GetInt32(System.Int32) GetInt64(Int32) Declaration public override long GetInt64(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int64 Overrides System.Data.Common.DbDataReader.GetInt64(System.Int32) GetName(Int32) Returns column name at index i . Declaration public override string GetName(int i) Parameters Type Name Description System.Int32 i Index of column. Returns Type Description System.String Column name. Overrides System.Data.Common.DbDataReader.GetName(System.Int32) Exceptions Type Condition System.IndexOutOfRangeException Defined index is not between 0 and FieldCount . GetOrdinal(String) Returns column index by its name name . Declaration public override int GetOrdinal(string name) Parameters Type Name Description System.String name Name of column. Returns Type Description System.Int32 Index of column. Overrides System.Data.Common.DbDataReader.GetOrdinal(System.String) GetSchemaTable() Declaration public override DataTable GetSchemaTable() Returns Type Description System.Data.DataTable Overrides System.Data.Common.DbDataReader.GetSchemaTable() GetString(Int32) Declaration public override string GetString(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String Overrides System.Data.Common.DbDataReader.GetString(System.Int32) GetValue(Int32) Returns value of column. Declaration public override object GetValue(int i) Parameters Type Name Description System.Int32 i Column index. Returns Type Description System.Object Object value of column. Overrides System.Data.Common.DbDataReader.GetValue(System.Int32) Exceptions Type Condition System.IndexOutOfRangeException Defined index is not between 0 and FieldCount . GetValues(Object[]) Declaration public override int GetValues(object[] values) Parameters Type Name Description System.Object [] values Returns Type Description System.Int32 Overrides System.Data.Common.DbDataReader.GetValues(System.Object[]) IsDBNull(Int32) Declaration public override bool IsDBNull(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.IsDBNull(System.Int32) NextResult() Declaration public override bool NextResult() Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.NextResult() Read() Moves reader to next record. Declaration public override bool Read() Returns Type Description System.Boolean true if next record exists and reader is moved, false if there is no next record. Overrides System.Data.Common.DbDataReader.Read()"
  },
  "api/Kros.Data.SqlServer.SqlServerDataHelper.html": {
    "href": "api/Kros.Data.SqlServer.SqlServerDataHelper.html",
    "title": "Class SqlServerDataHelper | Kros.Utils",
    "keywords": "Class SqlServerDataHelper General helpers for Microsoft SQL Server. Inheritance System.Object SqlServerDataHelper Namespace : Kros.Data.SqlServer Assembly : Kros.Utils.dll Syntax public static class SqlServerDataHelper Fields ClientId Identification of Microsoft SQL Server classes (used for example in SqlServerIdGeneratorFactory , SqlServerBulkActionFactory ). Declaration public const string ClientId = \"System.Data.SqlClient\" Field Value Type Description System.String"
  },
  "api/Kros.Data.Schema.TableSchema.html": {
    "href": "api/Kros.Data.Schema.TableSchema.html",
    "title": "Class TableSchema | Kros.Utils",
    "keywords": "Class TableSchema Schema of a database table. Inheritance System.Object TableSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class TableSchema Constructors TableSchema(DatabaseSchema, String) Creates an instance of TableSchema with specified name , which belongs to database . Declaration public TableSchema(DatabaseSchema database, string name) Parameters Type Name Description DatabaseSchema database Database into which table belongs to. Value can be null . System.String name Table's name. Exceptions Type Condition System.ArgumentNullException Value of name is null . System.ArgumentException Value of name is empty string, or string containing only whitespace characters. TableSchema(String) Creates an instance of TableSchema with specified name . Declaration public TableSchema(string name) Parameters Type Name Description System.String name Meno tabuľky. Je povinné. Exceptions Type Condition System.ArgumentNullException Value of name is null . System.ArgumentException Value of name is empty string, or string containing only whitespace characters. Properties Columns Columns of the table. Declaration public ColumnSchemaCollection Columns { get; } Property Value Type Description ColumnSchemaCollection Database Database to which table belongs. Declaration public DatabaseSchema Database { get; } Property Value Type Description DatabaseSchema ForeignKeys List of table's foreign keys. Declaration public ForeignKeySchemaCollection ForeignKeys { get; } Property Value Type Description ForeignKeySchemaCollection Indexes List of table's indexes. Declaration public IndexSchemaCollection Indexes { get; } Property Value Type Description IndexSchemaCollection Name Table's name. Declaration public string Name { get; } Property Value Type Description System.String PrimaryKey Table's primary key. Declaration public IndexSchema PrimaryKey { get; } Property Value Type Description IndexSchema Remarks If table does not have a primary key, value is null . Methods SetPrimaryKey(String, Boolean) Sets primary key with name primaryKeyName and flag clustered . Declaration public IndexSchema SetPrimaryKey(string primaryKeyName, bool clustered) Parameters Type Name Description System.String primaryKeyName Primary key name. System.Boolean clustered If true , primary key is CLUSTERED . Returns Type Description IndexSchema Created primary key or null value, if primary key name was not specified. Remarks If primaryKeyName is null or empty string or white space string, primary key is removed (value of PrimaryKey will be null ). ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Utils.html": {
    "href": "api/Kros.Utils.html",
    "title": "Namespace Kros.Utils | Kros.Utils",
    "keywords": "Namespace Kros.Utils Classes DateTimeProvider Class for \"freezing\" date and time to constant value. Usable for example in tests. Check Helper class for validating method parameters. Every validation throws some kind of System.ArgumentException if it fails ( System.ArgumentException , System.ArgumentNullException , System.ArgumentOutOfRangeException ). Suspender Class for simple work suspending. It is poosible to suspend work ( Suspend() ) several times, but in that case it is necessary to resume ( Kros.Utils.Suspender.Resume ) it the same number of times. The easiest way of suspending work is using the using block. Interfaces IDiContainer Interface for DI (Dependency Injection) container."
  },
  "api/Kros.Data.BulkActions.BulkInsertColumnMapping.html": {
    "href": "api/Kros.Data.BulkActions.BulkInsertColumnMapping.html",
    "title": "Class BulkInsertColumnMapping | Kros.Utils",
    "keywords": "Class BulkInsertColumnMapping Defines the mapping between a column in data source and a column in the destination table for IBulkInsert . Inheritance System.Object BulkInsertColumnMapping Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public class BulkInsertColumnMapping Constructors BulkInsertColumnMapping() Default constructor that initializes a new BulkInsertColumnMapping object. Declaration public BulkInsertColumnMapping() BulkInsertColumnMapping(Int32, Int32) Creates a new column mapping, using column ordinals to refer to source and destination columns. Declaration public BulkInsertColumnMapping(int sourceOrdinal, int destinationOrdinal) Parameters Type Name Description System.Int32 sourceOrdinal The ordinal position of the source column within the data source. System.Int32 destinationOrdinal The ordinal position of the destination column within the destination table. BulkInsertColumnMapping(Int32, String) Creates a new column mapping, using a column ordinal to refer to the source column and a column name for the target column. Declaration public BulkInsertColumnMapping(int sourceOrdinal, string destinationName) Parameters Type Name Description System.Int32 sourceOrdinal The ordinal position of the source column within the data source. System.String destinationName The name of the destination column within the destination table. BulkInsertColumnMapping(String, Int32) Creates a new column mapping, using a column name to refer to the source column and a column ordinal for the target column. Declaration public BulkInsertColumnMapping(string sourceName, int destinationOrdinal) Parameters Type Name Description System.String sourceName The name of the source column within the data source. System.Int32 destinationOrdinal The ordinal position of the destination column within the destination table. BulkInsertColumnMapping(String, String) Creates a new column mapping, using column names to refer to source and destination columns. Declaration public BulkInsertColumnMapping(string sourceName, string destinationName) Parameters Type Name Description System.String sourceName The name of the source column within the data source. System.String destinationName The name of the destination column within the destination table. Properties DestinationName Name of the column being mapped in the destination database table. When set, DestinationOrdinal is set to -1 . Declaration public string DestinationName { get; set; } Property Value Type Description System.String DestinationOrdinal Ordinal value of the destination column within the destination table. When set, DestinationName is set to empty string. Declaration public int DestinationOrdinal { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.IndexOutOfRangeException Value is less than 0. SourceName Name of the column being mapped in the data source. When set, SourceOrdinal is set to -1 . Declaration public string SourceName { get; set; } Property Value Type Description System.String SourceOrdinal The ordinal position of the source column within the data source. When set, SourceName is set to empty string. Declaration public int SourceOrdinal { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.IndexOutOfRangeException Value is less than 0. Methods ToString() Returns mapping in a form \"Source -> Destination\". Declaration public override string ToString() Returns Type Description System.String String Overrides System.Object.ToString()"
  },
  "api/Kros.UnitTests.html": {
    "href": "api/Kros.UnitTests.html",
    "title": "Namespace Kros.UnitTests | Kros.Utils",
    "keywords": "Namespace Kros.UnitTests Classes SqlServerDatabaseTestBase Base class for database integration tests on Microsoft SQL Server. The class takes care of creating and initialization of database. Inherited classes just use connection to this database. SqlServerTestHelper Helper class for unit testing using real SQL Server database."
  },
  "api/Kros.Data.Schema.SqlServer.html": {
    "href": "api/Kros.Data.Schema.SqlServer.html",
    "title": "Namespace Kros.Data.Schema.SqlServer | Kros.Utils",
    "keywords": "Namespace Kros.Data.Schema.SqlServer Classes SqlServerCacheKeyGenerator Cache key generator for Microsoft SQL Server used by DatabaseSchemaCache . SqlServerColumnSchema Table's column schema for Microsoft SQL Server. SqlServerParseDefaultValueEventArgs Arguments for the event ParseDefaultValue . SqlServerSchemaLoader The implementation of IDatabaseSchemaLoader<T> for Microsoft SQL Server. SqlServerSchemaLoader.ColumnSetColumnsSchemaNames SqlServerSchemaLoader.ColumnsSchemaNames SqlServerSchemaLoader.DatabasesSchemaNames SqlServerSchemaLoader.ForeignKeysSchemaNames SqlServerSchemaLoader.IndexColumnsSchemaNames SqlServerSchemaLoader.IndexesSchemaNames SqlServerSchemaLoader.ProcedureParametersSchemaNames SqlServerSchemaLoader.ProceduresSchemaNames SqlServerSchemaLoader.SchemaNames SqlServerSchemaLoader.TablesSchemaNames SqlServerSchemaLoader.UserDefinedTypesSchemaNames SqlServerSchemaLoader.UsersSchemaNames SqlServerSchemaLoader.ViewColumnsSchemaNames SqlServerSchemaLoader.ViewsSchemaNames"
  },
  "api/Kros.Data.BulkActions.SqlServer.html": {
    "href": "api/Kros.Data.BulkActions.SqlServer.html",
    "title": "Namespace Kros.Data.BulkActions.SqlServer | Kros.Utils",
    "keywords": "Namespace Kros.Data.BulkActions.SqlServer Classes SqlServerBulkActionFactory Creates instances of IBulkInsert for bulk inserting. SqlServerBulkInsert Class for fast data inserting into SQL Server. SqlServerBulkUpdate Class for fast data update for SQL Server."
  },
  "api/Kros.Data.Schema.ISchemaCacheKeyGenerator.html": {
    "href": "api/Kros.Data.Schema.ISchemaCacheKeyGenerator.html",
    "title": "Interface ISchemaCacheKeyGenerator | Kros.Utils",
    "keywords": "Interface ISchemaCacheKeyGenerator Cache key generator for DatabaseSchemaCache . Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public interface ISchemaCacheKeyGenerator Methods GenerateKey(Object) Generates a cache key for connection . Declaration string GenerateKey(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description System.String String, which identifies connection ."
  },
  "api/Kros.Utils.Suspender.html": {
    "href": "api/Kros.Utils.Suspender.html",
    "title": "Class Suspender | Kros.Utils",
    "keywords": "Class Suspender Class for simple work suspending. It is poosible to suspend work ( Suspend() ) several times, but in that case it is necessary to resume ( Kros.Utils.Suspender.Resume ) it the same number of times. The easiest way of suspending work is using the using block. Inheritance System.Object Suspender ConnectionHelper Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public class Suspender Remarks It is useful for example in object initialization. During the initialization it is often necessary not to perform certain actions. Standard way is using some flag if the initialization is running. The Suspender class encapsulates the management of this flag, while it is possible to set this flag several times in succession (nested work suspending). Examples private Suspender _initSuspender = new Suspender(); private void Init() { using (_initSuspender.Suspend()) { // Do initialization... } } private void DoWork() { // Do general work. if (!_initSuspender.IsSuspended) { // Do work only when not initializing. } } Properties IsSuspended The flag, if work is ( true ), or not ( false ). Declaration public bool IsSuspended { get; } Property Value Type Description System.Boolean Methods ResumeCore() Used for specific (inherited) suspender implementations. This method is executed when the work is resumed for the last time. So it means it is executed when IsSuspended flag is changing from true to false . Declaration protected virtual void ResumeCore() Remarks Method is intended for implementing custom logic in own suspender when resuming work. It is executed only once during the last work resuming (preceding work resumings do not call ResumeCore() ). The method is called after the IsSuspended flag is changed, so the value of flag while the method is executing is false . Suspend() Suspends the - sets the IsSuspended flag to true . If this method is called several times, it is necessary to call Kros.Utils.Suspender.Resume the same number of times to clear IsSuspended flag. Declaration public IDisposable Suspend() Returns Type Description System.IDisposable Returns helper object, which automatically calls Kros.Utils.Suspender.Resume when disposed of, so it is convenient to use using block. Examples private Suspender _initSuspender = new Suspender(); private void Init() { using (_initSuspender.Suspend()) { // Do initialization... } } private void DoWork() { // Do general work. if (!_initSuspender.IsSuspended) { // Do work only when not initializing. } } SuspendCore() Used for specific (inherited) suspender implementations. This method is executed when Suspend() is called for the first time. So it means it is executed when IsSuspended flag is changing from false to true . Declaration protected virtual void SuspendCore() Remarks Method is intended for implementing custom logic in own suspender when suspending work. It is executed only once during the first call of Suspend() (subsequent calls to Suspend() do not call SuspendCore() ). The method is called before the IsSuspended flag is changed, so the value of flag while the method is executing is false ."
  },
  "api/Kros.Data.IIdGeneratorFactory.html": {
    "href": "api/Kros.Data.IIdGeneratorFactory.html",
    "title": "Interface IIdGeneratorFactory | Kros.Utils",
    "keywords": "Interface IIdGeneratorFactory Interface for factory classes, which create instances of IIdGenerator . Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public interface IIdGeneratorFactory Examples public class PeopleService { private IIdGeneratorFactory _idGeneratorFactory; public PeopleService(IIdGeneratorFactory idGeneratorFactory) { _idGeneratorFactory = Check.NotNull(idGeneratorFactory, nameof(idGeneratorFactory)); } public void GenerateData() { using (var idGenerator = _idGeneratorFactory.GetGenerator(\"people\", 1000)) { for (int i = 0; i < 1800; i++) { var person = new Person() { Id = idGenerator.GetNext() }; } } } } Methods GetGenerator(String) Creates an instance of IIdGenerator for table tableName . Declaration IIdGenerator GetGenerator(string tableName) Parameters Type Name Description System.String tableName Table for which IDs will be generated. Returns Type Description IIdGenerator The instance of IIdGenerator . GetGenerator(String, Int32) Creates an instance of IIdGenerator for table tableName with specified batchSize . Declaration IIdGenerator GetGenerator(string tableName, int batchSize) Parameters Type Name Description System.String tableName Table for which IDs will be generated. System.Int32 batchSize IDs batch size. This number of IDs will be reserved for later use. Returns Type Description IIdGenerator The instance of IIdGenerator . See Also SqlServerIdGeneratorFactory IdGeneratorFactories"
  },
  "api/Kros.Data.Schema.IndexSchema.html": {
    "href": "api/Kros.Data.Schema.IndexSchema.html",
    "title": "Class IndexSchema | Kros.Utils",
    "keywords": "Class IndexSchema Schema of a table's index. Inheritance System.Object IndexSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class IndexSchema Constructors IndexSchema(String) Creates an instance of index with name indexName . Declaration public IndexSchema(string indexName) Parameters Type Name Description System.String indexName Name of the index. Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. IndexSchema(String, IndexType) Creates an instance of index of type indexType , with name indexName . Declaration public IndexSchema(string indexName, IndexType indexType) Parameters Type Name Description System.String indexName Name of the index. IndexType indexType Type of the index. Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. IndexSchema(String, IndexType, Boolean) Creates an instance of index of type indexType , with name indexName and setting if the index is clustered . Declaration public IndexSchema(string indexName, IndexType indexType, bool clustered) Parameters Type Name Description System.String indexName Name of the index. IndexType indexType Type of the index. System.Boolean clustered Specifies, if the index is CLUSTERED . Exceptions Type Condition System.ArgumentNullException Value of indexName is null . System.ArgumentException Value of indexName is empty string, or string containing only whitespace characters. Properties Columns List of index's columns. Declaration public IndexColumnSchemaCollection Columns { get; } Property Value Type Description IndexColumnSchemaCollection IndexType Index type. Declaration public IndexType IndexType { get; } Property Value Type Description IndexType Name Name of the index. It is not possible to set the name, if the index already belongs to some table (value of Table is not null ) Declaration public string Name { get; set; } Property Value Type Description System.String Exceptions Type Condition System.InvalidOperationException Attempt to change the name, but index already belongs to some table. Table Table, to which index belongs. Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Kros.Data.Schema.html": {
    "href": "api/Kros.Data.Schema.html",
    "title": "Namespace Kros.Data.Schema | Kros.Utils",
    "keywords": "Namespace Kros.Data.Schema Classes ColumnSchema Schema of a database table column. ColumnSchema.DefaultValues Columns' default values for individual data types. ColumnSchemaCollection List of columns for table TableSchema . DatabaseSchema Database schema. DatabaseSchemaCache Implementation of IDatabaseSchemaCache . It allows to load database schemas after adding appropriate loaders ( AddSchemaLoader(IDatabaseSchemaLoader, ISchemaCacheKeyGenerator) ). Loading of a database schema is quite slow, that's why loaded schemas are cached. On next request for the same schema, it is not loaded from database, but returned from cache. DatabaseSchemaLoader Helper class for simple loading of database schemas. It contains inner list of different loaders, so it can be used for loading database schema for different databases. Fresh database schema is loaded for every request, it means, loaded schemas are not cached. DefaultValueParsers Standard parsers for columns' default values. The default values in database are stored as string and it is necessary to convert them to the specific column's type. If conversion to desired type fails, the returned value is always null . ForeignKeySchema The schema of the foreign key of the database table. ForeignKeySchemaCollection List of foreign keys for table TableSchema . IndexColumnSchema Schema of a column of an index. IndexColumnSchemaCollection List of index columns. IndexSchema Schema of a table's index. IndexSchemaCollection List of indexes for table TableSchema . TableSchema Schema of a database table. TableSchemaCollection List of tables for DatabaseSchema . Interfaces IDatabaseSchemaCache Interface for classes which loads and caches database schema. IDatabaseSchemaLoader Interface for loading database schema. IDatabaseSchemaLoader<T> ISchemaCacheKeyGenerator Cache key generator for DatabaseSchemaCache . ISchemaCacheKeyGenerator<T> Enums ForeignKeyRule Foreign key rule. Defines what to do with child records when the value of parent record changes or is deleted. IndexType Table index type. SortOrder Sort order of an index column. Delegates DefaultValueParsers.ParseDefaultValueFunction Delegate for function which parses default value."
  },
  "api/Kros.Data.ConnectionHelper.html": {
    "href": "api/Kros.Data.ConnectionHelper.html",
    "title": "Class ConnectionHelper | Kros.Utils",
    "keywords": "Class ConnectionHelper Helper class for opening database connection. It ensures opening and closing of the connection. Inheritance System.Object Suspender ConnectionHelper Inherited Members Suspender.Suspend() Suspender.IsSuspended Namespace : Kros.Data Assembly : Kros.Utils.dll Syntax public class ConnectionHelper : Suspender Methods OpenConnection(IDbConnection) If database connection is closed, it is opened immediately. After disposing of returned object, the connection is closed, but only if it was opened. So when already opened connection is passed in the parameter, nothing is done with it. Declaration public static IDisposable OpenConnection(IDbConnection connection) Parameters Type Name Description System.Data.IDbConnection connection Database connection. Returns Type Description System.IDisposable Helper object, which closes connection when it is disposed of. Exceptions Type Condition System.ArgumentNullException Value of connection is null . ResumeCore() Declaration protected override void ResumeCore() Overrides Suspender.ResumeCore() SuspendCore() Declaration protected override void SuspendCore() Overrides Suspender.SuspendCore()"
  },
  "api/Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.html": {
    "href": "api/Kros.Data.BulkActions.SqlServer.SqlServerBulkInsert.html",
    "title": "Class SqlServerBulkInsert | Kros.Utils",
    "keywords": "Class SqlServerBulkInsert Class for fast data inserting into SQL Server. Inheritance System.Object SqlServerBulkInsert Implements IBulkInsert Namespace : Kros.Data.BulkActions.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerBulkInsert : IBulkInsert, IDisposable Constructors SqlServerBulkInsert(SqlConnection) Initialize new instance of SqlServerBulkInsert with database connection connection . Declaration public SqlServerBulkInsert(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be inserted, connection has to be opened. If transaction is running on connection, contructor with defined external transaction must be used. SqlServerBulkInsert(SqlConnection, SqlBulkCopyOptions) Initialize new instance of SqlServerBulkInsert with database connection connection and defined options options . Declaration public SqlServerBulkInsert(SqlConnection connection, SqlBulkCopyOptions options) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be inserted, connection has to be opened. System.Data.SqlClient.SqlBulkCopyOptions options Options System.Data.SqlClient.SqlBulkCopyOptions . SqlServerBulkInsert(SqlConnection, SqlTransaction) Initialize new instance of SqlServerBulkInsert with database connection connection and external transaction externalTransaction . Declaration public SqlServerBulkInsert(SqlConnection connection, SqlTransaction externalTransaction) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be inserted, connection has to be opened. If transaction is running on connection, transaction has to be defined in externalTransaction . System.Data.SqlClient.SqlTransaction externalTransaction External transaction, in which bulk insert is executed. SqlServerBulkInsert(SqlConnection, SqlTransaction, SqlBulkCopyOptions) Initialize new instance of SqlServerBulkInsert with database connection connection , external transaction externalTransaction and defined options options . Declaration public SqlServerBulkInsert(SqlConnection connection, SqlTransaction externalTransaction, SqlBulkCopyOptions options) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection where data will be inserted, connection has to be opened. If transaction is running on connection, transaction has to be defined in externalTransaction . System.Data.SqlClient.SqlTransaction externalTransaction External transaction, in which bulk insert is executed. System.Data.SqlClient.SqlBulkCopyOptions options Options System.Data.SqlClient.SqlBulkCopyOptions . SqlServerBulkInsert(String) Initialize new instance of SqlServerBulkInsert with connectionString . Declaration public SqlServerBulkInsert(string connectionString) Parameters Type Name Description System.String connectionString Connection string for database connection. SqlServerBulkInsert(String, SqlBulkCopyOptions) Initialize new instance of SqlServerBulkInsert with connectionString and defined options options . Declaration public SqlServerBulkInsert(string connectionString, SqlBulkCopyOptions options) Parameters Type Name Description System.String connectionString Connection string for database connection. System.Data.SqlClient.SqlBulkCopyOptions options Options System.Data.SqlClient.SqlBulkCopyOptions . Properties BatchSize Row count for batch sent to database. If 0, batch size is not limited. Declaration public int BatchSize { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException Value is negative. BulkCopyOptions Options BulkCopyOptions for internal instance of System.Data.SqlClient.SqlBulkCopy . Declaration public SqlBulkCopyOptions BulkCopyOptions { get; } Property Value Type Description System.Data.SqlClient.SqlBulkCopyOptions BulkInsertTimeout Timeout for BulkInsert operation. If 0, duration of operation is not limited. Declaration public int BulkInsertTimeout { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException Value is negative. ColumnMappings Declaration public BulkInsertColumnMappingCollection ColumnMappings { get; } Property Value Type Description BulkInsertColumnMappingCollection DefaultBulkCopyOptions Default System.Data.SqlClient.SqlBulkCopyOptions for internal instance of System.Data.SqlClient.SqlBulkCopy , if external transaction is not used. Value is SqlBulkCopyOptions.TableLock | SqlBulkCopyOptions.UseInternalTransaction . Declaration public static SqlBulkCopyOptions DefaultBulkCopyOptions { get; } Property Value Type Description System.Data.SqlClient.SqlBulkCopyOptions DefaultBulkCopyOptionsExternalTransaction Default System.Data.SqlClient.SqlBulkCopyOptions for internal instance of System.Data.SqlClient.SqlBulkCopy , if external transaction is used. Value is SqlBulkCopyOptions.TableLock . Declaration public static SqlBulkCopyOptions DefaultBulkCopyOptionsExternalTransaction { get; } Property Value Type Description System.Data.SqlClient.SqlBulkCopyOptions DestinationTableName Destination table name in database. Declaration public string DestinationTableName { get; set; } Property Value Type Description System.String ExternalTransaction External transaction, in which bulk insert is executed. Declaration public SqlTransaction ExternalTransaction { get; } Property Value Type Description System.Data.SqlClient.SqlTransaction Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Insert(IBulkActionDataReader) Inserts all data from reader . Declaration public void Insert(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Insert(DataTable) Inserts all rows from table table . Declaration public void Insert(DataTable table) Parameters Type Name Description System.Data.DataTable table Source table. Insert(IDataReader) Inserts all data from reader . Declaration public void Insert(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. InsertAsync(IBulkActionDataReader) Asynchronously inserts all data from reader . Declaration public Task InsertAsync(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. InsertAsync(DataTable) Asynchronously inserts all rows from table table . Declaration public Task InsertAsync(DataTable table) Parameters Type Name Description System.Data.DataTable table Source table. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. InsertAsync(IDataReader) Asynchronously inserts all data from reader . Declaration public Task InsertAsync(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. Implements IBulkInsert"
  },
  "api/Kros.Caching.Cache-2.html": {
    "href": "api/Kros.Caching.Cache-2.html",
    "title": "Class Cache<TKey, TValue> | Kros.Utils",
    "keywords": "Class Cache<TKey, TValue> Class for caching data. Inheritance System.Object Cache<TKey, TValue> Implements ICache <TKey, TValue> Namespace : Kros.Caching Assembly : Kros.Utils.dll Syntax public class Cache<TKey, TValue> : ICache<TKey, TValue> Type Parameters Name Description TKey The type of the key. TValue The type of the value. Constructors Cache() Initializes a new instance of the Cache<TKey, TValue> class. Declaration public Cache() Cache(IEqualityComparer<TKey>) Initializes a new instance of the Cache<TKey, TValue> class. Declaration public Cache(IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <TKey> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use when comparing keys. Properties Count Gets the count of cached data. Declaration public int Count { get; } Property Value Type Description System.Int32 Methods Clear() Clears the cache. Declaration public void Clear() Get(TKey, Func<TValue>) Gets the cached value by key. Declaration public TValue Get(TKey key, Func<TValue> factory) Parameters Type Name Description TKey key The key. System.Func <TValue> factory The factory for creating value, if doesn't exist in cahce. Returns Type Description TValue Value from Cache. Remarks If value key doesn't exist in cache, then factory is use for creating value and value is set to cache. Implements ICache<TKey, TValue> See Also ICache <TKey, TValue>"
  },
  "api/Kros.Utils.DateTimeProvider.html": {
    "href": "api/Kros.Utils.DateTimeProvider.html",
    "title": "Class DateTimeProvider | Kros.Utils",
    "keywords": "Class DateTimeProvider Class for \"freezing\" date and time to constant value. Usable for example in tests. Inheritance System.Object DateTimeProvider Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public class DateTimeProvider : IDisposable Remarks Current time is accessible in Now property. Own time can be injected using InjectActualDateTime(DateTime) . private void BasicExample() { using (DateTimeProvider.InjectActualDateTime(new DateTime(1978, 12, 10))) { Console.WriteLine(DateTimeProvider.Now.ToString(\"d.M.yyyy\")); // Writes 10.12.1978 } } Set value is valid for current thread only, so it is possible to have different values in different threads. Properties Now Returns own date and time, if it was set by InjectActualDateTime(DateTime) . If it was not set, System.DateTime.Now is returned. Declaration public static DateTime Now { get; } Property Value Type Description System.DateTime Methods Dispose() Declaration public void Dispose() InjectActualDateTime(DateTime) Sets time actualDateTime , which will be returned in Now property. Use it in using block. Declaration public static IDisposable InjectActualDateTime(DateTime actualDateTime) Parameters Type Name Description System.DateTime actualDateTime Required date and time value. Returns Type Description System.IDisposable See Also System.IDisposable"
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerSchemaLoader.html",
    "title": "Class SqlServerSchemaLoader | Kros.Utils",
    "keywords": "Class SqlServerSchemaLoader The implementation of IDatabaseSchemaLoader<T> for Microsoft SQL Server. Inheritance System.Object SqlServerSchemaLoader Implements IDatabaseSchemaLoader < System.Data.SqlClient.SqlConnection > IDatabaseSchemaLoader Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerSchemaLoader : IDatabaseSchemaLoader<SqlConnection>, IDatabaseSchemaLoader Methods GetDefaultValueString(String) Adjusts the string rawDefaultValueString so column's default value can be obtained from it. Declaration protected virtual string GetDefaultValueString(string rawDefaultValueString) Parameters Type Name Description System.String rawDefaultValueString Default value string as it is stored in database. Returns Type Description System.String Adjusted string - trimmed of unneeded characters. LoadSchema(SqlConnection) Loads database schema for connection . Declaration public DatabaseSchema LoadSchema(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. Returns Type Description DatabaseSchema Database schema. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException System.ArgumentException Initial catalog of connection is an empty string, or string containing whitespace characters only. LoadTableSchema(SqlConnection, String) Loads table schema for table tableName in database connection . Declaration public TableSchema LoadTableSchema(SqlConnection connection, string tableName) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. System.String tableName Table name. Returns Type Description TableSchema Table schema, or value null if specified table does not exist. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException System.ArgumentException OnParseDefaultValue(SqlServerParseDefaultValueEventArgs) Raises the ParseDefaultValue event with arguments e . Declaration protected virtual void OnParseDefaultValue(SqlServerParseDefaultValueEventArgs e) Parameters Type Name Description SqlServerParseDefaultValueEventArgs e Arguments for the event. SupportsConnectionType(SqlConnection) Checks if it is poosible to load database schema for connection . Declaration public bool SupportsConnectionType(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. Returns Type Description System.Boolean false if value of connection is null , otherwise true . Events ParseDefaultValue Event raised while parsing default value of a column. It is possible to use custom parsing logic in the event handler. Declaration public event EventHandler<SqlServerParseDefaultValueEventArgs> ParseDefaultValue Event Type Type Description System.EventHandler < SqlServerParseDefaultValueEventArgs > Remarks When custom logic for parsing column's default value is used, the parsed value is set in DefaultValue property and Handled flag must be set to true . Explicit Interface Implementations IDatabaseSchemaLoader.LoadSchema(Object) Loads database schema for connection . Declaration DatabaseSchema IDatabaseSchemaLoader.LoadSchema(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description DatabaseSchema Database schema. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException System.ArgumentException IDatabaseSchemaLoader.LoadTableSchema(Object, String) Loads table schema for table tableName in database connection . Declaration TableSchema IDatabaseSchemaLoader.LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection Database connection. System.String tableName Table name. Returns Type Description TableSchema Table schema, or value null if specified table does not exist. Remarks Loading schema creates a new connection to database based on connection . If loading with new connection fails (for example input connection is exclusive), schema is loaded using input connection directly. Exceptions Type Condition System.ArgumentNullException System.ArgumentException IDatabaseSchemaLoader.SupportsConnectionType(Object) Checks if it is poosible to load database schema for connection . Declaration bool IDatabaseSchemaLoader.SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description System.Boolean false if value of connection is not of System.Data.SqlClient.SqlConnection type or is null , otherwise true . Implements IDatabaseSchemaLoader<T> IDatabaseSchemaLoader"
  },
  "api/Kros.Data.BulkActions.BulkActionFactories.html": {
    "href": "api/Kros.Data.BulkActions.BulkActionFactories.html",
    "title": "Class BulkActionFactories | Kros.Utils",
    "keywords": "Class BulkActionFactories Representing set of registered IBulkActionFactory . Inheritance System.Object BulkActionFactories Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public static class BulkActionFactories Methods GetFactory(DbConnection) Gets the IBulkActionFactory with specific connection. Declaration public static IBulkActionFactory GetFactory(DbConnection connection) Parameters Type Name Description System.Data.Common.DbConnection connection The connection. Returns Type Description IBulkActionFactory The IBulkActionFactory instance. GetFactory(String, String) Gets the IBulkActionFactory with specific connection string. Declaration public static IBulkActionFactory GetFactory(string connectionString, string adoClientName) Parameters Type Name Description System.String connectionString The connection string. System.String adoClientName Name of the ado client. (e.g. System.Data.SqlClient.SqlConnection it's: System.Data.SqlClient) Returns Type Description IBulkActionFactory The IBulkActionFactory instance. Register<TConnection>(String, Func<DbConnection, IBulkActionFactory>, Func<String, IBulkActionFactory>) Registers the specified ADO client name. Declaration public static void Register<TConnection>(string adoClientName, Func<DbConnection, IBulkActionFactory> factoryByConnection, Func<string, IBulkActionFactory> factoryByConnectionString) where TConnection : DbConnection Parameters Type Name Description System.String adoClientName Name of the database client. System.Func < System.Data.Common.DbConnection , IBulkActionFactory > factoryByConnection The factory by connection. System.Func < System.String , IBulkActionFactory > factoryByConnectionString The factory by connection string. Type Parameters Name Description TConnection The type of the connection."
  },
  "api/Kros.Data.BulkActions.EnumerableDataReader-1.html": {
    "href": "api/Kros.Data.BulkActions.EnumerableDataReader-1.html",
    "title": "Class EnumerableDataReader<T> | Kros.Utils",
    "keywords": "Class EnumerableDataReader<T> IBulkActionDataReader implementation for any list of objects. Inheritance System.Object EnumerableDataReader<T> Implements IBulkActionDataReader Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public class EnumerableDataReader<T> : IBulkActionDataReader, IDisposable Type Parameters Name Description T Object data type. Remarks Class implements IBulkActionDataReader for any list of objects, so this list can be easily used in bulk actions ( IBulkInsert , IBulkUpdate ). Constructors EnumerableDataReader(IEnumerable<T>, IEnumerable<String>) Creates instance of reader over data with list of columns columnNames . Declaration public EnumerableDataReader(IEnumerable<T> data, IEnumerable<string> columnNames) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> data Data which reader operates with. System.Collections.Generic.IEnumerable < System.String > columnNames List of columns with which reader works. For every column must exists property with the same name in object T . Exceptions Type Condition System.ArgumentNullException Value of data , or columnNames is null . System.ArgumentException List columnNames is empty, i.e. does not contain any value. System.InvalidOperationException Class T does not have all properties defined in columnNames . Properties FieldCount Columns count. Declaration public int FieldCount { get; } Property Value Type Description System.Int32 Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetName(Int32) Column name at index i . Declaration public string GetName(int i) Parameters Type Name Description System.Int32 i Column index. Returns Type Description System.String Column name. GetOrdinal(String) Index of column with name . Declaration public int GetOrdinal(string name) Parameters Type Name Description System.String name Column name. Returns Type Description System.Int32 Index. GetString(Int32) Declaration public string GetString(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.String GetValue(Int32) Returns value of column at index i . Declaration public object GetValue(int i) Parameters Type Name Description System.Int32 i Column index. Returns Type Description System.Object Column value. IsDBNull(Int32) Declaration public bool IsDBNull(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Boolean Read() Moves to next record. Declaration public bool Read() Returns Type Description System.Boolean true if move was successfull, false if there is no next record. Implements IBulkActionDataReader"
  },
  "api/Kros.Data.BulkActions.IBulkInsert.html": {
    "href": "api/Kros.Data.BulkActions.IBulkInsert.html",
    "title": "Interface IBulkInsert | Kros.Utils",
    "keywords": "Interface IBulkInsert Interface for fast data inserting into database. Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public interface IBulkInsert : IDisposable Properties BatchSize Row count for batch sent to database. If 0, batch size is not limited. Declaration int BatchSize { get; set; } Property Value Type Description System.Int32 BulkInsertTimeout Timeout for operation in seconds. If 0, duration of operation is not limited. Declaration int BulkInsertTimeout { get; set; } Property Value Type Description System.Int32 ColumnMappings Returns a collection of BulkInsertColumnMapping items. Column mappings define the relationships between columns in the data source and columns in the destination. Mappings also specifies which columns are inserted into database. When mapping is set, only columns in mapping collection are inserted. If no mapping is set, all columns from data source are inserted. Declaration BulkInsertColumnMappingCollection ColumnMappings { get; } Property Value Type Description BulkInsertColumnMappingCollection DestinationTableName Destination table name in database. Declaration string DestinationTableName { get; set; } Property Value Type Description System.String Methods Insert(IBulkActionDataReader) Inserts all data from reader . Declaration void Insert(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Insert(DataTable) Inserts all rows from table table . Declaration void Insert(DataTable table) Parameters Type Name Description System.Data.DataTable table Source table. Insert(IDataReader) Inserts all data from reader . Declaration void Insert(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. InsertAsync(IBulkActionDataReader) Asynchronously inserts all data from reader . Declaration Task InsertAsync(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. InsertAsync(DataTable) Asynchronously inserts all rows from table table . Declaration Task InsertAsync(DataTable table) Parameters Type Name Description System.Data.DataTable table Source table. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. InsertAsync(IDataReader) Asynchronously inserts all data from reader . Declaration Task InsertAsync(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation."
  },
  "api/Kros.Data.Schema.SqlServer.SqlServerCacheKeyGenerator.html": {
    "href": "api/Kros.Data.Schema.SqlServer.SqlServerCacheKeyGenerator.html",
    "title": "Class SqlServerCacheKeyGenerator | Kros.Utils",
    "keywords": "Class SqlServerCacheKeyGenerator Cache key generator for Microsoft SQL Server used by DatabaseSchemaCache . Inheritance System.Object SqlServerCacheKeyGenerator Implements ISchemaCacheKeyGenerator < System.Data.SqlClient.SqlConnection > ISchemaCacheKeyGenerator Namespace : Kros.Data.Schema.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerCacheKeyGenerator : ISchemaCacheKeyGenerator<SqlConnection>, ISchemaCacheKeyGenerator Methods GenerateKey(SqlConnection) Generates a cache key for connection . The generated key is a string \" SqlServer:SERVER\\database \". Declaration public string GenerateKey(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection Database connection. Returns Type Description System.String String. Exceptions Type Condition System.ArgumentNullException Value of connection is null . Explicit Interface Implementations ISchemaCacheKeyGenerator.GenerateKey(Object) Declaration string ISchemaCacheKeyGenerator.GenerateKey(object connection) Parameters Type Name Description System.Object connection Returns Type Description System.String Implements ISchemaCacheKeyGenerator<T> ISchemaCacheKeyGenerator"
  },
  "api/Kros.Data.Schema.DatabaseSchemaLoader.html": {
    "href": "api/Kros.Data.Schema.DatabaseSchemaLoader.html",
    "title": "Class DatabaseSchemaLoader | Kros.Utils",
    "keywords": "Class DatabaseSchemaLoader Helper class for simple loading of database schemas. It contains inner list of different loaders, so it can be used for loading database schema for different databases. Fresh database schema is loaded for every request, it means, loaded schemas are not cached. Inheritance System.Object DatabaseSchemaLoader Implements IDatabaseSchemaLoader Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class DatabaseSchemaLoader : IDatabaseSchemaLoader Remarks Class is a wrapper for loaders for different databases and so it allows loading of database schema for any known database type. More loaders can be added by AddSchemaLoader(IDatabaseSchemaLoader) The class is intended for static use, using property Default . By default, it contains loader for Microsoft SQL Server ( SqlServerSchemaLoader . Examples SqlConnection cn = new SqlConnection(\"...\"); DatabaseSchema schema = DatabaseSchemaLoader.Default.LoadSchema(cn); Properties Default Instance of DatabaseSchemaLoader intended for general use. It contains loader for Microsoft SQL Server by default ( SqlServerSchemaLoader ). Declaration public static DatabaseSchemaLoader Default { get; } Property Value Type Description DatabaseSchemaLoader Methods AddSchemaLoader(IDatabaseSchemaLoader) Adds loader to the list of loaders. Declaration public void AddSchemaLoader(IDatabaseSchemaLoader loader) Parameters Type Name Description IDatabaseSchemaLoader loader Specific database schema loader. Exceptions Type Condition System.ArgumentNullException Value of loader is null . ClearSchemaLoaders() Removes all loaders in the list. Declaration public void ClearSchemaLoaders() LoadSchema(Object) Declaration public DatabaseSchema LoadSchema(object connection) Parameters Type Name Description System.Object connection Returns Type Description DatabaseSchema Exceptions Type Condition System.ArgumentNullException Value of connection is null . System.ArgumentException Loader for connection type specified by connection does not exist. LoadTableSchema(Object, String) Declaration public TableSchema LoadTableSchema(object connection, string tableName) Parameters Type Name Description System.Object connection System.String tableName Returns Type Description TableSchema Exceptions Type Condition System.ArgumentNullException Value of any parameter is null . System.ArgumentException RemoveSchemaLoader(IDatabaseSchemaLoader) Removes loader from the list of loaders. Declaration public void RemoveSchemaLoader(IDatabaseSchemaLoader loader) Parameters Type Name Description IDatabaseSchemaLoader loader Specific database schema loader to be removed from the list. SupportsConnectionType(Object) Checks, if database schema from connection can be loaded. Declaration public bool SupportsConnectionType(object connection) Parameters Type Name Description System.Object connection Database connection. Returns Type Description System.Boolean true if loading schema for connection is supported, false otherwise. Internal list of loader is checked and method returns true if any of the loaders can load schema from connection . Implements IDatabaseSchemaLoader"
  },
  "api/Kros.Data.BulkActions.IBulkUpdate.html": {
    "href": "api/Kros.Data.BulkActions.IBulkUpdate.html",
    "title": "Interface IBulkUpdate | Kros.Utils",
    "keywords": "Interface IBulkUpdate Interface for fast data updating in database. Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public interface IBulkUpdate : IDisposable Properties DestinationTableName Destination table name in database. Declaration string DestinationTableName { get; set; } Property Value Type Description System.String PrimaryKeyColumn Primary key. Declaration string PrimaryKeyColumn { get; set; } Property Value Type Description System.String TempTableAction Action, executed on temporary table. Declaration Action<IDbConnection, IDbTransaction, string> TempTableAction { get; set; } Property Value Type Description System.Action < System.Data.IDbConnection , System.Data.IDbTransaction , System.String > Remarks Action, which will be executed on temp table (additional modification of data). Methods Update(IBulkActionDataReader) Updates all data from source reader . Declaration void Update(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Update(DataTable) Updates all data from table table . Declaration void Update(DataTable table) Parameters Type Name Description System.Data.DataTable table Data source. Update(IDataReader) Updates all data from source reader . Declaration void Update(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. UpdateAsync(IBulkActionDataReader) Asynchronously updates all data from source reader . Declaration Task UpdateAsync(IBulkActionDataReader reader) Parameters Type Name Description IBulkActionDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. UpdateAsync(DataTable) Asynchronously updates all data from table table . Declaration Task UpdateAsync(DataTable table) Parameters Type Name Description System.Data.DataTable table Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation. UpdateAsync(IDataReader) Asynchronously updates all data from source reader . Declaration Task UpdateAsync(IDataReader reader) Parameters Type Name Description System.Data.IDataReader reader Data source. Returns Type Description System.Threading.Tasks.Task A task that represents the asynchronous Insert operation."
  },
  "api/Kros.Data.BulkActions.SqlServer.SqlServerBulkActionFactory.html": {
    "href": "api/Kros.Data.BulkActions.SqlServer.SqlServerBulkActionFactory.html",
    "title": "Class SqlServerBulkActionFactory | Kros.Utils",
    "keywords": "Class SqlServerBulkActionFactory Creates instances of IBulkInsert for bulk inserting. Inheritance System.Object SqlServerBulkActionFactory Implements IBulkActionFactory Namespace : Kros.Data.BulkActions.SqlServer Assembly : Kros.Utils.dll Syntax public class SqlServerBulkActionFactory : IBulkActionFactory Constructors SqlServerBulkActionFactory(SqlConnection) Initializes a new instance of the SqlServerBulkActionFactory class. Declaration public SqlServerBulkActionFactory(SqlConnection connection) Parameters Type Name Description System.Data.SqlClient.SqlConnection connection The connection. SqlServerBulkActionFactory(String) Initializes a new instance of the SqlServerBulkActionFactory class. Declaration public SqlServerBulkActionFactory(string connectionString) Parameters Type Name Description System.String connectionString The connection string. Methods GetBulkInsert() Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert() Returns Type Description IBulkInsert The bulk insert. GetBulkInsert(DbTransaction) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description IBulkInsert The bulk insert. GetBulkInsert(DbTransaction, SqlBulkCopyOptions) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(DbTransaction externalTransaction, SqlBulkCopyOptions options) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. System.Data.SqlClient.SqlBulkCopyOptions options The options. Returns Type Description IBulkInsert The bulk insert. GetBulkInsert(SqlBulkCopyOptions) Gets the bulk insert. Declaration public IBulkInsert GetBulkInsert(SqlBulkCopyOptions options) Parameters Type Name Description System.Data.SqlClient.SqlBulkCopyOptions options The options. Returns Type Description IBulkInsert The bulk insert. GetBulkUpdate() Gets the bulk update. Declaration public IBulkUpdate GetBulkUpdate() Returns Type Description IBulkUpdate The bulk update. GetBulkUpdate(DbTransaction) Gets the bulk update. Declaration public IBulkUpdate GetBulkUpdate(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description IBulkUpdate The bulk update. Register() Registers factory methods for creation instances to BulkActionFactories . Declaration public static void Register() Implements IBulkActionFactory See Also IBulkActionFactory"
  },
  "api/Kros.Data.BulkActions.BulkInsertColumnMappingCollection.html": {
    "href": "api/Kros.Data.BulkActions.BulkInsertColumnMappingCollection.html",
    "title": "Class BulkInsertColumnMappingCollection | Kros.Utils",
    "keywords": "Class BulkInsertColumnMappingCollection Collection of BulkInsertColumnMapping objects that inherits from System.Collections.ObjectModel.Collection<T> . Inheritance System.Object System.Collections.ObjectModel.Collection < BulkInsertColumnMapping > BulkInsertColumnMappingCollection Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public class BulkInsertColumnMappingCollection : Collection<BulkInsertColumnMapping>, IList<BulkInsertColumnMapping>, ICollection<BulkInsertColumnMapping>, IList, ICollection, IReadOnlyList<BulkInsertColumnMapping>, IReadOnlyCollection<BulkInsertColumnMapping>, IEnumerable<BulkInsertColumnMapping>, IEnumerable Methods Add(Int32, Int32) Creates a new BulkInsertColumnMapping and adds it to the collection, using ordinals to specify both source and destination columns. Declaration public void Add(int sourceOrdinal, int destinationOrdinal) Parameters Type Name Description System.Int32 sourceOrdinal The ordinal position of the source column within the data source. System.Int32 destinationOrdinal The ordinal position of the destination column within the destination table. Add(Int32, String) Creates a new BulkInsertColumnMapping and adds it to the collection, using an ordinal for the source column and a string for the destination column. Declaration public void Add(int sourceOrdinal, string destinationName) Parameters Type Name Description System.Int32 sourceOrdinal The ordinal position of the source column within the data source. System.String destinationName The name of the destination column within the destination table. Add(String, Int32) Creates a new BulkInsertColumnMapping and adds it to the collection, using a column name to describe the source column and an ordinal to specify the destination column. Declaration public void Add(string sourceName, int destinationOrdinal) Parameters Type Name Description System.String sourceName The name of the source column within the data source. System.Int32 destinationOrdinal The ordinal position of the destination column within the destination table. Add(String, String) Creates a new BulkInsertColumnMapping and adds it to the collection, using column names to specify both source and destination columns. Declaration public void Add(string sourceName, string destinationName) Parameters Type Name Description System.String sourceName The name of the source column within the data source. System.String destinationName The name of the destination column within the destination table."
  },
  "api/Kros.Utils.Check.html": {
    "href": "api/Kros.Utils.Check.html",
    "title": "Class Check | Kros.Utils",
    "keywords": "Class Check Helper class for validating method parameters. Every validation throws some kind of System.ArgumentException if it fails ( System.ArgumentException , System.ArgumentNullException , System.ArgumentOutOfRangeException ). Inheritance System.Object Check Namespace : Kros.Utils Assembly : Kros.Utils.dll Syntax public static class Check Remarks Default way of validating method parameters is: private string _value1; private int _value2; public void MethodWithParameters(string arg1, int arg2) { if (string.IsNullOrEmpty(arg1)) { throw new ArgumentNullException(nameof(arg1)); } if (arg2 <= 0) { throw new ArgumentException(\"Hodnota parametra arg2 musí byť väčšia ako 0.\", nameof(arg2)); } _value1 = arg1; _value2 = arg2; // ... } With the help of <code>Check</code> class, this is very easy. If it is possible, the validation methods return input value, so the parameter&apos;s value can be validated and assigned on one line: private string _value1; private int _value2; public void MethodWithParameters(string arg1, int arg2) { _value1 = Check.NotNullOrEmpty(arg1, nameof(arg1)); _value2 = Check.GreaterThan(arg2, 0, nameof(arg2)); // ... } Methods Equal<T>(T, T, String) The value of param must be value . Declaration public static T Equal<T>(T param, T value, string paramName) Parameters Type Name Description T param Validated value. T value Required value of the param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is not value . Equal<T>(T, T, String, String) The value of param must be value . Thrown exception has custom message message . Declaration public static T Equal<T>(T param, T value, string paramName, string message) Parameters Type Name Description T param Validated value. T value Required value of the param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is not value . GreaterOrEqualThan<T>(T, T, String) The value of param must be greater or equal than value . Declaration public static T GreaterOrEqualThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is less than value . GreaterOrEqualThan<T>(T, T, String, String) The value of param must be greater or equal than value . Thrown exception has custom message message . Declaration public static T GreaterOrEqualThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is less than value . GreaterThan<T>(T, T, String) The value of param must be greater than value . Declaration public static T GreaterThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is less or equal than value . GreaterThan<T>(T, T, String, String) The value of param must be greater than value . Thrown exception has custom message message . Declaration public static T GreaterThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is less or equal than value . IsInList<T>(T, IEnumerable<T>, String) The value of param must be in list list . Declaration public static T IsInList<T>(T param, IEnumerable<T> list, string paramName) Parameters Type Name Description T param The value, which must be in the list list . System.Collections.Generic.IEnumerable <T> list List of checked values. System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is not in the list list . IsInList<T>(T, IEnumerable<T>, String, String) The value of param must be in list list . Thrown exception has custom message message . Declaration public static T IsInList<T>(T param, IEnumerable<T> list, string paramName, string message) Parameters Type Name Description T param The value, which must be in the list list . System.Collections.Generic.IEnumerable <T> list List of checked values. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is not in the list list . IsNotInList<T>(T, IEnumerable<T>, String) The value of param must not be in list list . Declaration public static T IsNotInList<T>(T param, IEnumerable<T> list, string paramName) Parameters Type Name Description T param The value, which must not be in the list list . System.Collections.Generic.IEnumerable <T> list List of checked values. System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is in the list list . IsNotInList<T>(T, IEnumerable<T>, String, String) The value of param must not be in list list . Thrown exception has custom message message . Declaration public static T IsNotInList<T>(T param, IEnumerable<T> list, string paramName, string message) Parameters Type Name Description T param The value, which must not be in the list list . System.Collections.Generic.IEnumerable <T> list List of checked values. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is in the list list . IsNotOfType(Object, Type, String) The value of param must not be of type notExpectedType . Declaration public static void IsNotOfType(object param, Type notExpectedType, string paramName) Parameters Type Name Description System.Object param Validated value. System.Type notExpectedType The value of param must not be of this type. System.String paramName Name of the method parameter. Exceptions Type Condition System.ArgumentException The value of param is of forbidden type. IsNotOfType(Object, Type, String, String) The value of param must not be of type notExpectedType . Thrown exception has custom message message . Declaration public static void IsNotOfType(object param, Type notExpectedType, string paramName, string message) Parameters Type Name Description System.Object param Validated value. System.Type notExpectedType The value of param must not be of this type. System.String paramName Name of the method parameter. System.String message Custom exception message. Exceptions Type Condition System.ArgumentException The value of param is of forbidden type. IsNotOfType<T>(Object, String) The value of param must not be of given type T . Declaration public static void IsNotOfType<T>(object param, string paramName) Parameters Type Name Description System.Object param Validated value. System.String paramName Name of the method parameter. Type Parameters Name Description T The value of param must not be of this type. Exceptions Type Condition System.ArgumentException The value of param is of forbidden type. IsNotOfType<T>(Object, String, String) The value of param must not be of given type T . Thrown exception has custom message message . Declaration public static void IsNotOfType<T>(object param, string paramName, string message) Parameters Type Name Description System.Object param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Type Parameters Name Description T The value of param must not be of this type. Exceptions Type Condition System.ArgumentException The value of param is of forbidden type. IsOfType(Object, Type, String) The value of param must be of given type expectedType . Declaration public static void IsOfType(object param, Type expectedType, string paramName) Parameters Type Name Description System.Object param Validated value. System.Type expectedType Required type of param . System.String paramName Name of the method parameter. Exceptions Type Condition System.ArgumentException The value of param is not of required type. IsOfType(Object, Type, String, String) The value of param must be of given type expectedType . Thrown exception has custom message message . Declaration public static void IsOfType(object param, Type expectedType, string paramName, string message) Parameters Type Name Description System.Object param Validated value. System.Type expectedType Required type of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Exceptions Type Condition System.ArgumentException The value of param is not of required type. IsOfType<T>(Object, String) The value of param must be of given type T . Declaration public static void IsOfType<T>(object param, string paramName) Parameters Type Name Description System.Object param Validated value. System.String paramName Name of the method parameter. Type Parameters Name Description T Expected type of param . Exceptions Type Condition System.ArgumentException The value of param is not of required type. IsOfType<T>(Object, String, String) The value of param must be of given type T . Thrown exception has custom message message . Declaration public static void IsOfType<T>(object param, string paramName, string message) Parameters Type Name Description System.Object param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Type Parameters Name Description T Expected type of param . Exceptions Type Condition System.ArgumentException The value of param is not of required type. LessOrEqualThan<T>(T, T, String) The value of param must be less or equal than value . Declaration public static T LessOrEqualThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is greater than value . LessOrEqualThan<T>(T, T, String, String) The value of param must be less or equal than value . Thrown exception has custom message message . Declaration public static T LessOrEqualThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is greater than value . LessThan<T>(T, T, String) The value of param must be less than value . Declaration public static T LessThan<T>(T param, T value, string paramName) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is greater or equal than value . LessThan<T>(T, T, String, String) The value of param must be less than value . Thrown exception has custom message message . Declaration public static T LessThan<T>(T param, T value, string paramName, string message) where T : IComparable<T> Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is greater or equal than value . NotEmptyGuid(Guid, String) The value of param can not be empty GUID ( System.Guid.Empty ). Declaration public static Guid NotEmptyGuid(Guid param, string paramName) Parameters Type Name Description System.Guid param Validated value. System.String paramName Name of the method parameter. Returns Type Description System.Guid Input value of param . Exceptions Type Condition System.ArgumentException Paramere je prázdny GUID ( System.Guid.Empty ). NotEmptyGuid(Guid, String, String) The value of param can not be empty GUID ( System.Guid.Empty ). Thrown exception has custom message message . Declaration public static Guid NotEmptyGuid(Guid param, string paramName, string message) Parameters Type Name Description System.Guid param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description System.Guid Input value of param . Exceptions Type Condition System.ArgumentException Value of param is empty GUID ( System.Guid.Empty ). NotEqual<T>(T, T, String) The value of param must not be value . Declaration public static T NotEqual<T>(T param, T value, string paramName) Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is value . NotEqual<T>(T, T, String, String) The value of param must not be value . Thrown exception has custom message message . Declaration public static T NotEqual<T>(T param, T value, string paramName, string message) Parameters Type Name Description T param Validated value. T value Checked value of param . System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentException The value of param is value . NotNull<T>(T, String) The value of param can not be null . Declaration public static T NotNull<T>(T param, string paramName) Parameters Type Name Description T param Validated value. System.String paramName Name of the method parameter. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentNullException The value of param is null . NotNull<T>(T, String, String) The value of param can not be null . Thrown exception has custom message message . Declaration public static T NotNull<T>(T param, string paramName, string message) Parameters Type Name Description T param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description T Input value of param . Type Parameters Name Description T Type of the param . Exceptions Type Condition System.ArgumentNullException The value of param is null . NotNullOrEmpty(String, String) The value of param can not be null , nor empty string. Declaration public static string NotNullOrEmpty(string param, string paramName) Parameters Type Name Description System.String param Validated value. System.String paramName Name of the method parameter. Returns Type Description System.String Input value of param . Exceptions Type Condition System.ArgumentNullException The value of param is null . System.ArgumentException The value of param is empty string. NotNullOrEmpty(String, String, String) The value of param can not be null , nor empty string. Thrown exception has custom message message . Declaration public static string NotNullOrEmpty(string param, string paramName, string message) Parameters Type Name Description System.String param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description System.String Input value of param . Exceptions Type Condition System.ArgumentNullException The value of param is null . System.ArgumentException The value of param is empty string. NotNullOrWhiteSpace(String, String) The value of param can not be null , empty string, nor string containing only whitespace characters. Declaration public static string NotNullOrWhiteSpace(string param, string paramName) Parameters Type Name Description System.String param Validated value. System.String paramName Name of the method parameter. Returns Type Description System.String Input value of param . Exceptions Type Condition System.ArgumentNullException The value of param is null . System.ArgumentException The value of param is empty string or string containing only whitespace characters. NotNullOrWhiteSpace(String, String, String) The value of param can not be null , empty string, nor string containing only whitespace characters. Thrown exception has custom message message . Declaration public static string NotNullOrWhiteSpace(string param, string paramName, string message) Parameters Type Name Description System.String param Validated value. System.String paramName Name of the method parameter. System.String message Custom exception message. Returns Type Description System.String Input value of param . Exceptions Type Condition System.ArgumentNullException The value of param is null . System.ArgumentException The value of param is empty string or string containing only whitespace characters."
  },
  "api/Kros.Data.BulkActions.IBulkActionFactory.html": {
    "href": "api/Kros.Data.BulkActions.IBulkActionFactory.html",
    "title": "Interface IBulkActionFactory | Kros.Utils",
    "keywords": "Interface IBulkActionFactory Creates instances of IBulkInsert and IBulkUpdate for bulk actions. Namespace : Kros.Data.BulkActions Assembly : Kros.Utils.dll Syntax public interface IBulkActionFactory Methods GetBulkInsert() Gets the bulk insert. Declaration IBulkInsert GetBulkInsert() Returns Type Description IBulkInsert The bulk insert. GetBulkInsert(DbTransaction) Gets the bulk insert. Declaration IBulkInsert GetBulkInsert(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description IBulkInsert The bulk insert. GetBulkUpdate() Gets the bulk update. Declaration IBulkUpdate GetBulkUpdate() Returns Type Description IBulkUpdate The bulk update. GetBulkUpdate(DbTransaction) Gets the bulk update. Declaration IBulkUpdate GetBulkUpdate(DbTransaction externalTransaction) Parameters Type Name Description System.Data.Common.DbTransaction externalTransaction The external transaction. Returns Type Description IBulkUpdate The bulk update."
  },
  "api/Kros.Data.Schema.ColumnSchema.html": {
    "href": "api/Kros.Data.Schema.ColumnSchema.html",
    "title": "Class ColumnSchema | Kros.Utils",
    "keywords": "Class ColumnSchema Schema of a database table column. Inheritance System.Object ColumnSchema SqlServerColumnSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public abstract class ColumnSchema Constructors ColumnSchema(String, Boolean, Object, Int32) Creates an instance of column schema with name and specified parameters. Declaration public ColumnSchema(string name, bool allowNull, object defaultValue, int size) Parameters Type Name Description System.String name Column's name System.Boolean allowNull Specifies if column accepts NULL value. System.Object defaultValue Column's default value. System.Int32 size Maximum length of text columns. If value is 0 , maximum length is unlimited. Exceptions Type Condition System.ArgumentNullException Value of name is null . System.ArgumentException Value of name is empty string, or string containing only whitespace characters. Fields DefaultAllowNull Default value for column's AllowNull . The value is false . Declaration public const bool DefaultAllowNull = true Field Value Type Description System.Boolean DefaultDefaultValue Value for the column's DefaultValue , if none is defined. The value is System.DBNull . Declaration public static readonly object DefaultDefaultValue Field Value Type Description System.Object DefaultPrecision Default value for column's Precision . The value is 0 . Declaration public const byte DefaultPrecision = 0 Field Value Type Description System.Byte DefaultScale Default value for column's Scale . The value is 0 . Declaration public const byte DefaultScale = 0 Field Value Type Description System.Byte DefaultSize Default value for column's Size . The value is 0 . Declaration public const int DefaultSize = 0 Field Value Type Description System.Int32 Properties AllowNull Specifies if NULL value is allowed. Declaration public bool AllowNull { get; set; } Property Value Type Description System.Boolean DefaultValue Column's default value. Declaration public object DefaultValue { get; set; } Property Value Type Description System.Object FullName Full name of the column, together with the table name (if column belongs to table). Declaration public string FullName { get; } Property Value Type Description System.String Name Column name. Declaration public string Name { get; } Property Value Type Description System.String Precision The maximum total number of decimal digits that will be stored, both to the left and to the right of the decimal point. Declaration public byte Precision { get; set; } Property Value Type Description System.Byte Scale The number of decimal digits that will be stored to the right of the decimal point. This number is subtracted from p to determine the maximum number of digits to the left of the decimal point. Declaration public byte Scale { get; set; } Property Value Type Description System.Byte Size Maximum length of text columns. If value is 0 , maximum length is unlimited. Declaration public int Size { get; set; } Property Value Type Description System.Int32 Table The table to which the column belongs. The table is set automatically when the column is added to table's Columns collection. Declaration public TableSchema Table { get; } Property Value Type Description TableSchema Methods SetupParameter(IDataParameter) Sets-up command parameter param according to the column schema. Declaration public abstract void SetupParameter(IDataParameter param) Parameters Type Name Description System.Data.IDataParameter param Parameter for System.Data.IDbCommand commands. Remarks Method should set parameters data type, and other specific values (size for VARCHAR , precision and scale for float columns). ToStringDefaultValue() Returns value for DefaultValue for use in ToString() . Declaration protected object ToStringDefaultValue() Returns Type Description System.Object String \" NULL \" if value of DefaultValue is System.DBNull or null . Otherwise returns DefaultValue ."
  },
  "api/Kros.Data.SqlServer.html": {
    "href": "api/Kros.Data.SqlServer.html",
    "title": "Namespace Kros.Data.SqlServer | Kros.Utils",
    "keywords": "Namespace Kros.Data.SqlServer Classes SqlConnectionExtensions Extension methods for System.Data.SqlClient.SqlConnection class. SqlServerDataHelper General helpers for Microsoft SQL Server. SqlServerIdGenerator The unique ID generator for Microsoft SQL Server. SqlServerIdGeneratorFactory Creates an instances of SqlServerIdGenerator for specified database. SqlServerVersions SQL Server versions. Version numbers are taken from this document: https://support.microsoft.com/en-us/help/321185/how-to-determine-the-version-edition-and-update-level-of-sql-server-an . Enums SqlServerErrorCode Some of the error codes for Microsoft SQL Server."
  },
  "api/Kros.Data.html": {
    "href": "api/Kros.Data.html",
    "title": "Namespace Kros.Data | Kros.Utils",
    "keywords": "Namespace Kros.Data Classes ConnectionHelper Helper class for opening database connection. It ensures opening and closing of the connection. DataExtensions Extensions for various data classes. IdGeneratorBase Base class for simple creation of implementations of IIdGenerator . IdGeneratorFactories Helper class for ID generator factories ( IIdGeneratorFactory ) for different databases. Factories are registered in the class using Register<TConnection>(String, Func<DbConnection, IIdGeneratorFactory>, Func<String, IIdGeneratorFactory>) method. Two factory methods are registered for every connection (database) type. One for creating generator with connection instance and one with connection string. Interfaces IIdGenerator Interface for generating IDs for records in database. In general, IDs are just sequential numbers. IIdGeneratorFactory Interface for factory classes, which create instances of IIdGenerator ."
  },
  "api/Kros.Caching.html": {
    "href": "api/Kros.Caching.html",
    "title": "Namespace Kros.Caching | Kros.Utils",
    "keywords": "Namespace Kros.Caching Classes Cache<TKey, TValue> Class for caching data. Interfaces ICache<TKey, TValue> Interface, which describe class for caching data."
  },
  "api/Kros.Data.BulkActions.html": {
    "href": "api/Kros.Data.BulkActions.html",
    "title": "Namespace Kros.Data.BulkActions | Kros.Utils",
    "keywords": "Namespace Kros.Data.BulkActions Classes BulkActionDataReader Wrapper, which extends simple IBulkActionDataReader to more complex System.Data.IDataReader . BulkActionFactories Representing set of registered IBulkActionFactory . BulkInsertColumnMapping Defines the mapping between a column in data source and a column in the destination table for IBulkInsert . BulkInsertColumnMappingCollection Collection of BulkInsertColumnMapping objects that inherits from System.Collections.ObjectModel.Collection<T> . BulkUpdateBase Common base class for BulkUpdate. EnumerableDataReader<T> IBulkActionDataReader implementation for any list of objects. Interfaces IBulkActionDataReader Interface for data source used in bulk actions ( IBulkInsert , IBulkUpdate ). IBulkActionFactory Creates instances of IBulkInsert and IBulkUpdate for bulk actions. IBulkInsert Interface for fast data inserting into database. IBulkUpdate Interface for fast data updating in database."
  },
  "api/Kros.Data.Schema.DatabaseSchema.html": {
    "href": "api/Kros.Data.Schema.DatabaseSchema.html",
    "title": "Class DatabaseSchema | Kros.Utils",
    "keywords": "Class DatabaseSchema Database schema. Inheritance System.Object DatabaseSchema Namespace : Kros.Data.Schema Assembly : Kros.Utils.dll Syntax public class DatabaseSchema Constructors DatabaseSchema(String) Creates an instance of database schema with specified name . Declaration public DatabaseSchema(string name) Parameters Type Name Description System.String name Name of the database. Properties Name Name of the database. Declaration public string Name { get; } Property Value Type Description System.String Tables List of tables in database. Declaration public TableSchemaCollection Tables { get; } Property Value Type Description TableSchemaCollection Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  }
}